{"version":3,"file":"default-node_modules_swimlane_ngx-datatable_fesm2020_swimlane-ngx-datatable_mjs.js","mappings":"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","names":["_c0","_c1","DataTableBodyCellComponent_label_1_Template","rf","ctx","_r5","i0","$event","ctx_r4","onCheckboxChange","ctx_r0","isSelected","DataTableBodyCellComponent_ng_container_2_button_1_i_2_Template","DataTableBodyCellComponent_ng_container_2_button_1_i_3_Template","DataTableBodyCellComponent_ng_container_2_button_1_i_4_Template","DataTableBodyCellComponent_ng_container_2_button_1_Template","_r12","ctx_r11","onTreeAction","ctx_r6","treeStatus","DataTableBodyCellComponent_ng_container_2_2_ng_template_0_Template","_c2","a0","cellContext","DataTableBodyCellComponent_ng_container_2_2_Template","ctx_r7","column","treeToggleTemplate","DataTableBodyCellComponent_ng_container_2_Template","ctx_r1","DataTableBodyCellComponent_span_3_Template","ctx_r2","sanitizedValue","value","DataTableBodyCellComponent_4_ng_template_0_Template","DataTableBodyCellComponent_4_Template","ctx_r3","cellTemplate","DataTableBodyRowComponent_div_0_datatable_body_cell_1_Template","_r7","ii_r5","index","onActivate","ctx_r8","column_r4","$implicit","row","group","expanded","rowIndex","rowHeight","displayCheck","DataTableBodyRowComponent_div_0_Template","colGroup_r1","type","_groupStyles","columns","columnTrackingFn","DataTableSummaryRowComponent_datatable_body_row_0_Template","innerWidth","offsetX","_internalColumns","summaryRow","DataTableRowWrapperComponent_div_0_1_ng_template_0_Template","DataTableRowWrapperComponent_div_0_1_Template","groupHeader","template","groupContext","DataTableRowWrapperComponent_div_0_Template","getGroupHeaderStyle","DataTableRowWrapperComponent_ng_content_1_Template","DataTableRowWrapperComponent_div_2_1_ng_template_0_Template","DataTableRowWrapperComponent_div_2_1_Template","ctx_r5","rowDetail","rowContext","DataTableRowWrapperComponent_div_2_Template","detailRowHeight","DataTableBodyComponent_datatable_progress_0_Template","DataTableBodyComponent_datatable_scroller_3_datatable_summary_row_1_Template","summaryHeight","rows","DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_datatable_body_row_1_Template","_r14","group_r7","ctx_r12","i_r8","ctx_r15","_r1","indexes","first","ctx_r9","getRowSelected","getRowHeight","getRowIndex","getRowExpanded","rowClass","DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_ng_template_2_datatable_body_row_0_Template","_r22","i_r20","row_r19","ctx_r18","DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_ng_template_2_Template","rowTrackingFn","DataTableBodyComponent_datatable_scroller_3_datatable_row_wrapper_2_Template","_r26","ctx_r25","rowContextmenu","emit","_r10","groupedRows","getRowsStyles","getDetailRowHeight","DataTableBodyComponent_datatable_scroller_3_datatable_summary_row_3_Template","getBottomSummaryRowStyles","DataTableBodyComponent_datatable_scroller_3_Template","_r28","ctx_r27","onBodyScroll","scrollbarV","scrollbarH","scrollHeight","columnGroupWidths","total","summaryPosition","temp","DataTableBodyComponent_div_4_Template","emptyMessage","DataTableHeaderCellComponent_1_ng_template_0_Template","DataTableHeaderCellComponent_1_Template","targetMarkerTemplate","targetMarkerContext","DataTableHeaderCellComponent_label_2_Template","_r6","select","allRowsSelected","DataTableHeaderCellComponent_span_3_Template","_r8","onSort","name","DataTableHeaderCellComponent_4_ng_template_0_Template","DataTableHeaderCellComponent_4_Template","headerTemplate","DataTableHeaderComponent_div_1_datatable_header_cell_1_Template","column_r3","onColumnResized","onLongPressStart","onLongPressEnd","ctx_r10","columnContextmenu","resizeable","reorderable","draggable","dragging","dragEventTarget","headerHeight","isTarget","sortType","sorts","selectionType","sortAscendingIcon","sortDescendingIcon","sortUnsetIcon","DataTableHeaderComponent_div_1_Template","_styleByGroup","DataTablePagerComponent_li_7_Template","_r3","pg_r1","selectPage","number","page","text","DataTableFooterComponent_1_ng_template_0_Template","_c3","a1","a2","a3","a4","rowCount","pageSize","selectedCount","curPage","offset","DataTableFooterComponent_1_Template","footerTemplate","DataTableFooterComponent_div_2_span_1_Template","toLocaleString","selectedMessage","DataTableFooterComponent_div_2_Template","totalMessage","DataTableFooterComponent_datatable_pager_3_Template","pagerLeftArrowIcon","pagerRightArrowIcon","pagerPreviousIcon","pagerNextIcon","isVisible","_c4","DatatableComponent_datatable_header_1_Template","onColumnSort","onColumnResize","onColumnReorder","onHeaderSelect","onColumnContextmenu","_innerWidth","_offsetX","undefined","cssClasses","sortAscending","sortDescending","sortUnset","DatatableComponent_datatable_footer_4_Template","_r9","onFooterPage","footerHeight","footer","messages","pagerLeftArrow","pagerRightArrow","pagerPrevious","selected","length","pagerNext","ScrollbarHelper","constructor","document","this","width","getWidth","outer","createElement","style","visibility","msOverflowStyle","body","appendChild","widthNoScroll","offsetWidth","overflow","inner","widthWithScroll","parentNode","removeChild","ɵfac","t","DOCUMENT","ɵprov","token","factory","DimensionsHelper","getDimensions","element","getBoundingClientRect","ColumnChangesService","columnInputChanges","Subject","columnInputChanges$","asObservable","onInputChange","next","DataTableFooterTemplateDirective","ɵdir","selectors","VisibilityDirective","zone","visible","EventEmitter","ngOnInit","runCheck","ngOnDestroy","clearTimeout","timeout","onVisibilityChange","run","check","offsetHeight","nativeElement","runOutsideAngular","setTimeout","hostVars","hostBindings","outputs","DraggableDirective","dragX","dragY","dragStart","dragEnd","isDragging","ngOnChanges","changes","currentValue","dragModel","onMousedown","_destroySubscription","onMouseup","event","classList","remove","subscription","model","target","contains","preventDefault","mouseDownPos","x","clientX","y","clientY","mouseup","fromEvent","subscribe","ev","mouseMoveSub","pipe","takeUntil","move","add","left","top","unsubscribe","inputs","features","ResizeableDirective","renderer","resizeEnabled","resize","resizing","ngAfterViewInit","renderer2","resizeHandle","addClass","destroyNode","closed","clientWidth","isHandle","initialWidth","mouseDownScreenX","screenX","stopPropagation","e","newWidth","minWidth","maxWidth","OrderableDirective","differs","reorder","targetChanged","differ","find","create","ngAfterContentInit","updateSubscriptions","draggables","bind","forEach","d","diffs","diff","createMapDiffs","previousValue","onDragStart","onDragging","onDragEnd","forEachAddedItem","forEachRemovedItem","positions","i","dragger","toArray","elm","parseInt","offsetLeft","toString","prop","right","prevPos","lastDraggingIndex","prevIndex","newIndex","initialIndex","targets","elementsFromPoint","pos","el","reduce","acc","curr","$$id","contentQueries","dirIndex","_t","LongPressDirective","pressEnabled","duration","longPressStart","longPressing","longPressEnd","mouseX","mouseY","press","pressing","isLongPress","isLongPressing","onMouseDown","which","pressModel","mouseEvent","onMouseMove","loop","xThres","Math","abs","yThres","endPress","ScrollerComponent","ngZone","scroll","scrollYPos","scrollXPos","prevScrollYPos","prevScrollXPos","_scrollEventListener","parentElement","onScrolled","addEventListener","removeEventListener","setOffset","offsetY","scrollTop","dom","currentTarget","requestAnimationFrame","scrollLeft","updateOffset","direction","ɵcmp","hostAttrs","scrollWidth","ngContentSelectors","decls","vars","encapsulation","changeDetection","DatatableGroupHeaderTemplateDirective","DatatableGroupHeaderDirective","toggle","_templateInput","_templateQuery","toggleExpandGroup","expandAllGroups","collapseAllGroups","TemplateRef","emptyStringGetter","getterForProp","numericIndexGetter","indexOf","deepValueGetter","shallowValueGetter","obj","fieldName","path","current","split","optionalGetterForProp","groupRowsByParents","from","to","nodeById","l","node","TreeNode","uniqIDs","arr","item","toValue","push","parent","fromValue","level","children","resolvedRows","flatten","f","recursive","child","apply","Array","prototype","slice","call","arguments","camelCase","str","replace","trim","toLowerCase","a","b","c","toUpperCase","deCamelCase","match","setColumnDefaults","treeColumnFound","random","pow","isNullOrUndefined","$$valueGetter","String","hasOwnProperty","sortable","canAutoResize","isTreeColumn","ColumnMode","standard","flex","force","SelectionType","single","multi","multiClick","cell","checkbox","SortType","ContextmenuType","header","DataTableColumnHeaderDirective","DataTableColumnCellDirective","DataTableColumnCellTreeToggle","DataTableColumnDirective","columnChangesService","isFirstChange","_cellTemplateInput","_cellTemplateQuery","_headerTemplateInput","_headerTemplateQuery","_treeToggleTemplateInput","_treeToggleTemplateQuery","frozenLeft","frozenRight","flexGrow","comparator","checkboxable","headerCheckboxable","headerClass","cellClass","treeLevelIndent","summaryFunc","summaryTemplate","DatatableRowDetailTemplateDirective","DatatableRowDetailDirective","toggleExpandRow","expandAllRows","collapseAllRows","DatatableFooterDirective","columnsByPin","cols","ret","center","col","groups","all","columnTotalWidth","floor","totalWidth","parseFloat","columnsByPinArr","val","colsByPinArr","colsByPin","RowHeightCache","treeArray","clearCache","initCache","details","externalVirtual","rowIndexes","rowExpansions","isFn","isDetailFn","isNaN","Error","n","currentRowHeight","has","get","update","scrollY","calcRowIndex","atRowIndex","byRowHeight","query","atIndex","sum","queryBetween","atIndexA","atIndexB","dataLength","blockSize","nextPos","cache","testStyle","prefix","styles","window","getComputedStyle","documentElement","join","pre","RegExp","lowercase","css","js","substr","getVendorPrefixedName","property","transform","backfaceVisibility","hasCSSTransforms","hasCSS3DTransforms","ua","navigator","userAgent","isSafari","test","translateXY","ProgressBarComponent","consts","selectRows","comparefn","selectedIndex","splice","Keys","up","down","return","escape","DataTableSelectionComponent","activate","selectRow","selectEnabled","chkbox","shiftKey","selectRowsBetween","reverse","range","start","end","getRowSelectedIdx","ctrlKey","metaKey","selectCheck","filter","keyCode","onKeyboardFocus","isCellSelection","cellElement","focusCell","rowElement","cellIndex","focusRow","nextRowElement","getPrevNextRow","focus","focusElement","previousElementSibling","nextElementSibling","nextCellElement","getElementsByClassName","rowId","rowIdentity","findIndex","r","SortDirection","asc","desc","DataTableBodyCellComponent","cd","treeAction","isFocused","onCheckboxChangeFn","activateFn","_element","_group","checkValueUpdates","markForCheck","_rowHeight","_isSelected","_expanded","_rowIndex","_column","_row","_sorts","calcSortDir","status","_treeStatus","columnCssClasses","cls","res","keys","Object","k","sortDir","height","ngDoCheck","clear","userPipe","stripHtml","onFocus","onBlur","onClick","onDblClick","onKeyDown","sort","s","dir","html","calcLeftMargin","viewQuery","ViewContainerRef","dependencies","i1","DataTableBodyRowComponent","scrollbarHelper","_rowDiffer","_columns","recalculateColumns","buildStylesByGroup","colByPin","_columnGroupWidths","cssClass","columnsTotalWidths","trackByGroups","colGroup","calcStylesByGroup","widths","bodyWidth","onMouseenter","_columnsByPin","defaultSumFunc","cells","cellsWithValues","some","noopSumFunc","DataTableSummaryRowComponent","updateInternalColumns","updateValues","map","cellsFromSingleColumn","sumFunc","getSummaryFunction","DataTableRowWrapperComponent","rowDiffer","onContextmenu","DataTableBodyComponent","detailToggle","rowHeightsCache","WeakMap","idx","trackByProp","_pageSize","recalcLayout","_rows","_offset","virtualization","_rowCount","bodyHeight","_bodyHeight","listener","toggleRowExpansion","toggleAllRows","updateIndexes","updateRows","updateOffsetY","scroller","updatePage","ceil","last","maxRowsPerGroup","set","g","getGroupHeight","getRowAndDetailHeight","position","hideIndicator","loadingIndicator","externalPaging","max","min","refreshRowHeightCache","Set","getAdjustedViewPortIndex","viewPortFirstRowIndex","rowExpandedIdx","getRowExpandedIdx","currentIndex","stylesByGroup","groupExpansionDefault","groupRowsBy","orderByComparator","Date","isFinite","DataTableHeaderCellComponent","sortFn","selectFn","_allRowsSelected","sortClass","calcSortClass","isCheckboxable","newValue","nextSortDir","prevValue","DataTableHeaderComponent","destroyed","setStylesByGroup","_headerHeight","headerWidth","onColumnReordered","getColumn","onTargetChanged","oldColumn","newColumn","class","concat","leftColumnCount","centerColumnCount","calcNewSorts","detectChanges","dealsWithGroup","throttle","func","wait","options","context","args","result","previous","later","leading","now","remaining","trailing","throttleable","key","descriptor","configurable","enumerable","defineProperty","removeProcessedColumns","columnsToResize","columnsProcessed","getContentWidth","allColumns","defaultColWidth","contentWidth","DataTablePagerComponent","change","_count","_page","_size","size","pages","calcPages","count","totalPages","canPrevious","canNext","prevPage","nextPage","startPage","endPage","maxSize","num","DataTableFooterComponent","DatatableComponent","dimensionsHelper","configuration","columnMode","externalSorting","swapColumns","selectAllRowsOnPage","tableContextmenu","BehaviorSubject","_subscriptions","_groupRowsBy","_internalRows","sortInternalRows","treeFromRelation","treeToRelation","recalculate","groupArrayBy","limit","_limit","isFixedHeader","isFixedRow","isVertScroll","isVirtualized","isHorScroll","isSelectable","isCheckboxSelection","isSingleSelection","isMultiSelection","isMultiClickSelection","columnTemplates","_columnTemplates","translateColumns","bodyComponent","v","listenForColumnInputChanges","translateTemplates","templates","props","getOwnPropertyNames","originalArray","groupBy","Map","addGroup","recalculatePages","recalculateDims","onWindowResize","forceIdx","allowBleed","forceFillColumnWidths","expectedWidth","startIdx","$$oldWidth","additionWidthPerColumn","exceedsWindow","remainingWidth","newSize","adjustColumnWidths","columnsWidth","columnsTotalWidth","totalFlexGrow","getTotalFlexGrow","colsByGroup","scaleColumns","attr","hasMinWidth","widthPerFlexPoint","dims","calcPageSize","calcRowCount","onBodyPage","content","onRowContextmenu","prevCol","movedCol","allSelected","onBodySelect","notifyOnChanges","sortRows","dirs","rowToIndexMap","cachedDirs","valueGetter","compareFn","rowA","rowB","cachedDir","propA","propB","comparison","headerComponent","__decorate","NgxDatatableModule","forRoot","ngModule","providers","provide","useValue","ɵmod","ɵinj","imports","CommonModule","elements","previousPointerEvents","elementFromPoint","getPropertyValue","priority","getPropertyPriority","setProperty"],"sourceRoot":"webpack:///","sources":["./node_modules/@swimlane/ngx-datatable/fesm2020/swimlane-ngx-datatable.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, Inject, Directive, EventEmitter, HostBinding, Output, Input, HostListener, ContentChildren, Component, ChangeDetectionStrategy, TemplateRef, ContentChild, ViewContainerRef, ViewChild, SkipSelf, ViewEncapsulation, Optional, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport { Subject, fromEvent, BehaviorSubject } from 'rxjs';\nimport { takeUntil } from 'rxjs/operators';\nimport { __decorate } from 'tslib';\n\n/**\n * Gets the width of the scrollbar.  Nesc for windows\n * http://stackoverflow.com/a/13382873/888165\n */\nclass ScrollbarHelper {\n    constructor(document) {\n        this.document = document;\n        this.width = this.getWidth();\n    }\n    getWidth() {\n        const outer = this.document.createElement('div');\n        outer.style.visibility = 'hidden';\n        outer.style.width = '100px';\n        outer.style.msOverflowStyle = 'scrollbar';\n        this.document.body.appendChild(outer);\n        const widthNoScroll = outer.offsetWidth;\n        outer.style.overflow = 'scroll';\n        const inner = this.document.createElement('div');\n        inner.style.width = '100%';\n        outer.appendChild(inner);\n        const widthWithScroll = inner.offsetWidth;\n        outer.parentNode.removeChild(outer);\n        return widthNoScroll - widthWithScroll;\n    }\n}\nScrollbarHelper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ScrollbarHelper, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable });\nScrollbarHelper.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ScrollbarHelper });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ScrollbarHelper, decorators: [{\n            type: Injectable\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/**\n * Gets the width of the scrollbar.  Nesc for windows\n * http://stackoverflow.com/a/13382873/888165\n */\nclass DimensionsHelper {\n    getDimensions(element) {\n        return element.getBoundingClientRect();\n    }\n}\nDimensionsHelper.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DimensionsHelper, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nDimensionsHelper.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DimensionsHelper });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DimensionsHelper, decorators: [{\n            type: Injectable\n        }] });\n\n/**\n * service to make DatatableComponent aware of changes to\n * input bindings of DataTableColumnDirective\n */\nclass ColumnChangesService {\n    constructor() {\n        this.columnInputChanges = new Subject();\n    }\n    get columnInputChanges$() {\n        return this.columnInputChanges.asObservable();\n    }\n    onInputChange() {\n        this.columnInputChanges.next();\n    }\n}\nColumnChangesService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ColumnChangesService, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\nColumnChangesService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ColumnChangesService });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ColumnChangesService, decorators: [{\n            type: Injectable\n        }] });\n\nclass DataTableFooterTemplateDirective {\n    constructor(template) {\n        this.template = template;\n    }\n}\nDataTableFooterTemplateDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableFooterTemplateDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nDataTableFooterTemplateDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DataTableFooterTemplateDirective, selector: \"[ngx-datatable-footer-template]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableFooterTemplateDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: '[ngx-datatable-footer-template]' }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n\n/**\n * Visibility Observer Directive\n *\n * Usage:\n *\n * \t\t<div\n * \t\t\tvisibilityObserver\n * \t\t\t(visible)=\"onVisible($event)\">\n * \t\t</div>\n *\n */\nclass VisibilityDirective {\n    constructor(element, zone) {\n        this.element = element;\n        this.zone = zone;\n        this.isVisible = false;\n        this.visible = new EventEmitter();\n    }\n    ngOnInit() {\n        this.runCheck();\n    }\n    ngOnDestroy() {\n        clearTimeout(this.timeout);\n    }\n    onVisibilityChange() {\n        // trigger zone recalc for columns\n        this.zone.run(() => {\n            this.isVisible = true;\n            this.visible.emit(true);\n        });\n    }\n    runCheck() {\n        const check = () => {\n            // https://davidwalsh.name/offsetheight-visibility\n            const { offsetHeight, offsetWidth } = this.element.nativeElement;\n            if (offsetHeight && offsetWidth) {\n                clearTimeout(this.timeout);\n                this.onVisibilityChange();\n            }\n            else {\n                clearTimeout(this.timeout);\n                this.zone.runOutsideAngular(() => {\n                    this.timeout = setTimeout(() => check(), 50);\n                });\n            }\n        };\n        this.timeout = setTimeout(() => check());\n    }\n}\nVisibilityDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: VisibilityDirective, deps: [{ token: i0.ElementRef }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Directive });\nVisibilityDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.1\", type: VisibilityDirective, selector: \"[visibilityObserver]\", outputs: { visible: \"visible\" }, host: { properties: { \"class.visible\": \"this.isVisible\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: VisibilityDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: '[visibilityObserver]' }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.NgZone }]; }, propDecorators: { isVisible: [{\n                type: HostBinding,\n                args: ['class.visible']\n            }], visible: [{\n                type: Output\n            }] } });\n\n/**\n * Draggable Directive for Angular2\n *\n * Inspiration:\n *   https://github.com/AngularClass/angular2-examples/blob/master/rx-draggable/directives/draggable.ts\n *   http://stackoverflow.com/questions/35662530/how-to-implement-drag-and-drop-in-angular2\n *\n */\nclass DraggableDirective {\n    constructor(element) {\n        this.dragX = true;\n        this.dragY = true;\n        this.dragStart = new EventEmitter();\n        this.dragging = new EventEmitter();\n        this.dragEnd = new EventEmitter();\n        this.isDragging = false;\n        this.element = element.nativeElement;\n    }\n    ngOnChanges(changes) {\n        if (changes['dragEventTarget'] && changes['dragEventTarget'].currentValue && this.dragModel.dragging) {\n            this.onMousedown(changes['dragEventTarget'].currentValue);\n        }\n    }\n    ngOnDestroy() {\n        this._destroySubscription();\n    }\n    onMouseup(event) {\n        if (!this.isDragging)\n            return;\n        this.isDragging = false;\n        this.element.classList.remove('dragging');\n        if (this.subscription) {\n            this._destroySubscription();\n            this.dragEnd.emit({\n                event,\n                element: this.element,\n                model: this.dragModel\n            });\n        }\n    }\n    onMousedown(event) {\n        // we only want to drag the inner header text\n        const isDragElm = event.target.classList.contains('draggable');\n        if (isDragElm && (this.dragX || this.dragY)) {\n            event.preventDefault();\n            this.isDragging = true;\n            const mouseDownPos = { x: event.clientX, y: event.clientY };\n            const mouseup = fromEvent(document, 'mouseup');\n            this.subscription = mouseup.subscribe((ev) => this.onMouseup(ev));\n            const mouseMoveSub = fromEvent(document, 'mousemove')\n                .pipe(takeUntil(mouseup))\n                .subscribe((ev) => this.move(ev, mouseDownPos));\n            this.subscription.add(mouseMoveSub);\n            this.dragStart.emit({\n                event,\n                element: this.element,\n                model: this.dragModel\n            });\n        }\n    }\n    move(event, mouseDownPos) {\n        if (!this.isDragging)\n            return;\n        const x = event.clientX - mouseDownPos.x;\n        const y = event.clientY - mouseDownPos.y;\n        if (this.dragX)\n            this.element.style.left = `${x}px`;\n        if (this.dragY)\n            this.element.style.top = `${y}px`;\n        this.element.classList.add('dragging');\n        this.dragging.emit({\n            event,\n            element: this.element,\n            model: this.dragModel\n        });\n    }\n    _destroySubscription() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n            this.subscription = undefined;\n        }\n    }\n}\nDraggableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DraggableDirective, deps: [{ token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Directive });\nDraggableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DraggableDirective, selector: \"[draggable]\", inputs: { dragEventTarget: \"dragEventTarget\", dragModel: \"dragModel\", dragX: \"dragX\", dragY: \"dragY\" }, outputs: { dragStart: \"dragStart\", dragging: \"dragging\", dragEnd: \"dragEnd\" }, usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DraggableDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: '[draggable]' }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }]; }, propDecorators: { dragEventTarget: [{\n                type: Input\n            }], dragModel: [{\n                type: Input\n            }], dragX: [{\n                type: Input\n            }], dragY: [{\n                type: Input\n            }], dragStart: [{\n                type: Output\n            }], dragging: [{\n                type: Output\n            }], dragEnd: [{\n                type: Output\n            }] } });\n\nclass ResizeableDirective {\n    constructor(element, renderer) {\n        this.renderer = renderer;\n        this.resizeEnabled = true;\n        this.resize = new EventEmitter();\n        this.resizing = false;\n        this.element = element.nativeElement;\n    }\n    ngAfterViewInit() {\n        const renderer2 = this.renderer;\n        this.resizeHandle = renderer2.createElement('span');\n        if (this.resizeEnabled) {\n            renderer2.addClass(this.resizeHandle, 'resize-handle');\n        }\n        else {\n            renderer2.addClass(this.resizeHandle, 'resize-handle--not-resizable');\n        }\n        renderer2.appendChild(this.element, this.resizeHandle);\n    }\n    ngOnDestroy() {\n        this._destroySubscription();\n        if (this.renderer.destroyNode) {\n            this.renderer.destroyNode(this.resizeHandle);\n        }\n        else if (this.resizeHandle) {\n            this.renderer.removeChild(this.renderer.parentNode(this.resizeHandle), this.resizeHandle);\n        }\n    }\n    onMouseup() {\n        this.resizing = false;\n        if (this.subscription && !this.subscription.closed) {\n            this._destroySubscription();\n            this.resize.emit(this.element.clientWidth);\n        }\n    }\n    onMousedown(event) {\n        const isHandle = event.target.classList.contains('resize-handle');\n        const initialWidth = this.element.clientWidth;\n        const mouseDownScreenX = event.screenX;\n        if (isHandle) {\n            event.stopPropagation();\n            this.resizing = true;\n            const mouseup = fromEvent(document, 'mouseup');\n            this.subscription = mouseup.subscribe((ev) => this.onMouseup());\n            const mouseMoveSub = fromEvent(document, 'mousemove')\n                .pipe(takeUntil(mouseup))\n                .subscribe((e) => this.move(e, initialWidth, mouseDownScreenX));\n            this.subscription.add(mouseMoveSub);\n        }\n    }\n    move(event, initialWidth, mouseDownScreenX) {\n        const movementX = event.screenX - mouseDownScreenX;\n        const newWidth = initialWidth + movementX;\n        const overMinWidth = !this.minWidth || newWidth >= this.minWidth;\n        const underMaxWidth = !this.maxWidth || newWidth <= this.maxWidth;\n        if (overMinWidth && underMaxWidth) {\n            this.element.style.width = `${newWidth}px`;\n        }\n    }\n    _destroySubscription() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n            this.subscription = undefined;\n        }\n    }\n}\nResizeableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ResizeableDirective, deps: [{ token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Directive });\nResizeableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.1\", type: ResizeableDirective, selector: \"[resizeable]\", inputs: { resizeEnabled: \"resizeEnabled\", minWidth: \"minWidth\", maxWidth: \"maxWidth\" }, outputs: { resize: \"resize\" }, host: { listeners: { \"mousedown\": \"onMousedown($event)\" }, properties: { \"class.resizeable\": \"resizeEnabled\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ResizeableDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[resizeable]',\n                    host: {\n                        '[class.resizeable]': 'resizeEnabled'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { resizeEnabled: [{\n                type: Input\n            }], minWidth: [{\n                type: Input\n            }], maxWidth: [{\n                type: Input\n            }], resize: [{\n                type: Output\n            }], onMousedown: [{\n                type: HostListener,\n                args: ['mousedown', ['$event']]\n            }] } });\n\nclass OrderableDirective {\n    constructor(differs, document) {\n        this.document = document;\n        this.reorder = new EventEmitter();\n        this.targetChanged = new EventEmitter();\n        this.differ = differs.find({}).create();\n    }\n    ngAfterContentInit() {\n        // HACK: Investigate Better Way\n        this.updateSubscriptions();\n        this.draggables.changes.subscribe(this.updateSubscriptions.bind(this));\n    }\n    ngOnDestroy() {\n        this.draggables.forEach(d => {\n            d.dragStart.unsubscribe();\n            d.dragging.unsubscribe();\n            d.dragEnd.unsubscribe();\n        });\n    }\n    updateSubscriptions() {\n        const diffs = this.differ.diff(this.createMapDiffs());\n        if (diffs) {\n            const subscribe = ({ currentValue, previousValue }) => {\n                unsubscribe({ previousValue });\n                if (currentValue) {\n                    currentValue.dragStart.subscribe(this.onDragStart.bind(this));\n                    currentValue.dragging.subscribe(this.onDragging.bind(this));\n                    currentValue.dragEnd.subscribe(this.onDragEnd.bind(this));\n                }\n            };\n            const unsubscribe = ({ previousValue }) => {\n                if (previousValue) {\n                    previousValue.dragStart.unsubscribe();\n                    previousValue.dragging.unsubscribe();\n                    previousValue.dragEnd.unsubscribe();\n                }\n            };\n            diffs.forEachAddedItem(subscribe);\n            // diffs.forEachChangedItem(subscribe.bind(this));\n            diffs.forEachRemovedItem(unsubscribe);\n        }\n    }\n    onDragStart() {\n        this.positions = {};\n        let i = 0;\n        for (const dragger of this.draggables.toArray()) {\n            const elm = dragger.element;\n            const left = parseInt(elm.offsetLeft.toString(), 0);\n            this.positions[dragger.dragModel.prop] = {\n                left,\n                right: left + parseInt(elm.offsetWidth.toString(), 0),\n                index: i++,\n                element: elm\n            };\n        }\n    }\n    onDragging({ element, model, event }) {\n        const prevPos = this.positions[model.prop];\n        const target = this.isTarget(model, event);\n        if (target) {\n            if (this.lastDraggingIndex !== target.i) {\n                this.targetChanged.emit({\n                    prevIndex: this.lastDraggingIndex,\n                    newIndex: target.i,\n                    initialIndex: prevPos.index\n                });\n                this.lastDraggingIndex = target.i;\n            }\n        }\n        else if (this.lastDraggingIndex !== prevPos.index) {\n            this.targetChanged.emit({\n                prevIndex: this.lastDraggingIndex,\n                initialIndex: prevPos.index\n            });\n            this.lastDraggingIndex = prevPos.index;\n        }\n    }\n    onDragEnd({ element, model, event }) {\n        const prevPos = this.positions[model.prop];\n        const target = this.isTarget(model, event);\n        if (target) {\n            this.reorder.emit({\n                prevIndex: prevPos.index,\n                newIndex: target.i,\n                model\n            });\n        }\n        this.lastDraggingIndex = undefined;\n        element.style.left = 'auto';\n    }\n    isTarget(model, event) {\n        let i = 0;\n        const x = event.x || event.clientX;\n        const y = event.y || event.clientY;\n        const targets = this.document.elementsFromPoint(x, y);\n        for (const prop in this.positions) {\n            // current column position which throws event.\n            const pos = this.positions[prop];\n            // since we drag the inner span, we need to find it in the elements at the cursor\n            if (model.prop !== prop && targets.find((el) => el === pos.element)) {\n                return {\n                    pos,\n                    i\n                };\n            }\n            i++;\n        }\n    }\n    createMapDiffs() {\n        return this.draggables.toArray().reduce((acc, curr) => {\n            acc[curr.dragModel.$$id] = curr;\n            return acc;\n        }, {});\n    }\n}\nOrderableDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: OrderableDirective, deps: [{ token: i0.KeyValueDiffers }, { token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Directive });\nOrderableDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.1\", type: OrderableDirective, selector: \"[orderable]\", outputs: { reorder: \"reorder\", targetChanged: \"targetChanged\" }, queries: [{ propertyName: \"draggables\", predicate: DraggableDirective, descendants: true }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: OrderableDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: '[orderable]' }]\n        }], ctorParameters: function () { return [{ type: i0.KeyValueDiffers }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; }, propDecorators: { reorder: [{\n                type: Output\n            }], targetChanged: [{\n                type: Output\n            }], draggables: [{\n                type: ContentChildren,\n                args: [DraggableDirective, { descendants: true }]\n            }] } });\n\nclass LongPressDirective {\n    constructor() {\n        this.pressEnabled = true;\n        this.duration = 500;\n        this.longPressStart = new EventEmitter();\n        this.longPressing = new EventEmitter();\n        this.longPressEnd = new EventEmitter();\n        this.mouseX = 0;\n        this.mouseY = 0;\n    }\n    get press() {\n        return this.pressing;\n    }\n    get isLongPress() {\n        return this.isLongPressing;\n    }\n    onMouseDown(event) {\n        // don't do right/middle clicks\n        if (event.which !== 1 || !this.pressEnabled)\n            return;\n        // don't start drag if its on resize handle\n        const target = event.target;\n        if (target.classList.contains('resize-handle'))\n            return;\n        this.mouseX = event.clientX;\n        this.mouseY = event.clientY;\n        this.pressing = true;\n        this.isLongPressing = false;\n        const mouseup = fromEvent(document, 'mouseup');\n        this.subscription = mouseup.subscribe((ev) => this.onMouseup());\n        this.timeout = setTimeout(() => {\n            this.isLongPressing = true;\n            this.longPressStart.emit({\n                event,\n                model: this.pressModel\n            });\n            this.subscription.add(fromEvent(document, 'mousemove')\n                .pipe(takeUntil(mouseup))\n                .subscribe((mouseEvent) => this.onMouseMove(mouseEvent)));\n            this.loop(event);\n        }, this.duration);\n        this.loop(event);\n    }\n    onMouseMove(event) {\n        if (this.pressing && !this.isLongPressing) {\n            const xThres = Math.abs(event.clientX - this.mouseX) > 10;\n            const yThres = Math.abs(event.clientY - this.mouseY) > 10;\n            if (xThres || yThres) {\n                this.endPress();\n            }\n        }\n    }\n    loop(event) {\n        if (this.isLongPressing) {\n            this.timeout = setTimeout(() => {\n                this.longPressing.emit({\n                    event,\n                    model: this.pressModel\n                });\n                this.loop(event);\n            }, 50);\n        }\n    }\n    endPress() {\n        clearTimeout(this.timeout);\n        this.isLongPressing = false;\n        this.pressing = false;\n        this._destroySubscription();\n        this.longPressEnd.emit({\n            model: this.pressModel\n        });\n    }\n    onMouseup() {\n        this.endPress();\n    }\n    ngOnDestroy() {\n        this._destroySubscription();\n    }\n    _destroySubscription() {\n        if (this.subscription) {\n            this.subscription.unsubscribe();\n            this.subscription = undefined;\n        }\n    }\n}\nLongPressDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: LongPressDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nLongPressDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.1\", type: LongPressDirective, selector: \"[long-press]\", inputs: { pressEnabled: \"pressEnabled\", pressModel: \"pressModel\", duration: \"duration\" }, outputs: { longPressStart: \"longPressStart\", longPressing: \"longPressing\", longPressEnd: \"longPressEnd\" }, host: { listeners: { \"mousedown\": \"onMouseDown($event)\" }, properties: { \"class.press\": \"this.press\", \"class.longpress\": \"this.isLongPress\" } }, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: LongPressDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: '[long-press]' }]\n        }], propDecorators: { pressEnabled: [{\n                type: Input\n            }], pressModel: [{\n                type: Input\n            }], duration: [{\n                type: Input\n            }], longPressStart: [{\n                type: Output\n            }], longPressing: [{\n                type: Output\n            }], longPressEnd: [{\n                type: Output\n            }], press: [{\n                type: HostBinding,\n                args: ['class.press']\n            }], isLongPress: [{\n                type: HostBinding,\n                args: ['class.longpress']\n            }], onMouseDown: [{\n                type: HostListener,\n                args: ['mousedown', ['$event']]\n            }] } });\n\nclass ScrollerComponent {\n    constructor(ngZone, element, renderer) {\n        this.ngZone = ngZone;\n        this.renderer = renderer;\n        this.scrollbarV = false;\n        this.scrollbarH = false;\n        this.scroll = new EventEmitter();\n        this.scrollYPos = 0;\n        this.scrollXPos = 0;\n        this.prevScrollYPos = 0;\n        this.prevScrollXPos = 0;\n        this._scrollEventListener = null;\n        this.element = element.nativeElement;\n    }\n    ngOnInit() {\n        // manual bind so we don't always listen\n        if (this.scrollbarV || this.scrollbarH) {\n            const renderer = this.renderer;\n            this.parentElement = renderer.parentNode(renderer.parentNode(this.element));\n            this._scrollEventListener = this.onScrolled.bind(this);\n            this.parentElement.addEventListener('scroll', this._scrollEventListener);\n        }\n    }\n    ngOnDestroy() {\n        if (this._scrollEventListener) {\n            this.parentElement.removeEventListener('scroll', this._scrollEventListener);\n            this._scrollEventListener = null;\n        }\n    }\n    setOffset(offsetY) {\n        if (this.parentElement) {\n            this.parentElement.scrollTop = offsetY;\n        }\n    }\n    onScrolled(event) {\n        const dom = event.currentTarget;\n        requestAnimationFrame(() => {\n            this.scrollYPos = dom.scrollTop;\n            this.scrollXPos = dom.scrollLeft;\n            this.updateOffset();\n        });\n    }\n    updateOffset() {\n        let direction;\n        if (this.scrollYPos < this.prevScrollYPos) {\n            direction = 'down';\n        }\n        else if (this.scrollYPos > this.prevScrollYPos) {\n            direction = 'up';\n        }\n        this.scroll.emit({\n            direction,\n            scrollYPos: this.scrollYPos,\n            scrollXPos: this.scrollXPos\n        });\n        this.prevScrollYPos = this.scrollYPos;\n        this.prevScrollXPos = this.scrollXPos;\n    }\n}\nScrollerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ScrollerComponent, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i0.Renderer2 }], target: i0.ɵɵFactoryTarget.Component });\nScrollerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: ScrollerComponent, selector: \"datatable-scroller\", inputs: { scrollbarV: \"scrollbarV\", scrollbarH: \"scrollbarH\", scrollHeight: \"scrollHeight\", scrollWidth: \"scrollWidth\" }, outputs: { scroll: \"scroll\" }, host: { properties: { \"style.height.px\": \"this.scrollHeight\", \"style.width.px\": \"this.scrollWidth\" }, classAttribute: \"datatable-scroll\" }, ngImport: i0, template: ` <ng-content></ng-content> `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ScrollerComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'datatable-scroller',\n                    template: ` <ng-content></ng-content> `,\n                    host: {\n                        class: 'datatable-scroll'\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.Renderer2 }]; }, propDecorators: { scrollbarV: [{\n                type: Input\n            }], scrollbarH: [{\n                type: Input\n            }], scrollHeight: [{\n                type: HostBinding,\n                args: ['style.height.px']\n            }, {\n                type: Input\n            }], scrollWidth: [{\n                type: HostBinding,\n                args: ['style.width.px']\n            }, {\n                type: Input\n            }], scroll: [{\n                type: Output\n            }] } });\n\nclass DatatableGroupHeaderTemplateDirective {\n    constructor(template) {\n        this.template = template;\n    }\n}\nDatatableGroupHeaderTemplateDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DatatableGroupHeaderTemplateDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nDatatableGroupHeaderTemplateDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DatatableGroupHeaderTemplateDirective, selector: \"[ngx-datatable-group-header-template]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DatatableGroupHeaderTemplateDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ngx-datatable-group-header-template]'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n\nclass DatatableGroupHeaderDirective {\n    constructor() {\n        /**\n         * Row height is required when virtual scroll is enabled.\n         */\n        this.rowHeight = 0;\n        /**\n         * Track toggling of group visibility\n         */\n        this.toggle = new EventEmitter();\n    }\n    get template() {\n        return this._templateInput || this._templateQuery;\n    }\n    /**\n     * Toggle the expansion of a group\n     */\n    toggleExpandGroup(group) {\n        this.toggle.emit({\n            type: 'group',\n            value: group\n        });\n    }\n    /**\n     * Expand all groups\n     */\n    expandAllGroups() {\n        this.toggle.emit({\n            type: 'all',\n            value: true\n        });\n    }\n    /**\n     * Collapse all groups\n     */\n    collapseAllGroups() {\n        this.toggle.emit({\n            type: 'all',\n            value: false\n        });\n    }\n}\nDatatableGroupHeaderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DatatableGroupHeaderDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nDatatableGroupHeaderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DatatableGroupHeaderDirective, selector: \"ngx-datatable-group-header\", inputs: { rowHeight: \"rowHeight\", _templateInput: [\"template\", \"_templateInput\"] }, outputs: { toggle: \"toggle\" }, queries: [{ propertyName: \"_templateQuery\", first: true, predicate: DatatableGroupHeaderTemplateDirective, descendants: true, read: TemplateRef, static: true }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DatatableGroupHeaderDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: 'ngx-datatable-group-header' }]\n        }], propDecorators: { rowHeight: [{\n                type: Input\n            }], _templateInput: [{\n                type: Input,\n                args: ['template']\n            }], _templateQuery: [{\n                type: ContentChild,\n                args: [DatatableGroupHeaderTemplateDirective, { read: TemplateRef, static: true }]\n            }], toggle: [{\n                type: Output\n            }] } });\n\n/**\n * Always returns the empty string ''\n */\nfunction emptyStringGetter() {\n    return '';\n}\n/**\n * Returns the appropriate getter function for this kind of prop.\n * If prop == null, returns the emptyStringGetter.\n */\nfunction getterForProp(prop) {\n    if (prop == null) {\n        return emptyStringGetter;\n    }\n    if (typeof prop === 'number') {\n        return numericIndexGetter;\n    }\n    else {\n        // deep or simple\n        if (prop.indexOf('.') !== -1) {\n            return deepValueGetter;\n        }\n        else {\n            return shallowValueGetter;\n        }\n    }\n}\n/**\n * Returns the value at this numeric index.\n * @param row array of values\n * @param index numeric index\n * @returns any or '' if invalid index\n */\nfunction numericIndexGetter(row, index) {\n    if (row == null) {\n        return '';\n    }\n    // mimic behavior of deepValueGetter\n    if (!row || index == null) {\n        return row;\n    }\n    const value = row[index];\n    if (value == null) {\n        return '';\n    }\n    return value;\n}\n/**\n * Returns the value of a field.\n * (more efficient than deepValueGetter)\n * @param obj object containing the field\n * @param fieldName field name string\n */\nfunction shallowValueGetter(obj, fieldName) {\n    if (obj == null) {\n        return '';\n    }\n    if (!obj || !fieldName) {\n        return obj;\n    }\n    const value = obj[fieldName];\n    if (value == null) {\n        return '';\n    }\n    return value;\n}\n/**\n * Returns a deep object given a string. zoo['animal.type']\n */\nfunction deepValueGetter(obj, path) {\n    if (obj == null) {\n        return '';\n    }\n    if (!obj || !path) {\n        return obj;\n    }\n    // check if path matches a root-level field\n    // { \"a.b.c\": 123 }\n    let current = obj[path];\n    if (current !== undefined) {\n        return current;\n    }\n    current = obj;\n    const split = path.split('.');\n    if (split.length) {\n        for (let i = 0; i < split.length; i++) {\n            current = current[split[i]];\n            // if found undefined, return empty string\n            if (current === undefined || current === null) {\n                return '';\n            }\n        }\n    }\n    return current;\n}\n\nfunction optionalGetterForProp(prop) {\n    return prop && (row => getterForProp(prop)(row, prop));\n}\n/**\n * This functions rearrange items by their parents\n * Also sets the level value to each of the items\n *\n * Note: Expecting each item has a property called parentId\n * Note: This algorithm will fail if a list has two or more items with same ID\n * NOTE: This algorithm will fail if there is a deadlock of relationship\n *\n * For example,\n *\n * Input\n *\n * id -> parent\n * 1  -> 0\n * 2  -> 0\n * 3  -> 1\n * 4  -> 1\n * 5  -> 2\n * 7  -> 8\n * 6  -> 3\n *\n *\n * Output\n * id -> level\n * 1      -> 0\n * --3    -> 1\n * ----6  -> 2\n * --4    -> 1\n * 2      -> 0\n * --5    -> 1\n * 7     -> 8\n *\n *\n * @param rows\n *\n */\nfunction groupRowsByParents(rows, from, to) {\n    if (from && to) {\n        const nodeById = {};\n        const l = rows.length;\n        let node = null;\n        nodeById[0] = new TreeNode(); // that's the root node\n        const uniqIDs = rows.reduce((arr, item) => {\n            const toValue = to(item);\n            if (arr.indexOf(toValue) === -1) {\n                arr.push(toValue);\n            }\n            return arr;\n        }, []);\n        for (let i = 0; i < l; i++) {\n            // make TreeNode objects for each item\n            nodeById[to(rows[i])] = new TreeNode(rows[i]);\n        }\n        for (let i = 0; i < l; i++) {\n            // link all TreeNode objects\n            node = nodeById[to(rows[i])];\n            let parent = 0;\n            const fromValue = from(node.row);\n            if (!!fromValue && uniqIDs.indexOf(fromValue) > -1) {\n                parent = fromValue;\n            }\n            node.parent = nodeById[parent];\n            node.row['level'] = node.parent.row['level'] + 1;\n            node.parent.children.push(node);\n        }\n        let resolvedRows = [];\n        nodeById[0].flatten(function () {\n            resolvedRows = [...resolvedRows, this.row];\n        }, true);\n        return resolvedRows;\n    }\n    else {\n        return rows;\n    }\n}\nclass TreeNode {\n    constructor(row = null) {\n        if (!row) {\n            row = {\n                level: -1,\n                treeStatus: 'expanded'\n            };\n        }\n        this.row = row;\n        this.parent = null;\n        this.children = [];\n    }\n    flatten(f, recursive) {\n        if (this.row['treeStatus'] === 'expanded') {\n            for (let i = 0, l = this.children.length; i < l; i++) {\n                const child = this.children[i];\n                f.apply(child, Array.prototype.slice.call(arguments, 2));\n                if (recursive)\n                    child.flatten.apply(child, arguments);\n            }\n        }\n    }\n}\n\n/**\n * Converts strings from something to camel case\n * http://stackoverflow.com/questions/10425287/convert-dash-separated-string-to-camelcase\n */\nfunction camelCase(str) {\n    // Replace special characters with a space\n    str = str.replace(/[^a-zA-Z0-9 ]/g, ' ');\n    // put a space before an uppercase letter\n    str = str.replace(/([a-z](?=[A-Z]))/g, '$1 ');\n    // Lower case first character and some other stuff\n    str = str\n        .replace(/([^a-zA-Z0-9 ])|^[0-9]+/g, '')\n        .trim()\n        .toLowerCase();\n    // uppercase characters preceded by a space or number\n    str = str.replace(/([ 0-9]+)([a-zA-Z])/g, function (a, b, c) {\n        return b.trim() + c.toUpperCase();\n    });\n    return str;\n}\n/**\n * Converts strings from camel case to words\n * http://stackoverflow.com/questions/7225407/convert-camelcasetext-to-camel-case-text\n */\nfunction deCamelCase(str) {\n    return str.replace(/([A-Z])/g, match => ` ${match}`).replace(/^./, match => match.toUpperCase());\n}\n\n/**\n * Creates a unique object id.\n * http://stackoverflow.com/questions/6248666/how-to-generate-short-uid-like-ax4j9z-in-js\n */\nfunction id() {\n    return ('0000' + ((Math.random() * Math.pow(36, 4)) << 0).toString(36)).slice(-4);\n}\n\n/**\n * Sets the column defaults\n */\nfunction setColumnDefaults(columns) {\n    if (!columns)\n        return;\n    // Only one column should hold the tree view\n    // Thus if multiple columns are provided with\n    // isTreeColumn as true we take only the first one\n    let treeColumnFound = false;\n    for (const column of columns) {\n        if (!column.$$id) {\n            column.$$id = id();\n        }\n        // prop can be numeric; zero is valid not a missing prop\n        // translate name => prop\n        if (isNullOrUndefined(column.prop) && column.name) {\n            column.prop = camelCase(column.name);\n        }\n        if (!column.$$valueGetter) {\n            column.$$valueGetter = getterForProp(column.prop);\n        }\n        // format props if no name passed\n        if (!isNullOrUndefined(column.prop) && isNullOrUndefined(column.name)) {\n            column.name = deCamelCase(String(column.prop));\n        }\n        if (isNullOrUndefined(column.prop) && isNullOrUndefined(column.name)) {\n            column.name = ''; // Fixes IE and Edge displaying `null`\n        }\n        if (!column.hasOwnProperty('resizeable')) {\n            column.resizeable = true;\n        }\n        if (!column.hasOwnProperty('sortable')) {\n            column.sortable = true;\n        }\n        if (!column.hasOwnProperty('draggable')) {\n            column.draggable = true;\n        }\n        if (!column.hasOwnProperty('canAutoResize')) {\n            column.canAutoResize = true;\n        }\n        if (!column.hasOwnProperty('width')) {\n            column.width = 150;\n        }\n        if (!column.hasOwnProperty('isTreeColumn')) {\n            column.isTreeColumn = false;\n        }\n        else {\n            if (column.isTreeColumn && !treeColumnFound) {\n                // If the first column with isTreeColumn is true found\n                // we mark that treeCoulmn is found\n                treeColumnFound = true;\n            }\n            else {\n                // After that isTreeColumn property for any other column\n                // will be set as false\n                column.isTreeColumn = false;\n            }\n        }\n    }\n}\nfunction isNullOrUndefined(value) {\n    return value === null || value === undefined;\n}\n/**\n * Translates templates definitions to objects\n */\nfunction translateTemplates(templates) {\n    const result = [];\n    for (const temp of templates) {\n        const col = {};\n        const props = Object.getOwnPropertyNames(temp);\n        for (const prop of props) {\n            col[prop] = temp[prop];\n        }\n        if (temp.headerTemplate) {\n            col.headerTemplate = temp.headerTemplate;\n        }\n        if (temp.cellTemplate) {\n            col.cellTemplate = temp.cellTemplate;\n        }\n        if (temp.summaryFunc) {\n            col.summaryFunc = temp.summaryFunc;\n        }\n        if (temp.summaryTemplate) {\n            col.summaryTemplate = temp.summaryTemplate;\n        }\n        result.push(col);\n    }\n    return result;\n}\n\nvar ColumnMode;\n(function (ColumnMode) {\n    ColumnMode[\"standard\"] = \"standard\";\n    ColumnMode[\"flex\"] = \"flex\";\n    ColumnMode[\"force\"] = \"force\";\n})(ColumnMode || (ColumnMode = {}));\n\nvar SelectionType;\n(function (SelectionType) {\n    SelectionType[\"single\"] = \"single\";\n    SelectionType[\"multi\"] = \"multi\";\n    SelectionType[\"multiClick\"] = \"multiClick\";\n    SelectionType[\"cell\"] = \"cell\";\n    SelectionType[\"checkbox\"] = \"checkbox\";\n})(SelectionType || (SelectionType = {}));\n\nvar SortType;\n(function (SortType) {\n    SortType[\"single\"] = \"single\";\n    SortType[\"multi\"] = \"multi\";\n})(SortType || (SortType = {}));\n\nvar ContextmenuType;\n(function (ContextmenuType) {\n    ContextmenuType[\"header\"] = \"header\";\n    ContextmenuType[\"body\"] = \"body\";\n})(ContextmenuType || (ContextmenuType = {}));\n\nclass DataTableColumnHeaderDirective {\n    constructor(template) {\n        this.template = template;\n    }\n}\nDataTableColumnHeaderDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableColumnHeaderDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nDataTableColumnHeaderDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DataTableColumnHeaderDirective, selector: \"[ngx-datatable-header-template]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableColumnHeaderDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: '[ngx-datatable-header-template]' }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n\nclass DataTableColumnCellDirective {\n    constructor(template) {\n        this.template = template;\n    }\n}\nDataTableColumnCellDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableColumnCellDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nDataTableColumnCellDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DataTableColumnCellDirective, selector: \"[ngx-datatable-cell-template]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableColumnCellDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: '[ngx-datatable-cell-template]' }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n\nclass DataTableColumnCellTreeToggle {\n    constructor(template) {\n        this.template = template;\n    }\n}\nDataTableColumnCellTreeToggle.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableColumnCellTreeToggle, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nDataTableColumnCellTreeToggle.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DataTableColumnCellTreeToggle, selector: \"[ngx-datatable-tree-toggle]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableColumnCellTreeToggle, decorators: [{\n            type: Directive,\n            args: [{ selector: '[ngx-datatable-tree-toggle]' }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n\nclass DataTableColumnDirective {\n    constructor(columnChangesService) {\n        this.columnChangesService = columnChangesService;\n        this.isFirstChange = true;\n    }\n    get cellTemplate() {\n        return this._cellTemplateInput || this._cellTemplateQuery;\n    }\n    get headerTemplate() {\n        return this._headerTemplateInput || this._headerTemplateQuery;\n    }\n    get treeToggleTemplate() {\n        return this._treeToggleTemplateInput || this._treeToggleTemplateQuery;\n    }\n    ngOnChanges() {\n        if (this.isFirstChange) {\n            this.isFirstChange = false;\n        }\n        else {\n            this.columnChangesService.onInputChange();\n        }\n    }\n}\nDataTableColumnDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableColumnDirective, deps: [{ token: ColumnChangesService }], target: i0.ɵɵFactoryTarget.Directive });\nDataTableColumnDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DataTableColumnDirective, selector: \"ngx-datatable-column\", inputs: { name: \"name\", prop: \"prop\", frozenLeft: \"frozenLeft\", frozenRight: \"frozenRight\", flexGrow: \"flexGrow\", resizeable: \"resizeable\", comparator: \"comparator\", pipe: \"pipe\", sortable: \"sortable\", draggable: \"draggable\", canAutoResize: \"canAutoResize\", minWidth: \"minWidth\", width: \"width\", maxWidth: \"maxWidth\", checkboxable: \"checkboxable\", headerCheckboxable: \"headerCheckboxable\", headerClass: \"headerClass\", cellClass: \"cellClass\", isTreeColumn: \"isTreeColumn\", treeLevelIndent: \"treeLevelIndent\", summaryFunc: \"summaryFunc\", summaryTemplate: \"summaryTemplate\", _cellTemplateInput: [\"cellTemplate\", \"_cellTemplateInput\"], _headerTemplateInput: [\"headerTemplate\", \"_headerTemplateInput\"], _treeToggleTemplateInput: [\"treeToggleTemplate\", \"_treeToggleTemplateInput\"] }, queries: [{ propertyName: \"_cellTemplateQuery\", first: true, predicate: DataTableColumnCellDirective, descendants: true, read: TemplateRef, static: true }, { propertyName: \"_headerTemplateQuery\", first: true, predicate: DataTableColumnHeaderDirective, descendants: true, read: TemplateRef, static: true }, { propertyName: \"_treeToggleTemplateQuery\", first: true, predicate: DataTableColumnCellTreeToggle, descendants: true, read: TemplateRef, static: true }], usesOnChanges: true, ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableColumnDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: 'ngx-datatable-column' }]\n        }], ctorParameters: function () { return [{ type: ColumnChangesService }]; }, propDecorators: { name: [{\n                type: Input\n            }], prop: [{\n                type: Input\n            }], frozenLeft: [{\n                type: Input\n            }], frozenRight: [{\n                type: Input\n            }], flexGrow: [{\n                type: Input\n            }], resizeable: [{\n                type: Input\n            }], comparator: [{\n                type: Input\n            }], pipe: [{\n                type: Input\n            }], sortable: [{\n                type: Input\n            }], draggable: [{\n                type: Input\n            }], canAutoResize: [{\n                type: Input\n            }], minWidth: [{\n                type: Input\n            }], width: [{\n                type: Input\n            }], maxWidth: [{\n                type: Input\n            }], checkboxable: [{\n                type: Input\n            }], headerCheckboxable: [{\n                type: Input\n            }], headerClass: [{\n                type: Input\n            }], cellClass: [{\n                type: Input\n            }], isTreeColumn: [{\n                type: Input\n            }], treeLevelIndent: [{\n                type: Input\n            }], summaryFunc: [{\n                type: Input\n            }], summaryTemplate: [{\n                type: Input\n            }], _cellTemplateInput: [{\n                type: Input,\n                args: ['cellTemplate']\n            }], _cellTemplateQuery: [{\n                type: ContentChild,\n                args: [DataTableColumnCellDirective, { read: TemplateRef, static: true }]\n            }], _headerTemplateInput: [{\n                type: Input,\n                args: ['headerTemplate']\n            }], _headerTemplateQuery: [{\n                type: ContentChild,\n                args: [DataTableColumnHeaderDirective, { read: TemplateRef, static: true }]\n            }], _treeToggleTemplateInput: [{\n                type: Input,\n                args: ['treeToggleTemplate']\n            }], _treeToggleTemplateQuery: [{\n                type: ContentChild,\n                args: [DataTableColumnCellTreeToggle, { read: TemplateRef, static: true }]\n            }] } });\n\nclass DatatableRowDetailTemplateDirective {\n    constructor(template) {\n        this.template = template;\n    }\n}\nDatatableRowDetailTemplateDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DatatableRowDetailTemplateDirective, deps: [{ token: i0.TemplateRef }], target: i0.ɵɵFactoryTarget.Directive });\nDatatableRowDetailTemplateDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DatatableRowDetailTemplateDirective, selector: \"[ngx-datatable-row-detail-template]\", ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DatatableRowDetailTemplateDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[ngx-datatable-row-detail-template]'\n                }]\n        }], ctorParameters: function () { return [{ type: i0.TemplateRef }]; } });\n\nclass DatatableRowDetailDirective {\n    constructor() {\n        /**\n         * The detail row height is required especially\n         * when virtual scroll is enabled.\n         */\n        this.rowHeight = 0;\n        /**\n         * Row detail row visbility was toggled.\n         */\n        this.toggle = new EventEmitter();\n    }\n    get template() {\n        return this._templateInput || this._templateQuery;\n    }\n    /**\n     * Toggle the expansion of the row\n     */\n    toggleExpandRow(row) {\n        this.toggle.emit({\n            type: 'row',\n            value: row\n        });\n    }\n    /**\n     * API method to expand all the rows.\n     */\n    expandAllRows() {\n        this.toggle.emit({\n            type: 'all',\n            value: true\n        });\n    }\n    /**\n     * API method to collapse all the rows.\n     */\n    collapseAllRows() {\n        this.toggle.emit({\n            type: 'all',\n            value: false\n        });\n    }\n}\nDatatableRowDetailDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DatatableRowDetailDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nDatatableRowDetailDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DatatableRowDetailDirective, selector: \"ngx-datatable-row-detail\", inputs: { rowHeight: \"rowHeight\", _templateInput: [\"template\", \"_templateInput\"] }, outputs: { toggle: \"toggle\" }, queries: [{ propertyName: \"_templateQuery\", first: true, predicate: DatatableRowDetailTemplateDirective, descendants: true, read: TemplateRef, static: true }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DatatableRowDetailDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: 'ngx-datatable-row-detail' }]\n        }], propDecorators: { rowHeight: [{\n                type: Input\n            }], _templateInput: [{\n                type: Input,\n                args: ['template']\n            }], _templateQuery: [{\n                type: ContentChild,\n                args: [DatatableRowDetailTemplateDirective, { read: TemplateRef, static: true }]\n            }], toggle: [{\n                type: Output\n            }] } });\n\nclass DatatableFooterDirective {\n    get template() {\n        return this._templateInput || this._templateQuery;\n    }\n}\nDatatableFooterDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DatatableFooterDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive });\nDatatableFooterDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DatatableFooterDirective, selector: \"ngx-datatable-footer\", inputs: { footerHeight: \"footerHeight\", totalMessage: \"totalMessage\", selectedMessage: \"selectedMessage\", pagerLeftArrowIcon: \"pagerLeftArrowIcon\", pagerRightArrowIcon: \"pagerRightArrowIcon\", pagerPreviousIcon: \"pagerPreviousIcon\", pagerNextIcon: \"pagerNextIcon\", _templateInput: [\"template\", \"_templateInput\"] }, queries: [{ propertyName: \"_templateQuery\", first: true, predicate: DataTableFooterTemplateDirective, descendants: true, read: TemplateRef }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DatatableFooterDirective, decorators: [{\n            type: Directive,\n            args: [{ selector: 'ngx-datatable-footer' }]\n        }], propDecorators: { footerHeight: [{\n                type: Input\n            }], totalMessage: [{\n                type: Input\n            }], selectedMessage: [{\n                type: Input\n            }], pagerLeftArrowIcon: [{\n                type: Input\n            }], pagerRightArrowIcon: [{\n                type: Input\n            }], pagerPreviousIcon: [{\n                type: Input\n            }], pagerNextIcon: [{\n                type: Input\n            }], _templateInput: [{\n                type: Input,\n                args: ['template']\n            }], _templateQuery: [{\n                type: ContentChild,\n                args: [DataTableFooterTemplateDirective, { read: TemplateRef }]\n            }] } });\n\n/**\n * Returns the columns by pin.\n */\nfunction columnsByPin(cols) {\n    const ret = {\n        left: [],\n        center: [],\n        right: []\n    };\n    if (cols) {\n        for (const col of cols) {\n            if (col.frozenLeft) {\n                ret.left.push(col);\n            }\n            else if (col.frozenRight) {\n                ret.right.push(col);\n            }\n            else {\n                ret.center.push(col);\n            }\n        }\n    }\n    return ret;\n}\n/**\n * Returns the widths of all group sets of a column\n */\nfunction columnGroupWidths(groups, all) {\n    return {\n        left: columnTotalWidth(groups.left),\n        center: columnTotalWidth(groups.center),\n        right: columnTotalWidth(groups.right),\n        total: Math.floor(columnTotalWidth(all))\n    };\n}\n/**\n * Calculates the total width of all columns and their groups\n */\nfunction columnTotalWidth(columns, prop) {\n    let totalWidth = 0;\n    if (columns) {\n        for (const c of columns) {\n            const has = prop && c[prop];\n            const width = has ? c[prop] : c.width;\n            totalWidth = totalWidth + parseFloat(width);\n        }\n    }\n    return totalWidth;\n}\n/**\n * Calculates the total width of all columns and their groups\n */\nfunction columnsTotalWidth(columns, prop) {\n    let totalWidth = 0;\n    for (const column of columns) {\n        const has = prop && column[prop];\n        totalWidth = totalWidth + (has ? column[prop] : column.width);\n    }\n    return totalWidth;\n}\nfunction columnsByPinArr(val) {\n    const colsByPinArr = [];\n    const colsByPin = columnsByPin(val);\n    colsByPinArr.push({ type: 'left', columns: colsByPin['left'] });\n    colsByPinArr.push({ type: 'center', columns: colsByPin['center'] });\n    colsByPinArr.push({ type: 'right', columns: colsByPin['right'] });\n    return colsByPinArr;\n}\n\n/**\n * This object contains the cache of the various row heights that are present inside\n * the data table.   Its based on Fenwick tree data structure that helps with\n * querying sums that have time complexity of log n.\n *\n * Fenwick Tree Credits: http://petr-mitrichev.blogspot.com/2013/05/fenwick-tree-range-updates.html\n * https://github.com/mikolalysenko/fenwick-tree\n *\n */\nclass RowHeightCache {\n    constructor() {\n        /**\n         * Tree Array stores the cumulative information of the row heights to perform efficient\n         * range queries and updates.  Currently the tree is initialized to the base row\n         * height instead of the detail row height.\n         */\n        this.treeArray = [];\n    }\n    /**\n     * Clear the Tree array.\n     */\n    clearCache() {\n        this.treeArray = [];\n    }\n    /**\n     * Initialize the Fenwick tree with row Heights.\n     *\n     * @param rows The array of rows which contain the expanded status.\n     * @param rowHeight The row height.\n     * @param detailRowHeight The detail row height.\n     */\n    initCache(details) {\n        const { rows, rowHeight, detailRowHeight, externalVirtual, rowCount, rowIndexes, rowExpansions } = details;\n        const isFn = typeof rowHeight === 'function';\n        const isDetailFn = typeof detailRowHeight === 'function';\n        if (!isFn && isNaN(rowHeight)) {\n            throw new Error(`Row Height cache initialization failed. Please ensure that 'rowHeight' is a\n        valid number or function value: (${rowHeight}) when 'scrollbarV' is enabled.`);\n        }\n        // Add this additional guard in case detailRowHeight is set to 'auto' as it wont work.\n        if (!isDetailFn && isNaN(detailRowHeight)) {\n            throw new Error(`Row Height cache initialization failed. Please ensure that 'detailRowHeight' is a\n        valid number or function value: (${detailRowHeight}) when 'scrollbarV' is enabled.`);\n        }\n        const n = externalVirtual ? rowCount : rows.length;\n        this.treeArray = new Array(n);\n        for (let i = 0; i < n; ++i) {\n            this.treeArray[i] = 0;\n        }\n        for (let i = 0; i < n; ++i) {\n            const row = rows[i];\n            let currentRowHeight = rowHeight;\n            if (isFn) {\n                currentRowHeight = rowHeight(row);\n            }\n            // Add the detail row height to the already expanded rows.\n            // This is useful for the table that goes through a filter or sort.\n            const expanded = rowExpansions.has(row);\n            if (row && expanded) {\n                if (isDetailFn) {\n                    const index = rowIndexes.get(row);\n                    currentRowHeight += detailRowHeight(row, index);\n                }\n                else {\n                    currentRowHeight += detailRowHeight;\n                }\n            }\n            this.update(i, currentRowHeight);\n        }\n    }\n    /**\n     * Given the ScrollY position i.e. sum, provide the rowIndex\n     * that is present in the current view port.  Below handles edge cases.\n     */\n    getRowIndex(scrollY) {\n        if (scrollY === 0)\n            return 0;\n        return this.calcRowIndex(scrollY);\n    }\n    /**\n     * When a row is expanded or rowHeight is changed, update the height.  This can\n     * be utilized in future when Angular Data table supports dynamic row heights.\n     */\n    update(atRowIndex, byRowHeight) {\n        if (!this.treeArray.length) {\n            throw new Error(`Update at index ${atRowIndex} with value ${byRowHeight} failed:\n        Row Height cache not initialized.`);\n        }\n        const n = this.treeArray.length;\n        atRowIndex |= 0;\n        while (atRowIndex < n) {\n            this.treeArray[atRowIndex] += byRowHeight;\n            atRowIndex |= atRowIndex + 1;\n        }\n    }\n    /**\n     * Range Sum query from 1 to the rowIndex\n     */\n    query(atIndex) {\n        if (!this.treeArray.length) {\n            throw new Error(`query at index ${atIndex} failed: Fenwick tree array not initialized.`);\n        }\n        let sum = 0;\n        atIndex |= 0;\n        while (atIndex >= 0) {\n            sum += this.treeArray[atIndex];\n            atIndex = (atIndex & (atIndex + 1)) - 1;\n        }\n        return sum;\n    }\n    /**\n     * Find the total height between 2 row indexes\n     */\n    queryBetween(atIndexA, atIndexB) {\n        return this.query(atIndexB) - this.query(atIndexA - 1);\n    }\n    /**\n     * Given the ScrollY position i.e. sum, provide the rowIndex\n     * that is present in the current view port.\n     */\n    calcRowIndex(sum) {\n        if (!this.treeArray.length)\n            return 0;\n        let pos = -1;\n        const dataLength = this.treeArray.length;\n        // Get the highest bit for the block size.\n        const highestBit = Math.pow(2, dataLength.toString(2).length - 1);\n        for (let blockSize = highestBit; blockSize !== 0; blockSize >>= 1) {\n            const nextPos = pos + blockSize;\n            if (nextPos < dataLength && sum >= this.treeArray[nextPos]) {\n                sum -= this.treeArray[nextPos];\n                pos = nextPos;\n            }\n        }\n        return pos + 1;\n    }\n}\n\nconst cache = {};\nconst testStyle = typeof document !== 'undefined' ? document.createElement('div').style : undefined;\n// Get Prefix\n// http://davidwalsh.name/vendor-prefix\nconst prefix = (function () {\n    const styles = typeof window !== 'undefined' ? window.getComputedStyle(document.documentElement, '') : undefined;\n    const match = typeof styles !== 'undefined'\n        ? Array.prototype.slice\n            .call(styles)\n            .join('')\n            .match(/-(moz|webkit|ms)-/)\n        : null;\n    const pre = match !== null ? match[1] : undefined;\n    // tslint:disable-next-line: tsr-detect-non-literal-regexp\n    const dom = typeof pre !== 'undefined' ? 'WebKit|Moz|MS|O'.match(new RegExp('(' + pre + ')', 'i'))[1] : undefined;\n    return dom\n        ? {\n            dom,\n            lowercase: pre,\n            css: `-${pre}-`,\n            js: pre[0].toUpperCase() + pre.substr(1)\n        }\n        : undefined;\n})();\nfunction getVendorPrefixedName(property) {\n    const name = camelCase(property);\n    if (!cache[name]) {\n        if (prefix !== undefined && testStyle[prefix.css + property] !== undefined) {\n            cache[name] = prefix.css + property;\n        }\n        else if (testStyle[property] !== undefined) {\n            cache[name] = property;\n        }\n    }\n    return cache[name];\n}\n\n// browser detection and prefixing tools\nconst transform = typeof window !== 'undefined' ? getVendorPrefixedName('transform') : undefined;\nconst backfaceVisibility = typeof window !== 'undefined' ? getVendorPrefixedName('backfaceVisibility') : undefined;\nconst hasCSSTransforms = typeof window !== 'undefined' ? !!getVendorPrefixedName('transform') : undefined;\nconst hasCSS3DTransforms = typeof window !== 'undefined' ? !!getVendorPrefixedName('perspective') : undefined;\nconst ua = typeof window !== 'undefined' ? window.navigator.userAgent : 'Chrome';\nconst isSafari = /Safari\\//.test(ua) && !/Chrome\\//.test(ua);\nfunction translateXY(styles, x, y) {\n    if (typeof transform !== 'undefined' && hasCSSTransforms) {\n        if (!isSafari && hasCSS3DTransforms) {\n            styles[transform] = `translate3d(${x}px, ${y}px, 0)`;\n            styles[backfaceVisibility] = 'hidden';\n        }\n        else {\n            styles[camelCase(transform)] = `translate(${x}px, ${y}px)`;\n        }\n    }\n    else {\n        styles.top = `${y}px`;\n        styles.left = `${x}px`;\n    }\n}\n\nclass ProgressBarComponent {\n}\nProgressBarComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ProgressBarComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nProgressBarComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: ProgressBarComponent, selector: \"datatable-progress\", ngImport: i0, template: `\n    <div class=\"progress-linear\" role=\"progressbar\">\n      <div class=\"container\">\n        <div class=\"bar\"></div>\n      </div>\n    </div>\n  `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: ProgressBarComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'datatable-progress',\n                    template: `\n    <div class=\"progress-linear\" role=\"progressbar\">\n      <div class=\"container\">\n        <div class=\"bar\"></div>\n      </div>\n    </div>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }] });\n\nfunction selectRows(selected, row, comparefn) {\n    const selectedIndex = comparefn(row, selected);\n    if (selectedIndex > -1) {\n        selected.splice(selectedIndex, 1);\n    }\n    else {\n        selected.push(row);\n    }\n    return selected;\n}\nfunction selectRowsBetween(selected, rows, index, prevIndex, comparefn) {\n    const reverse = index < prevIndex;\n    for (let i = 0; i < rows.length; i++) {\n        const row = rows[i];\n        const greater = i >= prevIndex && i <= index;\n        const lesser = i <= prevIndex && i >= index;\n        let range = { start: 0, end: 0 };\n        if (reverse) {\n            range = {\n                start: index,\n                end: prevIndex\n            };\n        }\n        else {\n            range = {\n                start: prevIndex,\n                end: index + 1\n            };\n        }\n        if ((reverse && lesser) || (!reverse && greater)) {\n            // if in the positive range to be added to `selected`, and\n            // not already in the selected array, add it\n            if (i >= range.start && i <= range.end) {\n                selected.push(row);\n            }\n        }\n    }\n    return selected;\n}\n\nvar Keys;\n(function (Keys) {\n    Keys[Keys[\"up\"] = 38] = \"up\";\n    Keys[Keys[\"down\"] = 40] = \"down\";\n    Keys[Keys[\"return\"] = 13] = \"return\";\n    Keys[Keys[\"escape\"] = 27] = \"escape\";\n    Keys[Keys[\"left\"] = 37] = \"left\";\n    Keys[Keys[\"right\"] = 39] = \"right\";\n})(Keys || (Keys = {}));\n\nclass DataTableSelectionComponent {\n    constructor() {\n        this.activate = new EventEmitter();\n        this.select = new EventEmitter();\n    }\n    selectRow(event, index, row) {\n        if (!this.selectEnabled)\n            return;\n        const chkbox = this.selectionType === SelectionType.checkbox;\n        const multi = this.selectionType === SelectionType.multi;\n        const multiClick = this.selectionType === SelectionType.multiClick;\n        let selected = [];\n        if (multi || chkbox || multiClick) {\n            if (event.shiftKey) {\n                selected = selectRowsBetween([], this.rows, index, this.prevIndex, this.getRowSelectedIdx.bind(this));\n            }\n            else if (event.ctrlKey || event.metaKey || multiClick || chkbox) {\n                selected = selectRows([...this.selected], row, this.getRowSelectedIdx.bind(this));\n            }\n            else {\n                selected = selectRows([], row, this.getRowSelectedIdx.bind(this));\n            }\n        }\n        else {\n            selected = selectRows([], row, this.getRowSelectedIdx.bind(this));\n        }\n        if (typeof this.selectCheck === 'function') {\n            selected = selected.filter(this.selectCheck.bind(this));\n        }\n        this.selected.splice(0, this.selected.length);\n        this.selected.push(...selected);\n        this.prevIndex = index;\n        this.select.emit({\n            selected\n        });\n    }\n    onActivate(model, index) {\n        const { type, event, row } = model;\n        const chkbox = this.selectionType === SelectionType.checkbox;\n        const select = (!chkbox && (type === 'click' || type === 'dblclick')) || (chkbox && type === 'checkbox');\n        if (select) {\n            this.selectRow(event, index, row);\n        }\n        else if (type === 'keydown') {\n            if (event.keyCode === Keys.return) {\n                this.selectRow(event, index, row);\n            }\n            else {\n                this.onKeyboardFocus(model);\n            }\n        }\n        this.activate.emit(model);\n    }\n    onKeyboardFocus(model) {\n        const { keyCode } = model.event;\n        const shouldFocus = keyCode === Keys.up || keyCode === Keys.down || keyCode === Keys.right || keyCode === Keys.left;\n        if (shouldFocus) {\n            const isCellSelection = this.selectionType === SelectionType.cell;\n            if (!model.cellElement || !isCellSelection) {\n                this.focusRow(model.rowElement, keyCode);\n            }\n            else if (isCellSelection) {\n                this.focusCell(model.cellElement, model.rowElement, keyCode, model.cellIndex);\n            }\n        }\n    }\n    focusRow(rowElement, keyCode) {\n        const nextRowElement = this.getPrevNextRow(rowElement, keyCode);\n        if (nextRowElement)\n            nextRowElement.focus();\n    }\n    getPrevNextRow(rowElement, keyCode) {\n        const parentElement = rowElement.parentElement;\n        if (parentElement) {\n            let focusElement;\n            if (keyCode === Keys.up) {\n                focusElement = parentElement.previousElementSibling;\n            }\n            else if (keyCode === Keys.down) {\n                focusElement = parentElement.nextElementSibling;\n            }\n            if (focusElement && focusElement.children.length) {\n                return focusElement.children[0];\n            }\n        }\n    }\n    focusCell(cellElement, rowElement, keyCode, cellIndex) {\n        let nextCellElement;\n        if (keyCode === Keys.left) {\n            nextCellElement = cellElement.previousElementSibling;\n        }\n        else if (keyCode === Keys.right) {\n            nextCellElement = cellElement.nextElementSibling;\n        }\n        else if (keyCode === Keys.up || keyCode === Keys.down) {\n            const nextRowElement = this.getPrevNextRow(rowElement, keyCode);\n            if (nextRowElement) {\n                const children = nextRowElement.getElementsByClassName('datatable-body-cell');\n                if (children.length)\n                    nextCellElement = children[cellIndex];\n            }\n        }\n        if (nextCellElement)\n            nextCellElement.focus();\n    }\n    getRowSelected(row) {\n        return this.getRowSelectedIdx(row, this.selected) > -1;\n    }\n    getRowSelectedIdx(row, selected) {\n        if (!selected || !selected.length)\n            return -1;\n        const rowId = this.rowIdentity(row);\n        return selected.findIndex(r => {\n            const id = this.rowIdentity(r);\n            return id === rowId;\n        });\n    }\n}\nDataTableSelectionComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableSelectionComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nDataTableSelectionComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DataTableSelectionComponent, selector: \"datatable-selection\", inputs: { rows: \"rows\", selected: \"selected\", selectEnabled: \"selectEnabled\", selectionType: \"selectionType\", rowIdentity: \"rowIdentity\", selectCheck: \"selectCheck\" }, outputs: { activate: \"activate\", select: \"select\" }, ngImport: i0, template: ` <ng-content></ng-content> `, isInline: true, changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableSelectionComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'datatable-selection',\n                    template: ` <ng-content></ng-content> `,\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { rows: [{\n                type: Input\n            }], selected: [{\n                type: Input\n            }], selectEnabled: [{\n                type: Input\n            }], selectionType: [{\n                type: Input\n            }], rowIdentity: [{\n                type: Input\n            }], selectCheck: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], select: [{\n                type: Output\n            }] } });\n\nvar SortDirection;\n(function (SortDirection) {\n    SortDirection[\"asc\"] = \"asc\";\n    SortDirection[\"desc\"] = \"desc\";\n})(SortDirection || (SortDirection = {}));\n\nclass DataTableBodyCellComponent {\n    constructor(element, cd) {\n        this.cd = cd;\n        this.activate = new EventEmitter();\n        this.treeAction = new EventEmitter();\n        this.isFocused = false;\n        this.onCheckboxChangeFn = this.onCheckboxChange.bind(this);\n        this.activateFn = this.activate.emit.bind(this.activate);\n        this.cellContext = {\n            onCheckboxChangeFn: this.onCheckboxChangeFn,\n            activateFn: this.activateFn,\n            row: this.row,\n            group: this.group,\n            value: this.value,\n            column: this.column,\n            rowHeight: this.rowHeight,\n            isSelected: this.isSelected,\n            rowIndex: this.rowIndex,\n            treeStatus: this.treeStatus,\n            onTreeAction: this.onTreeAction.bind(this)\n        };\n        this._element = element.nativeElement;\n    }\n    set group(group) {\n        this._group = group;\n        this.cellContext.group = group;\n        this.checkValueUpdates();\n        this.cd.markForCheck();\n    }\n    get group() {\n        return this._group;\n    }\n    set rowHeight(val) {\n        this._rowHeight = val;\n        this.cellContext.rowHeight = val;\n        this.checkValueUpdates();\n        this.cd.markForCheck();\n    }\n    get rowHeight() {\n        return this._rowHeight;\n    }\n    set isSelected(val) {\n        this._isSelected = val;\n        this.cellContext.isSelected = val;\n        this.cd.markForCheck();\n    }\n    get isSelected() {\n        return this._isSelected;\n    }\n    set expanded(val) {\n        this._expanded = val;\n        this.cellContext.expanded = val;\n        this.cd.markForCheck();\n    }\n    get expanded() {\n        return this._expanded;\n    }\n    set rowIndex(val) {\n        this._rowIndex = val;\n        this.cellContext.rowIndex = val;\n        this.checkValueUpdates();\n        this.cd.markForCheck();\n    }\n    get rowIndex() {\n        return this._rowIndex;\n    }\n    set column(column) {\n        this._column = column;\n        this.cellContext.column = column;\n        this.checkValueUpdates();\n        this.cd.markForCheck();\n    }\n    get column() {\n        return this._column;\n    }\n    set row(row) {\n        this._row = row;\n        this.cellContext.row = row;\n        this.checkValueUpdates();\n        this.cd.markForCheck();\n    }\n    get row() {\n        return this._row;\n    }\n    set sorts(val) {\n        this._sorts = val;\n        this.calcSortDir = this.calcSortDir(val);\n    }\n    get sorts() {\n        return this._sorts;\n    }\n    set treeStatus(status) {\n        if (status !== 'collapsed' && status !== 'expanded' && status !== 'loading' && status !== 'disabled') {\n            this._treeStatus = 'collapsed';\n        }\n        else {\n            this._treeStatus = status;\n        }\n        this.cellContext.treeStatus = this._treeStatus;\n        this.checkValueUpdates();\n        this.cd.markForCheck();\n    }\n    get treeStatus() {\n        return this._treeStatus;\n    }\n    get columnCssClasses() {\n        let cls = 'datatable-body-cell';\n        if (this.column.cellClass) {\n            if (typeof this.column.cellClass === 'string') {\n                cls += ' ' + this.column.cellClass;\n            }\n            else if (typeof this.column.cellClass === 'function') {\n                const res = this.column.cellClass({\n                    row: this.row,\n                    group: this.group,\n                    column: this.column,\n                    value: this.value,\n                    rowHeight: this.rowHeight\n                });\n                if (typeof res === 'string') {\n                    cls += ' ' + res;\n                }\n                else if (typeof res === 'object') {\n                    const keys = Object.keys(res);\n                    for (const k of keys) {\n                        if (res[k] === true) {\n                            cls += ` ${k}`;\n                        }\n                    }\n                }\n            }\n        }\n        if (!this.sortDir) {\n            cls += ' sort-active';\n        }\n        if (this.isFocused) {\n            cls += ' active';\n        }\n        if (this.sortDir === SortDirection.asc) {\n            cls += ' sort-asc';\n        }\n        if (this.sortDir === SortDirection.desc) {\n            cls += ' sort-desc';\n        }\n        return cls;\n    }\n    get width() {\n        return this.column.width;\n    }\n    get minWidth() {\n        return this.column.minWidth;\n    }\n    get maxWidth() {\n        return this.column.maxWidth;\n    }\n    get height() {\n        const height = this.rowHeight;\n        if (isNaN(height)) {\n            return height;\n        }\n        return height + 'px';\n    }\n    ngDoCheck() {\n        this.checkValueUpdates();\n    }\n    ngOnDestroy() {\n        if (this.cellTemplate) {\n            this.cellTemplate.clear();\n        }\n    }\n    checkValueUpdates() {\n        let value = '';\n        if (!this.row || !this.column) {\n            value = '';\n        }\n        else {\n            const val = this.column.$$valueGetter(this.row, this.column.prop);\n            const userPipe = this.column.pipe;\n            if (userPipe) {\n                value = userPipe.transform(val);\n            }\n            else if (value !== undefined) {\n                value = val;\n            }\n        }\n        if (this.value !== value) {\n            this.value = value;\n            this.cellContext.value = value;\n            this.sanitizedValue = value !== null && value !== undefined ? this.stripHtml(value) : value;\n            this.cd.markForCheck();\n        }\n    }\n    onFocus() {\n        this.isFocused = true;\n    }\n    onBlur() {\n        this.isFocused = false;\n    }\n    onClick(event) {\n        this.activate.emit({\n            type: 'click',\n            event,\n            row: this.row,\n            group: this.group,\n            rowHeight: this.rowHeight,\n            column: this.column,\n            value: this.value,\n            cellElement: this._element\n        });\n    }\n    onDblClick(event) {\n        this.activate.emit({\n            type: 'dblclick',\n            event,\n            row: this.row,\n            group: this.group,\n            rowHeight: this.rowHeight,\n            column: this.column,\n            value: this.value,\n            cellElement: this._element\n        });\n    }\n    onKeyDown(event) {\n        const keyCode = event.keyCode;\n        const isTargetCell = event.target === this._element;\n        const isAction = keyCode === Keys.return ||\n            keyCode === Keys.down ||\n            keyCode === Keys.up ||\n            keyCode === Keys.left ||\n            keyCode === Keys.right;\n        if (isAction && isTargetCell) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.activate.emit({\n                type: 'keydown',\n                event,\n                row: this.row,\n                group: this.group,\n                rowHeight: this.rowHeight,\n                column: this.column,\n                value: this.value,\n                cellElement: this._element\n            });\n        }\n    }\n    onCheckboxChange(event) {\n        this.activate.emit({\n            type: 'checkbox',\n            event,\n            row: this.row,\n            group: this.group,\n            rowHeight: this.rowHeight,\n            column: this.column,\n            value: this.value,\n            cellElement: this._element,\n            treeStatus: 'collapsed'\n        });\n    }\n    calcSortDir(sorts) {\n        if (!sorts) {\n            return;\n        }\n        const sort = sorts.find((s) => {\n            return s.prop === this.column.prop;\n        });\n        if (sort) {\n            return sort.dir;\n        }\n    }\n    stripHtml(html) {\n        if (!html.replace) {\n            return html;\n        }\n        return html.replace(/<\\/?[^>]+(>|$)/g, '');\n    }\n    onTreeAction() {\n        this.treeAction.emit(this.row);\n    }\n    calcLeftMargin(column, row) {\n        const levelIndent = column.treeLevelIndent != null ? column.treeLevelIndent : 50;\n        return column.isTreeColumn ? row.level * levelIndent : 0;\n    }\n}\nDataTableBodyCellComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableBodyCellComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nDataTableBodyCellComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DataTableBodyCellComponent, selector: \"datatable-body-cell\", inputs: { displayCheck: \"displayCheck\", group: \"group\", rowHeight: \"rowHeight\", isSelected: \"isSelected\", expanded: \"expanded\", rowIndex: \"rowIndex\", column: \"column\", row: \"row\", sorts: \"sorts\", treeStatus: \"treeStatus\" }, outputs: { activate: \"activate\", treeAction: \"treeAction\" }, host: { listeners: { \"focus\": \"onFocus()\", \"blur\": \"onBlur()\", \"click\": \"onClick($event)\", \"dblclick\": \"onDblClick($event)\", \"keydown\": \"onKeyDown($event)\" }, properties: { \"class\": \"this.columnCssClasses\", \"style.width.px\": \"this.width\", \"style.minWidth.px\": \"this.minWidth\", \"style.maxWidth.px\": \"this.maxWidth\", \"style.height\": \"this.height\" } }, viewQueries: [{ propertyName: \"cellTemplate\", first: true, predicate: [\"cellTemplate\"], descendants: true, read: ViewContainerRef, static: true }], ngImport: i0, template: `\n    <div class=\"datatable-body-cell-label\" [style.margin-left.px]=\"calcLeftMargin(column, row)\">\n      <label\n        *ngIf=\"column.checkboxable && (!displayCheck || displayCheck(row, column, value))\"\n        class=\"datatable-checkbox\"\n      >\n        <input type=\"checkbox\" [checked]=\"isSelected\" (click)=\"onCheckboxChange($event)\" />\n      </label>\n      <ng-container *ngIf=\"column.isTreeColumn\">\n        <button\n          *ngIf=\"!column.treeToggleTemplate\"\n          class=\"datatable-tree-button\"\n          [disabled]=\"treeStatus === 'disabled'\"\n          (click)=\"onTreeAction()\"\n        >\n          <span>\n            <i *ngIf=\"treeStatus === 'loading'\" class=\"icon datatable-icon-collapse\"></i>\n            <i *ngIf=\"treeStatus === 'collapsed'\" class=\"icon datatable-icon-up\"></i>\n            <i *ngIf=\"treeStatus === 'expanded' || treeStatus === 'disabled'\" class=\"icon datatable-icon-down\"></i>\n          </span>\n        </button>\n        <ng-template\n          *ngIf=\"column.treeToggleTemplate\"\n          [ngTemplateOutlet]=\"column.treeToggleTemplate\"\n          [ngTemplateOutletContext]=\"{ cellContext: cellContext }\"\n        >\n        </ng-template>\n      </ng-container>\n\n      <span *ngIf=\"!column.cellTemplate\" [title]=\"sanitizedValue\" [innerHTML]=\"value\"> </span>\n      <ng-template\n        #cellTemplate\n        *ngIf=\"column.cellTemplate\"\n        [ngTemplateOutlet]=\"column.cellTemplate\"\n        [ngTemplateOutletContext]=\"cellContext\"\n      >\n      </ng-template>\n    </div>\n  `, isInline: true, directives: [{ type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableBodyCellComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'datatable-body-cell',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: `\n    <div class=\"datatable-body-cell-label\" [style.margin-left.px]=\"calcLeftMargin(column, row)\">\n      <label\n        *ngIf=\"column.checkboxable && (!displayCheck || displayCheck(row, column, value))\"\n        class=\"datatable-checkbox\"\n      >\n        <input type=\"checkbox\" [checked]=\"isSelected\" (click)=\"onCheckboxChange($event)\" />\n      </label>\n      <ng-container *ngIf=\"column.isTreeColumn\">\n        <button\n          *ngIf=\"!column.treeToggleTemplate\"\n          class=\"datatable-tree-button\"\n          [disabled]=\"treeStatus === 'disabled'\"\n          (click)=\"onTreeAction()\"\n        >\n          <span>\n            <i *ngIf=\"treeStatus === 'loading'\" class=\"icon datatable-icon-collapse\"></i>\n            <i *ngIf=\"treeStatus === 'collapsed'\" class=\"icon datatable-icon-up\"></i>\n            <i *ngIf=\"treeStatus === 'expanded' || treeStatus === 'disabled'\" class=\"icon datatable-icon-down\"></i>\n          </span>\n        </button>\n        <ng-template\n          *ngIf=\"column.treeToggleTemplate\"\n          [ngTemplateOutlet]=\"column.treeToggleTemplate\"\n          [ngTemplateOutletContext]=\"{ cellContext: cellContext }\"\n        >\n        </ng-template>\n      </ng-container>\n\n      <span *ngIf=\"!column.cellTemplate\" [title]=\"sanitizedValue\" [innerHTML]=\"value\"> </span>\n      <ng-template\n        #cellTemplate\n        *ngIf=\"column.cellTemplate\"\n        [ngTemplateOutlet]=\"column.cellTemplate\"\n        [ngTemplateOutletContext]=\"cellContext\"\n      >\n      </ng-template>\n    </div>\n  `\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { displayCheck: [{\n                type: Input\n            }], group: [{\n                type: Input\n            }], rowHeight: [{\n                type: Input\n            }], isSelected: [{\n                type: Input\n            }], expanded: [{\n                type: Input\n            }], rowIndex: [{\n                type: Input\n            }], column: [{\n                type: Input\n            }], row: [{\n                type: Input\n            }], sorts: [{\n                type: Input\n            }], treeStatus: [{\n                type: Input\n            }], activate: [{\n                type: Output\n            }], treeAction: [{\n                type: Output\n            }], cellTemplate: [{\n                type: ViewChild,\n                args: ['cellTemplate', { read: ViewContainerRef, static: true }]\n            }], columnCssClasses: [{\n                type: HostBinding,\n                args: ['class']\n            }], width: [{\n                type: HostBinding,\n                args: ['style.width.px']\n            }], minWidth: [{\n                type: HostBinding,\n                args: ['style.minWidth.px']\n            }], maxWidth: [{\n                type: HostBinding,\n                args: ['style.maxWidth.px']\n            }], height: [{\n                type: HostBinding,\n                args: ['style.height']\n            }], onFocus: [{\n                type: HostListener,\n                args: ['focus']\n            }], onBlur: [{\n                type: HostListener,\n                args: ['blur']\n            }], onClick: [{\n                type: HostListener,\n                args: ['click', ['$event']]\n            }], onDblClick: [{\n                type: HostListener,\n                args: ['dblclick', ['$event']]\n            }], onKeyDown: [{\n                type: HostListener,\n                args: ['keydown', ['$event']]\n            }] } });\n\nclass DataTableBodyRowComponent {\n    constructor(differs, scrollbarHelper, cd, element) {\n        this.differs = differs;\n        this.scrollbarHelper = scrollbarHelper;\n        this.cd = cd;\n        this.treeStatus = 'collapsed';\n        this.activate = new EventEmitter();\n        this.treeAction = new EventEmitter();\n        this._groupStyles = {\n            left: {},\n            center: {},\n            right: {}\n        };\n        this._element = element.nativeElement;\n        this._rowDiffer = differs.find({}).create();\n    }\n    set columns(val) {\n        this._columns = val;\n        this.recalculateColumns(val);\n        this.buildStylesByGroup();\n    }\n    get columns() {\n        return this._columns;\n    }\n    set innerWidth(val) {\n        if (this._columns) {\n            const colByPin = columnsByPin(this._columns);\n            this._columnGroupWidths = columnGroupWidths(colByPin, this._columns);\n        }\n        this._innerWidth = val;\n        this.recalculateColumns();\n        this.buildStylesByGroup();\n    }\n    get innerWidth() {\n        return this._innerWidth;\n    }\n    set offsetX(val) {\n        this._offsetX = val;\n        this.buildStylesByGroup();\n    }\n    get offsetX() {\n        return this._offsetX;\n    }\n    get cssClass() {\n        let cls = 'datatable-body-row';\n        if (this.isSelected) {\n            cls += ' active';\n        }\n        if (this.rowIndex % 2 !== 0) {\n            cls += ' datatable-row-odd';\n        }\n        if (this.rowIndex % 2 === 0) {\n            cls += ' datatable-row-even';\n        }\n        if (this.rowClass) {\n            const res = this.rowClass(this.row);\n            if (typeof res === 'string') {\n                cls += ` ${res}`;\n            }\n            else if (typeof res === 'object') {\n                const keys = Object.keys(res);\n                for (const k of keys) {\n                    if (res[k] === true) {\n                        cls += ` ${k}`;\n                    }\n                }\n            }\n        }\n        return cls;\n    }\n    get columnsTotalWidths() {\n        return this._columnGroupWidths.total;\n    }\n    ngDoCheck() {\n        if (this._rowDiffer.diff(this.row)) {\n            this.cd.markForCheck();\n        }\n    }\n    trackByGroups(index, colGroup) {\n        return colGroup.type;\n    }\n    columnTrackingFn(index, column) {\n        return column.$$id;\n    }\n    buildStylesByGroup() {\n        this._groupStyles.left = this.calcStylesByGroup('left');\n        this._groupStyles.center = this.calcStylesByGroup('center');\n        this._groupStyles.right = this.calcStylesByGroup('right');\n        this.cd.markForCheck();\n    }\n    calcStylesByGroup(group) {\n        const widths = this._columnGroupWidths;\n        const offsetX = this.offsetX;\n        const styles = {\n            width: `${widths[group]}px`\n        };\n        if (group === 'left') {\n            translateXY(styles, offsetX, 0);\n        }\n        else if (group === 'right') {\n            const bodyWidth = parseInt(this.innerWidth + '', 0);\n            const totalDiff = widths.total - bodyWidth;\n            const offsetDiff = totalDiff - offsetX;\n            const offset = (offsetDiff + this.scrollbarHelper.width) * -1;\n            translateXY(styles, offset, 0);\n        }\n        return styles;\n    }\n    onActivate(event, index) {\n        event.cellIndex = index;\n        event.rowElement = this._element;\n        this.activate.emit(event);\n    }\n    onKeyDown(event) {\n        const keyCode = event.keyCode;\n        const isTargetRow = event.target === this._element;\n        const isAction = keyCode === Keys.return ||\n            keyCode === Keys.down ||\n            keyCode === Keys.up ||\n            keyCode === Keys.left ||\n            keyCode === Keys.right;\n        if (isAction && isTargetRow) {\n            event.preventDefault();\n            event.stopPropagation();\n            this.activate.emit({\n                type: 'keydown',\n                event,\n                row: this.row,\n                rowElement: this._element\n            });\n        }\n    }\n    onMouseenter(event) {\n        this.activate.emit({\n            type: 'mouseenter',\n            event,\n            row: this.row,\n            rowElement: this._element\n        });\n    }\n    recalculateColumns(val = this.columns) {\n        this._columns = val;\n        const colsByPin = columnsByPin(this._columns);\n        this._columnsByPin = columnsByPinArr(this._columns);\n        this._columnGroupWidths = columnGroupWidths(colsByPin, this._columns);\n    }\n    onTreeAction() {\n        this.treeAction.emit();\n    }\n}\nDataTableBodyRowComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableBodyRowComponent, deps: [{ token: i0.KeyValueDiffers }, { token: ScrollbarHelper, skipSelf: true }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }], target: i0.ɵɵFactoryTarget.Component });\nDataTableBodyRowComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DataTableBodyRowComponent, selector: \"datatable-body-row\", inputs: { columns: \"columns\", innerWidth: \"innerWidth\", expanded: \"expanded\", rowClass: \"rowClass\", row: \"row\", group: \"group\", isSelected: \"isSelected\", rowIndex: \"rowIndex\", displayCheck: \"displayCheck\", treeStatus: \"treeStatus\", offsetX: \"offsetX\", rowHeight: \"rowHeight\" }, outputs: { activate: \"activate\", treeAction: \"treeAction\" }, host: { listeners: { \"keydown\": \"onKeyDown($event)\", \"mouseenter\": \"onMouseenter($event)\" }, properties: { \"class\": \"this.cssClass\", \"style.height.px\": \"this.rowHeight\", \"style.width.px\": \"this.columnsTotalWidths\" } }, ngImport: i0, template: `\n    <div\n      *ngFor=\"let colGroup of _columnsByPin; let i = index; trackBy: trackByGroups\"\n      class=\"datatable-row-{{ colGroup.type }} datatable-row-group\"\n      [ngStyle]=\"_groupStyles[colGroup.type]\"\n    >\n      <datatable-body-cell\n        role=\"cell\"\n        *ngFor=\"let column of colGroup.columns; let ii = index; trackBy: columnTrackingFn\"\n        tabindex=\"-1\"\n        [row]=\"row\"\n        [group]=\"group\"\n        [expanded]=\"expanded\"\n        [isSelected]=\"isSelected\"\n        [rowIndex]=\"rowIndex\"\n        [column]=\"column\"\n        [rowHeight]=\"rowHeight\"\n        [displayCheck]=\"displayCheck\"\n        [treeStatus]=\"treeStatus\"\n        (activate)=\"onActivate($event, ii)\"\n        (treeAction)=\"onTreeAction()\"\n      >\n      </datatable-body-cell>\n    </div>\n  `, isInline: true, components: [{ type: DataTableBodyCellComponent, selector: \"datatable-body-cell\", inputs: [\"displayCheck\", \"group\", \"rowHeight\", \"isSelected\", \"expanded\", \"rowIndex\", \"column\", \"row\", \"sorts\", \"treeStatus\"], outputs: [\"activate\", \"treeAction\"] }], directives: [{ type: i1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i1.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableBodyRowComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'datatable-body-row',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: `\n    <div\n      *ngFor=\"let colGroup of _columnsByPin; let i = index; trackBy: trackByGroups\"\n      class=\"datatable-row-{{ colGroup.type }} datatable-row-group\"\n      [ngStyle]=\"_groupStyles[colGroup.type]\"\n    >\n      <datatable-body-cell\n        role=\"cell\"\n        *ngFor=\"let column of colGroup.columns; let ii = index; trackBy: columnTrackingFn\"\n        tabindex=\"-1\"\n        [row]=\"row\"\n        [group]=\"group\"\n        [expanded]=\"expanded\"\n        [isSelected]=\"isSelected\"\n        [rowIndex]=\"rowIndex\"\n        [column]=\"column\"\n        [rowHeight]=\"rowHeight\"\n        [displayCheck]=\"displayCheck\"\n        [treeStatus]=\"treeStatus\"\n        (activate)=\"onActivate($event, ii)\"\n        (treeAction)=\"onTreeAction()\"\n      >\n      </datatable-body-cell>\n    </div>\n  `\n                }]\n        }], ctorParameters: function () { return [{ type: i0.KeyValueDiffers }, { type: ScrollbarHelper, decorators: [{\n                    type: SkipSelf\n                }] }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }]; }, propDecorators: { columns: [{\n                type: Input\n            }], innerWidth: [{\n                type: Input\n            }], expanded: [{\n                type: Input\n            }], rowClass: [{\n                type: Input\n            }], row: [{\n                type: Input\n            }], group: [{\n                type: Input\n            }], isSelected: [{\n                type: Input\n            }], rowIndex: [{\n                type: Input\n            }], displayCheck: [{\n                type: Input\n            }], treeStatus: [{\n                type: Input\n            }], offsetX: [{\n                type: Input\n            }], cssClass: [{\n                type: HostBinding,\n                args: ['class']\n            }], rowHeight: [{\n                type: HostBinding,\n                args: ['style.height.px']\n            }, {\n                type: Input\n            }], columnsTotalWidths: [{\n                type: HostBinding,\n                args: ['style.width.px']\n            }], activate: [{\n                type: Output\n            }], treeAction: [{\n                type: Output\n            }], onKeyDown: [{\n                type: HostListener,\n                args: ['keydown', ['$event']]\n            }], onMouseenter: [{\n                type: HostListener,\n                args: ['mouseenter', ['$event']]\n            }] } });\n\nfunction defaultSumFunc(cells) {\n    const cellsWithValues = cells.filter(cell => !!cell);\n    if (!cellsWithValues.length) {\n        return null;\n    }\n    if (cellsWithValues.some(cell => typeof cell !== 'number')) {\n        return null;\n    }\n    return cellsWithValues.reduce((res, cell) => res + cell);\n}\nfunction noopSumFunc(cells) {\n    return null;\n}\nclass DataTableSummaryRowComponent {\n    constructor() {\n        this.summaryRow = {};\n    }\n    ngOnChanges() {\n        if (!this.columns || !this.rows) {\n            return;\n        }\n        this.updateInternalColumns();\n        this.updateValues();\n    }\n    updateInternalColumns() {\n        this._internalColumns = this.columns.map(col => ({\n            ...col,\n            cellTemplate: col.summaryTemplate\n        }));\n    }\n    updateValues() {\n        this.summaryRow = {};\n        this.columns\n            .filter(col => !col.summaryTemplate)\n            .forEach(col => {\n            const cellsFromSingleColumn = this.rows.map(row => row[col.prop]);\n            const sumFunc = this.getSummaryFunction(col);\n            this.summaryRow[col.prop] = col.pipe\n                ? col.pipe.transform(sumFunc(cellsFromSingleColumn))\n                : sumFunc(cellsFromSingleColumn);\n        });\n    }\n    getSummaryFunction(column) {\n        if (column.summaryFunc === undefined) {\n            return defaultSumFunc;\n        }\n        else if (column.summaryFunc === null) {\n            return noopSumFunc;\n        }\n        else {\n            return column.summaryFunc;\n        }\n    }\n}\nDataTableSummaryRowComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableSummaryRowComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nDataTableSummaryRowComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DataTableSummaryRowComponent, selector: \"datatable-summary-row\", inputs: { rows: \"rows\", columns: \"columns\", rowHeight: \"rowHeight\", offsetX: \"offsetX\", innerWidth: \"innerWidth\" }, host: { classAttribute: \"datatable-summary-row\" }, usesOnChanges: true, ngImport: i0, template: `\n    <datatable-body-row\n      *ngIf=\"summaryRow && _internalColumns\"\n      tabindex=\"-1\"\n      [innerWidth]=\"innerWidth\"\n      [offsetX]=\"offsetX\"\n      [columns]=\"_internalColumns\"\n      [rowHeight]=\"rowHeight\"\n      [row]=\"summaryRow\"\n      [rowIndex]=\"-1\"\n    >\n    </datatable-body-row>\n  `, isInline: true, components: [{ type: DataTableBodyRowComponent, selector: \"datatable-body-row\", inputs: [\"columns\", \"innerWidth\", \"expanded\", \"rowClass\", \"row\", \"group\", \"isSelected\", \"rowIndex\", \"displayCheck\", \"treeStatus\", \"offsetX\", \"rowHeight\"], outputs: [\"activate\", \"treeAction\"] }], directives: [{ type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableSummaryRowComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'datatable-summary-row',\n                    template: `\n    <datatable-body-row\n      *ngIf=\"summaryRow && _internalColumns\"\n      tabindex=\"-1\"\n      [innerWidth]=\"innerWidth\"\n      [offsetX]=\"offsetX\"\n      [columns]=\"_internalColumns\"\n      [rowHeight]=\"rowHeight\"\n      [row]=\"summaryRow\"\n      [rowIndex]=\"-1\"\n    >\n    </datatable-body-row>\n  `,\n                    host: {\n                        class: 'datatable-summary-row'\n                    }\n                }]\n        }], propDecorators: { rows: [{\n                type: Input\n            }], columns: [{\n                type: Input\n            }], rowHeight: [{\n                type: Input\n            }], offsetX: [{\n                type: Input\n            }], innerWidth: [{\n                type: Input\n            }] } });\n\nclass DataTableRowWrapperComponent {\n    constructor(cd, differs) {\n        this.cd = cd;\n        this.differs = differs;\n        this.rowContextmenu = new EventEmitter(false);\n        this._expanded = false;\n        this.groupContext = {\n            group: this.row,\n            expanded: this.expanded,\n            rowIndex: this.rowIndex\n        };\n        this.rowContext = {\n            row: this.row,\n            expanded: this.expanded,\n            rowIndex: this.rowIndex\n        };\n        this.rowDiffer = differs.find({}).create();\n    }\n    set rowIndex(val) {\n        this._rowIndex = val;\n        this.rowContext.rowIndex = val;\n        this.groupContext.rowIndex = val;\n        this.cd.markForCheck();\n    }\n    get rowIndex() {\n        return this._rowIndex;\n    }\n    set expanded(val) {\n        this._expanded = val;\n        this.groupContext.expanded = val;\n        this.rowContext.expanded = val;\n        this.cd.markForCheck();\n    }\n    get expanded() {\n        return this._expanded;\n    }\n    ngDoCheck() {\n        if (this.rowDiffer.diff(this.row)) {\n            this.rowContext.row = this.row;\n            this.groupContext.group = this.row;\n            this.cd.markForCheck();\n        }\n    }\n    onContextmenu($event) {\n        this.rowContextmenu.emit({ event: $event, row: this.row });\n    }\n    getGroupHeaderStyle() {\n        const styles = {};\n        styles['transform'] = 'translate3d(' + this.offsetX + 'px, 0px, 0px)';\n        styles['backface-visibility'] = 'hidden';\n        styles['width'] = this.innerWidth;\n        return styles;\n    }\n}\nDataTableRowWrapperComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableRowWrapperComponent, deps: [{ token: i0.ChangeDetectorRef }, { token: i0.KeyValueDiffers }], target: i0.ɵɵFactoryTarget.Component });\nDataTableRowWrapperComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DataTableRowWrapperComponent, selector: \"datatable-row-wrapper\", inputs: { innerWidth: \"innerWidth\", rowDetail: \"rowDetail\", groupHeader: \"groupHeader\", offsetX: \"offsetX\", detailRowHeight: \"detailRowHeight\", row: \"row\", groupedRows: \"groupedRows\", rowIndex: \"rowIndex\", expanded: \"expanded\" }, outputs: { rowContextmenu: \"rowContextmenu\" }, host: { listeners: { \"contextmenu\": \"onContextmenu($event)\" }, classAttribute: \"datatable-row-wrapper\" }, ngImport: i0, template: `\n    <div *ngIf=\"groupHeader && groupHeader.template\" class=\"datatable-group-header\" [ngStyle]=\"getGroupHeaderStyle()\">\n      <ng-template\n        *ngIf=\"groupHeader && groupHeader.template\"\n        [ngTemplateOutlet]=\"groupHeader.template\"\n        [ngTemplateOutletContext]=\"groupContext\"\n      >\n      </ng-template>\n    </div>\n    <ng-content *ngIf=\"(groupHeader && groupHeader.template && expanded) || !groupHeader || !groupHeader.template\">\n    </ng-content>\n    <div\n      *ngIf=\"rowDetail && rowDetail.template && expanded\"\n      [style.height.px]=\"detailRowHeight\"\n      class=\"datatable-row-detail\"\n    >\n      <ng-template\n        *ngIf=\"rowDetail && rowDetail.template\"\n        [ngTemplateOutlet]=\"rowDetail.template\"\n        [ngTemplateOutletContext]=\"rowContext\"\n      >\n      </ng-template>\n    </div>\n  `, isInline: true, directives: [{ type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i1.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { type: i1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableRowWrapperComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'datatable-row-wrapper',\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    template: `\n    <div *ngIf=\"groupHeader && groupHeader.template\" class=\"datatable-group-header\" [ngStyle]=\"getGroupHeaderStyle()\">\n      <ng-template\n        *ngIf=\"groupHeader && groupHeader.template\"\n        [ngTemplateOutlet]=\"groupHeader.template\"\n        [ngTemplateOutletContext]=\"groupContext\"\n      >\n      </ng-template>\n    </div>\n    <ng-content *ngIf=\"(groupHeader && groupHeader.template && expanded) || !groupHeader || !groupHeader.template\">\n    </ng-content>\n    <div\n      *ngIf=\"rowDetail && rowDetail.template && expanded\"\n      [style.height.px]=\"detailRowHeight\"\n      class=\"datatable-row-detail\"\n    >\n      <ng-template\n        *ngIf=\"rowDetail && rowDetail.template\"\n        [ngTemplateOutlet]=\"rowDetail.template\"\n        [ngTemplateOutletContext]=\"rowContext\"\n      >\n      </ng-template>\n    </div>\n  `,\n                    host: {\n                        class: 'datatable-row-wrapper'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }, { type: i0.KeyValueDiffers }]; }, propDecorators: { innerWidth: [{\n                type: Input\n            }], rowDetail: [{\n                type: Input\n            }], groupHeader: [{\n                type: Input\n            }], offsetX: [{\n                type: Input\n            }], detailRowHeight: [{\n                type: Input\n            }], row: [{\n                type: Input\n            }], groupedRows: [{\n                type: Input\n            }], rowContextmenu: [{\n                type: Output\n            }], rowIndex: [{\n                type: Input\n            }], expanded: [{\n                type: Input\n            }], onContextmenu: [{\n                type: HostListener,\n                args: ['contextmenu', ['$event']]\n            }] } });\n\nclass DataTableBodyComponent {\n    /**\n     * Creates an instance of DataTableBodyComponent.\n     */\n    constructor(cd) {\n        this.cd = cd;\n        this.selected = [];\n        this.scroll = new EventEmitter();\n        this.page = new EventEmitter();\n        this.activate = new EventEmitter();\n        this.select = new EventEmitter();\n        this.detailToggle = new EventEmitter();\n        this.rowContextmenu = new EventEmitter(false);\n        this.treeAction = new EventEmitter();\n        this.rowHeightsCache = new RowHeightCache();\n        this.temp = [];\n        this.offsetY = 0;\n        this.indexes = {};\n        this.rowIndexes = new WeakMap();\n        this.rowExpansions = [];\n        /**\n         * Get the height of the detail row.\n         */\n        this.getDetailRowHeight = (row, index) => {\n            if (!this.rowDetail) {\n                return 0;\n            }\n            const rowHeight = this.rowDetail.rowHeight;\n            return typeof rowHeight === 'function' ? rowHeight(row, index) : rowHeight;\n        };\n        // declare fn here so we can get access to the `this` property\n        this.rowTrackingFn = (index, row) => {\n            const idx = this.getRowIndex(row);\n            if (this.trackByProp) {\n                return row[this.trackByProp];\n            }\n            else {\n                return idx;\n            }\n        };\n    }\n    set pageSize(val) {\n        this._pageSize = val;\n        this.recalcLayout();\n    }\n    get pageSize() {\n        return this._pageSize;\n    }\n    set rows(val) {\n        this._rows = val;\n        this.recalcLayout();\n    }\n    get rows() {\n        return this._rows;\n    }\n    set columns(val) {\n        this._columns = val;\n        const colsByPin = columnsByPin(val);\n        this.columnGroupWidths = columnGroupWidths(colsByPin, val);\n    }\n    get columns() {\n        return this._columns;\n    }\n    set offset(val) {\n        this._offset = val;\n        if (!this.scrollbarV || (this.scrollbarV && !this.virtualization))\n            this.recalcLayout();\n    }\n    get offset() {\n        return this._offset;\n    }\n    set rowCount(val) {\n        this._rowCount = val;\n        this.recalcLayout();\n    }\n    get rowCount() {\n        return this._rowCount;\n    }\n    get bodyWidth() {\n        if (this.scrollbarH) {\n            return this.innerWidth + 'px';\n        }\n        else {\n            return '100%';\n        }\n    }\n    set bodyHeight(val) {\n        if (this.scrollbarV) {\n            this._bodyHeight = val + 'px';\n        }\n        else {\n            this._bodyHeight = 'auto';\n        }\n        this.recalcLayout();\n    }\n    get bodyHeight() {\n        return this._bodyHeight;\n    }\n    /**\n     * Returns if selection is enabled.\n     */\n    get selectEnabled() {\n        return !!this.selectionType;\n    }\n    /**\n     * Property that would calculate the height of scroll bar\n     * based on the row heights cache for virtual scroll and virtualization. Other scenarios\n     * calculate scroll height automatically (as height will be undefined).\n     */\n    get scrollHeight() {\n        if (this.scrollbarV && this.virtualization && this.rowCount) {\n            return this.rowHeightsCache.query(this.rowCount - 1);\n        }\n        // avoid TS7030: Not all code paths return a value.\n        return undefined;\n    }\n    /**\n     * Called after the constructor, initializing input properties\n     */\n    ngOnInit() {\n        if (this.rowDetail) {\n            this.listener = this.rowDetail.toggle.subscribe(({ type, value }) => {\n                if (type === 'row') {\n                    this.toggleRowExpansion(value);\n                }\n                if (type === 'all') {\n                    this.toggleAllRows(value);\n                }\n                // Refresh rows after toggle\n                // Fixes #883\n                this.updateIndexes();\n                this.updateRows();\n                this.cd.markForCheck();\n            });\n        }\n        if (this.groupHeader) {\n            this.listener = this.groupHeader.toggle.subscribe(({ type, value }) => {\n                if (type === 'group') {\n                    this.toggleRowExpansion(value);\n                }\n                if (type === 'all') {\n                    this.toggleAllRows(value);\n                }\n                // Refresh rows after toggle\n                // Fixes #883\n                this.updateIndexes();\n                this.updateRows();\n                this.cd.markForCheck();\n            });\n        }\n    }\n    /**\n     * Called once, before the instance is destroyed.\n     */\n    ngOnDestroy() {\n        if (this.rowDetail || this.groupHeader) {\n            this.listener.unsubscribe();\n        }\n    }\n    /**\n     * Updates the Y offset given a new offset.\n     */\n    updateOffsetY(offset) {\n        // scroller is missing on empty table\n        if (!this.scroller) {\n            return;\n        }\n        if (this.scrollbarV && this.virtualization && offset) {\n            // First get the row Index that we need to move to.\n            const rowIndex = this.pageSize * offset;\n            offset = this.rowHeightsCache.query(rowIndex - 1);\n        }\n        else if (this.scrollbarV && !this.virtualization) {\n            offset = 0;\n        }\n        this.scroller.setOffset(offset || 0);\n    }\n    /**\n     * Body was scrolled, this is mainly useful for\n     * when a user is server-side pagination via virtual scroll.\n     */\n    onBodyScroll(event) {\n        const scrollYPos = event.scrollYPos;\n        const scrollXPos = event.scrollXPos;\n        // if scroll change, trigger update\n        // this is mainly used for header cell positions\n        if (this.offsetY !== scrollYPos || this.offsetX !== scrollXPos) {\n            this.scroll.emit({\n                offsetY: scrollYPos,\n                offsetX: scrollXPos\n            });\n        }\n        this.offsetY = scrollYPos;\n        this.offsetX = scrollXPos;\n        this.updateIndexes();\n        this.updatePage(event.direction);\n        this.updateRows();\n    }\n    /**\n     * Updates the page given a direction.\n     */\n    updatePage(direction) {\n        let offset = this.indexes.first / this.pageSize;\n        if (direction === 'up') {\n            offset = Math.ceil(offset);\n        }\n        else if (direction === 'down') {\n            offset = Math.floor(offset);\n        }\n        if (direction !== undefined && !isNaN(offset)) {\n            this.page.emit({ offset });\n        }\n    }\n    /**\n     * Updates the rows in the view port\n     */\n    updateRows() {\n        const { first, last } = this.indexes;\n        let rowIndex = first;\n        let idx = 0;\n        const temp = [];\n        // if grouprowsby has been specified treat row paging\n        // parameters as group paging parameters ie if limit 10 has been\n        // specified treat it as 10 groups rather than 10 rows\n        if (this.groupedRows) {\n            let maxRowsPerGroup = 3;\n            // if there is only one group set the maximum number of\n            // rows per group the same as the total number of rows\n            if (this.groupedRows.length === 1) {\n                maxRowsPerGroup = this.groupedRows[0].value.length;\n            }\n            while (rowIndex < last && rowIndex < this.groupedRows.length) {\n                // Add the groups into this page\n                const group = this.groupedRows[rowIndex];\n                this.rowIndexes.set(group, rowIndex);\n                if (group.value) {\n                    // add indexes for each group item\n                    group.value.forEach((g, i) => {\n                        const _idx = `${rowIndex}-${i}`;\n                        this.rowIndexes.set(g, _idx);\n                    });\n                }\n                temp[idx] = group;\n                idx++;\n                // Group index in this context\n                rowIndex++;\n            }\n        }\n        else {\n            while (rowIndex < last && rowIndex < this.rowCount) {\n                const row = this.rows[rowIndex];\n                if (row) {\n                    // add indexes for each row\n                    this.rowIndexes.set(row, rowIndex);\n                    temp[idx] = row;\n                }\n                idx++;\n                rowIndex++;\n            }\n        }\n        this.temp = temp;\n    }\n    /**\n     * Get the row height\n     */\n    getRowHeight(row) {\n        // if its a function return it\n        if (typeof this.rowHeight === 'function') {\n            return this.rowHeight(row);\n        }\n        return this.rowHeight;\n    }\n    /**\n     * @param group the group with all rows\n     */\n    getGroupHeight(group) {\n        let rowHeight = 0;\n        if (group.value) {\n            for (let index = 0; index < group.value.length; index++) {\n                rowHeight += this.getRowAndDetailHeight(group.value[index]);\n            }\n        }\n        return rowHeight;\n    }\n    /**\n     * Calculate row height based on the expanded state of the row.\n     */\n    getRowAndDetailHeight(row) {\n        let rowHeight = this.getRowHeight(row);\n        const expanded = this.getRowExpanded(row);\n        // Adding detail row height if its expanded.\n        if (expanded) {\n            rowHeight += this.getDetailRowHeight(row);\n        }\n        return rowHeight;\n    }\n    /**\n     * Calculates the styles for the row so that the rows can be moved in 2D space\n     * during virtual scroll inside the DOM.   In the below case the Y position is\n     * manipulated.   As an example, if the height of row 0 is 30 px and row 1 is\n     * 100 px then following styles are generated:\n     *\n     * transform: translate3d(0px, 0px, 0px);    ->  row0\n     * transform: translate3d(0px, 30px, 0px);   ->  row1\n     * transform: translate3d(0px, 130px, 0px);  ->  row2\n     *\n     * Row heights have to be calculated based on the row heights cache as we wont\n     * be able to determine which row is of what height before hand.  In the above\n     * case the positionY of the translate3d for row2 would be the sum of all the\n     * heights of the rows before it (i.e. row0 and row1).\n     *\n     * @param rows the row that needs to be placed in the 2D space.\n     * @returns the CSS3 style to be applied\n     *\n     * @memberOf DataTableBodyComponent\n     */\n    getRowsStyles(rows) {\n        const styles = {};\n        // only add styles for the group if there is a group\n        if (this.groupedRows) {\n            styles.width = this.columnGroupWidths.total;\n        }\n        if (this.scrollbarV && this.virtualization) {\n            let idx = 0;\n            if (this.groupedRows) {\n                // Get the latest row rowindex in a group\n                const row = rows[rows.length - 1];\n                idx = row ? this.getRowIndex(row) : 0;\n            }\n            else {\n                idx = this.getRowIndex(rows);\n            }\n            // const pos = idx * rowHeight;\n            // The position of this row would be the sum of all row heights\n            // until the previous row position.\n            const pos = this.rowHeightsCache.query(idx - 1);\n            translateXY(styles, 0, pos);\n        }\n        return styles;\n    }\n    /**\n     * Calculate bottom summary row offset for scrollbar mode.\n     * For more information about cache and offset calculation\n     * see description for `getRowsStyles` method\n     *\n     * @returns the CSS3 style to be applied\n     *\n     * @memberOf DataTableBodyComponent\n     */\n    getBottomSummaryRowStyles() {\n        if (!this.scrollbarV || !this.rows || !this.rows.length) {\n            return null;\n        }\n        const styles = { position: 'absolute' };\n        const pos = this.rowHeightsCache.query(this.rows.length - 1);\n        translateXY(styles, 0, pos);\n        return styles;\n    }\n    /**\n     * Hides the loading indicator\n     */\n    hideIndicator() {\n        setTimeout(() => (this.loadingIndicator = false), 500);\n    }\n    /**\n     * Updates the index of the rows in the viewport\n     */\n    updateIndexes() {\n        let first = 0;\n        let last = 0;\n        if (this.scrollbarV) {\n            if (this.virtualization) {\n                // Calculation of the first and last indexes will be based on where the\n                // scrollY position would be at.  The last index would be the one\n                // that shows up inside the view port the last.\n                const height = parseInt(this.bodyHeight, 0);\n                first = this.rowHeightsCache.getRowIndex(this.offsetY);\n                last = this.rowHeightsCache.getRowIndex(height + this.offsetY) + 1;\n            }\n            else {\n                // If virtual rows are not needed\n                // We render all in one go\n                first = 0;\n                last = this.rowCount;\n            }\n        }\n        else {\n            // The server is handling paging and will pass an array that begins with the\n            // element at a specified offset.  first should always be 0 with external paging.\n            if (!this.externalPaging) {\n                first = Math.max(this.offset * this.pageSize, 0);\n            }\n            last = Math.min(first + this.pageSize, this.rowCount);\n        }\n        this.indexes = { first, last };\n    }\n    /**\n     * Refreshes the full Row Height cache.  Should be used\n     * when the entire row array state has changed.\n     */\n    refreshRowHeightCache() {\n        if (!this.scrollbarV || (this.scrollbarV && !this.virtualization)) {\n            return;\n        }\n        // clear the previous row height cache if already present.\n        // this is useful during sorts, filters where the state of the\n        // rows array is changed.\n        this.rowHeightsCache.clearCache();\n        // Initialize the tree only if there are rows inside the tree.\n        if (this.rows && this.rows.length) {\n            const rowExpansions = new Set();\n            for (const row of this.rows) {\n                if (this.getRowExpanded(row)) {\n                    rowExpansions.add(row);\n                }\n            }\n            this.rowHeightsCache.initCache({\n                rows: this.rows,\n                rowHeight: this.rowHeight,\n                detailRowHeight: this.getDetailRowHeight,\n                externalVirtual: this.scrollbarV && this.externalPaging,\n                rowCount: this.rowCount,\n                rowIndexes: this.rowIndexes,\n                rowExpansions\n            });\n        }\n    }\n    /**\n     * Gets the index for the view port\n     */\n    getAdjustedViewPortIndex() {\n        // Capture the row index of the first row that is visible on the viewport.\n        // If the scroll bar is just below the row which is highlighted then make that as the\n        // first index.\n        const viewPortFirstRowIndex = this.indexes.first;\n        if (this.scrollbarV && this.virtualization) {\n            const offsetScroll = this.rowHeightsCache.query(viewPortFirstRowIndex - 1);\n            return offsetScroll <= this.offsetY ? viewPortFirstRowIndex - 1 : viewPortFirstRowIndex;\n        }\n        return viewPortFirstRowIndex;\n    }\n    /**\n     * Toggle the Expansion of the row i.e. if the row is expanded then it will\n     * collapse and vice versa.   Note that the expanded status is stored as\n     * a part of the row object itself as we have to preserve the expanded row\n     * status in case of sorting and filtering of the row set.\n     */\n    toggleRowExpansion(row) {\n        // Capture the row index of the first row that is visible on the viewport.\n        const viewPortFirstRowIndex = this.getAdjustedViewPortIndex();\n        const rowExpandedIdx = this.getRowExpandedIdx(row, this.rowExpansions);\n        const expanded = rowExpandedIdx > -1;\n        // If the detailRowHeight is auto --> only in case of non-virtualized scroll\n        if (this.scrollbarV && this.virtualization) {\n            const detailRowHeight = this.getDetailRowHeight(row) * (expanded ? -1 : 1);\n            // const idx = this.rowIndexes.get(row) || 0;\n            const idx = this.getRowIndex(row);\n            this.rowHeightsCache.update(idx, detailRowHeight);\n        }\n        // Update the toggled row and update thive nevere heights in the cache.\n        if (expanded) {\n            this.rowExpansions.splice(rowExpandedIdx, 1);\n        }\n        else {\n            this.rowExpansions.push(row);\n        }\n        this.detailToggle.emit({\n            rows: [row],\n            currentIndex: viewPortFirstRowIndex\n        });\n    }\n    /**\n     * Expand/Collapse all the rows no matter what their state is.\n     */\n    toggleAllRows(expanded) {\n        // clear prev expansions\n        this.rowExpansions = [];\n        // Capture the row index of the first row that is visible on the viewport.\n        const viewPortFirstRowIndex = this.getAdjustedViewPortIndex();\n        if (expanded) {\n            for (const row of this.rows) {\n                this.rowExpansions.push(row);\n            }\n        }\n        if (this.scrollbarV) {\n            // Refresh the full row heights cache since every row was affected.\n            this.recalcLayout();\n        }\n        // Emit all rows that have been expanded.\n        this.detailToggle.emit({\n            rows: this.rows,\n            currentIndex: viewPortFirstRowIndex\n        });\n    }\n    /**\n     * Recalculates the table\n     */\n    recalcLayout() {\n        this.refreshRowHeightCache();\n        this.updateIndexes();\n        this.updateRows();\n    }\n    /**\n     * Tracks the column\n     */\n    columnTrackingFn(index, column) {\n        return column.$$id;\n    }\n    /**\n     * Gets the row pinning group styles\n     */\n    stylesByGroup(group) {\n        const widths = this.columnGroupWidths;\n        const offsetX = this.offsetX;\n        const styles = {\n            width: `${widths[group]}px`\n        };\n        if (group === 'left') {\n            translateXY(styles, offsetX, 0);\n        }\n        else if (group === 'right') {\n            const bodyWidth = parseInt(this.innerWidth + '', 0);\n            const totalDiff = widths.total - bodyWidth;\n            const offsetDiff = totalDiff - offsetX;\n            const offset = offsetDiff * -1;\n            translateXY(styles, offset, 0);\n        }\n        return styles;\n    }\n    /**\n     * Returns if the row was expanded and set default row expansion when row expansion is empty\n     */\n    getRowExpanded(row) {\n        if (this.rowExpansions.length === 0 && this.groupExpansionDefault) {\n            for (const group of this.groupedRows) {\n                this.rowExpansions.push(group);\n            }\n        }\n        return this.getRowExpandedIdx(row, this.rowExpansions) > -1;\n    }\n    getRowExpandedIdx(row, expanded) {\n        if (!expanded || !expanded.length)\n            return -1;\n        const rowId = this.rowIdentity(row);\n        return expanded.findIndex(r => {\n            const id = this.rowIdentity(r);\n            return id === rowId;\n        });\n    }\n    /**\n     * Gets the row index given a row\n     */\n    getRowIndex(row) {\n        return this.rowIndexes.get(row) || 0;\n    }\n    onTreeAction(row) {\n        this.treeAction.emit({ row });\n    }\n}\nDataTableBodyComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableBodyComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nDataTableBodyComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DataTableBodyComponent, selector: \"datatable-body\", inputs: { scrollbarV: \"scrollbarV\", scrollbarH: \"scrollbarH\", loadingIndicator: \"loadingIndicator\", externalPaging: \"externalPaging\", rowHeight: \"rowHeight\", offsetX: \"offsetX\", emptyMessage: \"emptyMessage\", selectionType: \"selectionType\", selected: \"selected\", rowIdentity: \"rowIdentity\", rowDetail: \"rowDetail\", groupHeader: \"groupHeader\", selectCheck: \"selectCheck\", displayCheck: \"displayCheck\", trackByProp: \"trackByProp\", rowClass: \"rowClass\", groupedRows: \"groupedRows\", groupExpansionDefault: \"groupExpansionDefault\", innerWidth: \"innerWidth\", groupRowsBy: \"groupRowsBy\", virtualization: \"virtualization\", summaryRow: \"summaryRow\", summaryPosition: \"summaryPosition\", summaryHeight: \"summaryHeight\", pageSize: \"pageSize\", rows: \"rows\", columns: \"columns\", offset: \"offset\", rowCount: \"rowCount\", bodyHeight: \"bodyHeight\" }, outputs: { scroll: \"scroll\", page: \"page\", activate: \"activate\", select: \"select\", detailToggle: \"detailToggle\", rowContextmenu: \"rowContextmenu\", treeAction: \"treeAction\" }, host: { properties: { \"style.width\": \"this.bodyWidth\", \"style.height\": \"this.bodyHeight\" }, classAttribute: \"datatable-body\" }, viewQueries: [{ propertyName: \"scroller\", first: true, predicate: ScrollerComponent, descendants: true }], ngImport: i0, template: `\n    <datatable-progress *ngIf=\"loadingIndicator\"> </datatable-progress>\n    <datatable-selection\n      #selector\n      [selected]=\"selected\"\n      [rows]=\"rows\"\n      [selectCheck]=\"selectCheck\"\n      [selectEnabled]=\"selectEnabled\"\n      [selectionType]=\"selectionType\"\n      [rowIdentity]=\"rowIdentity\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n    >\n      <datatable-scroller\n        *ngIf=\"rows?.length\"\n        [scrollbarV]=\"scrollbarV\"\n        [scrollbarH]=\"scrollbarH\"\n        [scrollHeight]=\"scrollHeight\"\n        [scrollWidth]=\"columnGroupWidths?.total\"\n        (scroll)=\"onBodyScroll($event)\"\n      >\n        <datatable-summary-row\n          *ngIf=\"summaryRow && summaryPosition === 'top'\"\n          [rowHeight]=\"summaryHeight\"\n          [offsetX]=\"offsetX\"\n          [innerWidth]=\"innerWidth\"\n          [rows]=\"rows\"\n          [columns]=\"columns\"\n        >\n        </datatable-summary-row>\n        <datatable-row-wrapper\n          [groupedRows]=\"groupedRows\"\n          *ngFor=\"let group of temp; let i = index; trackBy: rowTrackingFn\"\n          [innerWidth]=\"innerWidth\"\n          [ngStyle]=\"getRowsStyles(group)\"\n          [rowDetail]=\"rowDetail\"\n          [groupHeader]=\"groupHeader\"\n          [offsetX]=\"offsetX\"\n          [detailRowHeight]=\"getDetailRowHeight(group && group[i], i)\"\n          [row]=\"group\"\n          [expanded]=\"getRowExpanded(group)\"\n          [rowIndex]=\"getRowIndex(group && group[i])\"\n          (rowContextmenu)=\"rowContextmenu.emit($event)\"\n        >\n          <datatable-body-row\n            role=\"row\"\n            *ngIf=\"!groupedRows; else groupedRowsTemplate\"\n            tabindex=\"-1\"\n            [isSelected]=\"selector.getRowSelected(group)\"\n            [innerWidth]=\"innerWidth\"\n            [offsetX]=\"offsetX\"\n            [columns]=\"columns\"\n            [rowHeight]=\"getRowHeight(group)\"\n            [row]=\"group\"\n            [rowIndex]=\"getRowIndex(group)\"\n            [expanded]=\"getRowExpanded(group)\"\n            [rowClass]=\"rowClass\"\n            [displayCheck]=\"displayCheck\"\n            [treeStatus]=\"group && group.treeStatus\"\n            (treeAction)=\"onTreeAction(group)\"\n            (activate)=\"selector.onActivate($event, indexes.first + i)\"\n          >\n          </datatable-body-row>\n          <ng-template #groupedRowsTemplate>\n            <datatable-body-row\n              role=\"row\"\n              *ngFor=\"let row of group.value; let i = index; trackBy: rowTrackingFn\"\n              tabindex=\"-1\"\n              [isSelected]=\"selector.getRowSelected(row)\"\n              [innerWidth]=\"innerWidth\"\n              [offsetX]=\"offsetX\"\n              [columns]=\"columns\"\n              [rowHeight]=\"getRowHeight(row)\"\n              [row]=\"row\"\n              [group]=\"group.value\"\n              [rowIndex]=\"getRowIndex(row)\"\n              [expanded]=\"getRowExpanded(row)\"\n              [rowClass]=\"rowClass\"\n              (activate)=\"selector.onActivate($event, i)\"\n            >\n            </datatable-body-row>\n          </ng-template>\n        </datatable-row-wrapper>\n        <datatable-summary-row\n          role=\"row\"\n          *ngIf=\"summaryRow && summaryPosition === 'bottom'\"\n          [ngStyle]=\"getBottomSummaryRowStyles()\"\n          [rowHeight]=\"summaryHeight\"\n          [offsetX]=\"offsetX\"\n          [innerWidth]=\"innerWidth\"\n          [rows]=\"rows\"\n          [columns]=\"columns\"\n        >\n        </datatable-summary-row>\n      </datatable-scroller>\n      <div class=\"empty-row\" *ngIf=\"!rows?.length && !loadingIndicator\" [innerHTML]=\"emptyMessage\"></div>\n    </datatable-selection>\n  `, isInline: true, components: [{ type: ProgressBarComponent, selector: \"datatable-progress\" }, { type: DataTableSelectionComponent, selector: \"datatable-selection\", inputs: [\"rows\", \"selected\", \"selectEnabled\", \"selectionType\", \"rowIdentity\", \"selectCheck\"], outputs: [\"activate\", \"select\"] }, { type: ScrollerComponent, selector: \"datatable-scroller\", inputs: [\"scrollbarV\", \"scrollbarH\", \"scrollHeight\", \"scrollWidth\"], outputs: [\"scroll\"] }, { type: DataTableSummaryRowComponent, selector: \"datatable-summary-row\", inputs: [\"rows\", \"columns\", \"rowHeight\", \"offsetX\", \"innerWidth\"] }, { type: DataTableRowWrapperComponent, selector: \"datatable-row-wrapper\", inputs: [\"innerWidth\", \"rowDetail\", \"groupHeader\", \"offsetX\", \"detailRowHeight\", \"row\", \"groupedRows\", \"rowIndex\", \"expanded\"], outputs: [\"rowContextmenu\"] }, { type: DataTableBodyRowComponent, selector: \"datatable-body-row\", inputs: [\"columns\", \"innerWidth\", \"expanded\", \"rowClass\", \"row\", \"group\", \"isSelected\", \"rowIndex\", \"displayCheck\", \"treeStatus\", \"offsetX\", \"rowHeight\"], outputs: [\"activate\", \"treeAction\"] }], directives: [{ type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i1.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableBodyComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'datatable-body',\n                    template: `\n    <datatable-progress *ngIf=\"loadingIndicator\"> </datatable-progress>\n    <datatable-selection\n      #selector\n      [selected]=\"selected\"\n      [rows]=\"rows\"\n      [selectCheck]=\"selectCheck\"\n      [selectEnabled]=\"selectEnabled\"\n      [selectionType]=\"selectionType\"\n      [rowIdentity]=\"rowIdentity\"\n      (select)=\"select.emit($event)\"\n      (activate)=\"activate.emit($event)\"\n    >\n      <datatable-scroller\n        *ngIf=\"rows?.length\"\n        [scrollbarV]=\"scrollbarV\"\n        [scrollbarH]=\"scrollbarH\"\n        [scrollHeight]=\"scrollHeight\"\n        [scrollWidth]=\"columnGroupWidths?.total\"\n        (scroll)=\"onBodyScroll($event)\"\n      >\n        <datatable-summary-row\n          *ngIf=\"summaryRow && summaryPosition === 'top'\"\n          [rowHeight]=\"summaryHeight\"\n          [offsetX]=\"offsetX\"\n          [innerWidth]=\"innerWidth\"\n          [rows]=\"rows\"\n          [columns]=\"columns\"\n        >\n        </datatable-summary-row>\n        <datatable-row-wrapper\n          [groupedRows]=\"groupedRows\"\n          *ngFor=\"let group of temp; let i = index; trackBy: rowTrackingFn\"\n          [innerWidth]=\"innerWidth\"\n          [ngStyle]=\"getRowsStyles(group)\"\n          [rowDetail]=\"rowDetail\"\n          [groupHeader]=\"groupHeader\"\n          [offsetX]=\"offsetX\"\n          [detailRowHeight]=\"getDetailRowHeight(group && group[i], i)\"\n          [row]=\"group\"\n          [expanded]=\"getRowExpanded(group)\"\n          [rowIndex]=\"getRowIndex(group && group[i])\"\n          (rowContextmenu)=\"rowContextmenu.emit($event)\"\n        >\n          <datatable-body-row\n            role=\"row\"\n            *ngIf=\"!groupedRows; else groupedRowsTemplate\"\n            tabindex=\"-1\"\n            [isSelected]=\"selector.getRowSelected(group)\"\n            [innerWidth]=\"innerWidth\"\n            [offsetX]=\"offsetX\"\n            [columns]=\"columns\"\n            [rowHeight]=\"getRowHeight(group)\"\n            [row]=\"group\"\n            [rowIndex]=\"getRowIndex(group)\"\n            [expanded]=\"getRowExpanded(group)\"\n            [rowClass]=\"rowClass\"\n            [displayCheck]=\"displayCheck\"\n            [treeStatus]=\"group && group.treeStatus\"\n            (treeAction)=\"onTreeAction(group)\"\n            (activate)=\"selector.onActivate($event, indexes.first + i)\"\n          >\n          </datatable-body-row>\n          <ng-template #groupedRowsTemplate>\n            <datatable-body-row\n              role=\"row\"\n              *ngFor=\"let row of group.value; let i = index; trackBy: rowTrackingFn\"\n              tabindex=\"-1\"\n              [isSelected]=\"selector.getRowSelected(row)\"\n              [innerWidth]=\"innerWidth\"\n              [offsetX]=\"offsetX\"\n              [columns]=\"columns\"\n              [rowHeight]=\"getRowHeight(row)\"\n              [row]=\"row\"\n              [group]=\"group.value\"\n              [rowIndex]=\"getRowIndex(row)\"\n              [expanded]=\"getRowExpanded(row)\"\n              [rowClass]=\"rowClass\"\n              (activate)=\"selector.onActivate($event, i)\"\n            >\n            </datatable-body-row>\n          </ng-template>\n        </datatable-row-wrapper>\n        <datatable-summary-row\n          role=\"row\"\n          *ngIf=\"summaryRow && summaryPosition === 'bottom'\"\n          [ngStyle]=\"getBottomSummaryRowStyles()\"\n          [rowHeight]=\"summaryHeight\"\n          [offsetX]=\"offsetX\"\n          [innerWidth]=\"innerWidth\"\n          [rows]=\"rows\"\n          [columns]=\"columns\"\n        >\n        </datatable-summary-row>\n      </datatable-scroller>\n      <div class=\"empty-row\" *ngIf=\"!rows?.length && !loadingIndicator\" [innerHTML]=\"emptyMessage\"></div>\n    </datatable-selection>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    host: {\n                        class: 'datatable-body'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { scrollbarV: [{\n                type: Input\n            }], scrollbarH: [{\n                type: Input\n            }], loadingIndicator: [{\n                type: Input\n            }], externalPaging: [{\n                type: Input\n            }], rowHeight: [{\n                type: Input\n            }], offsetX: [{\n                type: Input\n            }], emptyMessage: [{\n                type: Input\n            }], selectionType: [{\n                type: Input\n            }], selected: [{\n                type: Input\n            }], rowIdentity: [{\n                type: Input\n            }], rowDetail: [{\n                type: Input\n            }], groupHeader: [{\n                type: Input\n            }], selectCheck: [{\n                type: Input\n            }], displayCheck: [{\n                type: Input\n            }], trackByProp: [{\n                type: Input\n            }], rowClass: [{\n                type: Input\n            }], groupedRows: [{\n                type: Input\n            }], groupExpansionDefault: [{\n                type: Input\n            }], innerWidth: [{\n                type: Input\n            }], groupRowsBy: [{\n                type: Input\n            }], virtualization: [{\n                type: Input\n            }], summaryRow: [{\n                type: Input\n            }], summaryPosition: [{\n                type: Input\n            }], summaryHeight: [{\n                type: Input\n            }], pageSize: [{\n                type: Input\n            }], rows: [{\n                type: Input\n            }], columns: [{\n                type: Input\n            }], offset: [{\n                type: Input\n            }], rowCount: [{\n                type: Input\n            }], bodyWidth: [{\n                type: HostBinding,\n                args: ['style.width']\n            }], bodyHeight: [{\n                type: Input\n            }, {\n                type: HostBinding,\n                args: ['style.height']\n            }], scroll: [{\n                type: Output\n            }], page: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], select: [{\n                type: Output\n            }], detailToggle: [{\n                type: Output\n            }], rowContextmenu: [{\n                type: Output\n            }], treeAction: [{\n                type: Output\n            }], scroller: [{\n                type: ViewChild,\n                args: [ScrollerComponent]\n            }] } });\n\n/**\n * Gets the next sort direction\n */\nfunction nextSortDir(sortType, current) {\n    if (sortType === SortType.single) {\n        if (current === SortDirection.asc) {\n            return SortDirection.desc;\n        }\n        else {\n            return SortDirection.asc;\n        }\n    }\n    else {\n        if (!current) {\n            return SortDirection.asc;\n        }\n        else if (current === SortDirection.asc) {\n            return SortDirection.desc;\n        }\n        else if (current === SortDirection.desc) {\n            return undefined;\n        }\n        // avoid TS7030: Not all code paths return a value.\n        return undefined;\n    }\n}\n/**\n * Adapted from fueld-ui on 6/216\n * https://github.com/FuelInteractive/fuel-ui/tree/master/src/pipes/OrderBy\n */\nfunction orderByComparator(a, b) {\n    if (a === null || typeof a === 'undefined')\n        a = 0;\n    if (b === null || typeof b === 'undefined')\n        b = 0;\n    if (a instanceof Date && b instanceof Date) {\n        if (a < b)\n            return -1;\n        if (a > b)\n            return 1;\n    }\n    else if (isNaN(parseFloat(a)) || !isFinite(a) || isNaN(parseFloat(b)) || !isFinite(b)) {\n        // Convert to string in case of a=0 or b=0\n        a = String(a);\n        b = String(b);\n        // Isn't a number so lowercase the string to properly compare\n        if (a.toLowerCase() < b.toLowerCase())\n            return -1;\n        if (a.toLowerCase() > b.toLowerCase())\n            return 1;\n    }\n    else {\n        // Parse strings as numbers to compare properly\n        if (parseFloat(a) < parseFloat(b))\n            return -1;\n        if (parseFloat(a) > parseFloat(b))\n            return 1;\n    }\n    // equal each other\n    return 0;\n}\n/**\n * creates a shallow copy of the `rows` input and returns the sorted copy. this function\n * does not sort the `rows` argument in place\n */\nfunction sortRows(rows, columns, dirs) {\n    if (!rows)\n        return [];\n    if (!dirs || !dirs.length || !columns)\n        return [...rows];\n    /**\n     * record the row ordering of results from prior sort operations (if applicable)\n     * this is necessary to guarantee stable sorting behavior\n     */\n    const rowToIndexMap = new Map();\n    rows.forEach((row, index) => rowToIndexMap.set(row, index));\n    const temp = [...rows];\n    const cols = columns.reduce((obj, col) => {\n        if (col.comparator && typeof col.comparator === 'function') {\n            obj[col.prop] = col.comparator;\n        }\n        return obj;\n    }, {});\n    // cache valueGetter and compareFn so that they\n    // do not need to be looked-up in the sort function body\n    const cachedDirs = dirs.map(dir => {\n        const prop = dir.prop;\n        return {\n            prop,\n            dir: dir.dir,\n            valueGetter: getterForProp(prop),\n            compareFn: cols[prop] || orderByComparator\n        };\n    });\n    return temp.sort(function (rowA, rowB) {\n        for (const cachedDir of cachedDirs) {\n            // Get property and valuegetters for column to be sorted\n            const { prop, valueGetter } = cachedDir;\n            // Get A and B cell values from rows based on properties of the columns\n            const propA = valueGetter(rowA, prop);\n            const propB = valueGetter(rowB, prop);\n            // Compare function gets five parameters:\n            // Two cell values to be compared as propA and propB\n            // Two rows corresponding to the cells as rowA and rowB\n            // Direction of the sort for this column as SortDirection\n            // Compare can be a standard JS comparison function (a,b) => -1|0|1\n            // as additional parameters are silently ignored. The whole row and sort\n            // direction enable more complex sort logic.\n            const comparison = cachedDir.dir !== SortDirection.desc\n                ? cachedDir.compareFn(propA, propB, rowA, rowB, cachedDir.dir)\n                : -cachedDir.compareFn(propA, propB, rowA, rowB, cachedDir.dir);\n            // Don't return 0 yet in case of needing to sort by next property\n            if (comparison !== 0)\n                return comparison;\n        }\n        if (!(rowToIndexMap.has(rowA) && rowToIndexMap.has(rowB)))\n            return 0;\n        /**\n         * all else being equal, preserve original order of the rows (stable sort)\n         */\n        return rowToIndexMap.get(rowA) < rowToIndexMap.get(rowB) ? -1 : 1;\n    });\n}\n\nclass DataTableHeaderCellComponent {\n    constructor(cd) {\n        this.cd = cd;\n        this.sort = new EventEmitter();\n        this.select = new EventEmitter();\n        this.columnContextmenu = new EventEmitter(false);\n        this.sortFn = this.onSort.bind(this);\n        this.selectFn = this.select.emit.bind(this.select);\n        this.cellContext = {\n            column: this.column,\n            sortDir: this.sortDir,\n            sortFn: this.sortFn,\n            allRowsSelected: this.allRowsSelected,\n            selectFn: this.selectFn\n        };\n    }\n    set allRowsSelected(value) {\n        this._allRowsSelected = value;\n        this.cellContext.allRowsSelected = value;\n    }\n    get allRowsSelected() {\n        return this._allRowsSelected;\n    }\n    set column(column) {\n        this._column = column;\n        this.cellContext.column = column;\n        this.cd.markForCheck();\n    }\n    get column() {\n        return this._column;\n    }\n    set sorts(val) {\n        this._sorts = val;\n        this.sortDir = this.calcSortDir(val);\n        this.cellContext.sortDir = this.sortDir;\n        this.sortClass = this.calcSortClass(this.sortDir);\n        this.cd.markForCheck();\n    }\n    get sorts() {\n        return this._sorts;\n    }\n    get columnCssClasses() {\n        let cls = 'datatable-header-cell';\n        if (this.column.sortable)\n            cls += ' sortable';\n        if (this.column.resizeable)\n            cls += ' resizeable';\n        if (this.column.headerClass) {\n            if (typeof this.column.headerClass === 'string') {\n                cls += ' ' + this.column.headerClass;\n            }\n            else if (typeof this.column.headerClass === 'function') {\n                const res = this.column.headerClass({\n                    column: this.column\n                });\n                if (typeof res === 'string') {\n                    cls += res;\n                }\n                else if (typeof res === 'object') {\n                    const keys = Object.keys(res);\n                    for (const k of keys) {\n                        if (res[k] === true)\n                            cls += ` ${k}`;\n                    }\n                }\n            }\n        }\n        const sortDir = this.sortDir;\n        if (sortDir) {\n            cls += ` sort-active sort-${sortDir}`;\n        }\n        return cls;\n    }\n    get name() {\n        // guaranteed to have a value by setColumnDefaults() in column-helper.ts\n        return this.column.headerTemplate === undefined ? this.column.name : undefined;\n    }\n    get minWidth() {\n        return this.column.minWidth;\n    }\n    get maxWidth() {\n        return this.column.maxWidth;\n    }\n    get width() {\n        return this.column.width;\n    }\n    get isCheckboxable() {\n        return this.column.checkboxable && this.column.headerCheckboxable && this.selectionType === SelectionType.checkbox;\n    }\n    onContextmenu($event) {\n        this.columnContextmenu.emit({ event: $event, column: this.column });\n    }\n    ngOnInit() {\n        this.sortClass = this.calcSortClass(this.sortDir);\n    }\n    calcSortDir(sorts) {\n        if (sorts && this.column) {\n            const sort = sorts.find((s) => {\n                return s.prop === this.column.prop;\n            });\n            if (sort)\n                return sort.dir;\n        }\n    }\n    onSort() {\n        if (!this.column.sortable)\n            return;\n        const newValue = nextSortDir(this.sortType, this.sortDir);\n        this.sort.emit({\n            column: this.column,\n            prevValue: this.sortDir,\n            newValue\n        });\n    }\n    calcSortClass(sortDir) {\n        if (!this.cellContext.column.sortable)\n            return;\n        if (sortDir === SortDirection.asc) {\n            return `sort-btn sort-asc ${this.sortAscendingIcon}`;\n        }\n        else if (sortDir === SortDirection.desc) {\n            return `sort-btn sort-desc ${this.sortDescendingIcon}`;\n        }\n        else {\n            return `sort-btn ${this.sortUnsetIcon}`;\n        }\n    }\n}\nDataTableHeaderCellComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableHeaderCellComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nDataTableHeaderCellComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DataTableHeaderCellComponent, selector: \"datatable-header-cell\", inputs: { sortType: \"sortType\", sortAscendingIcon: \"sortAscendingIcon\", sortDescendingIcon: \"sortDescendingIcon\", sortUnsetIcon: \"sortUnsetIcon\", isTarget: \"isTarget\", targetMarkerTemplate: \"targetMarkerTemplate\", targetMarkerContext: \"targetMarkerContext\", allRowsSelected: \"allRowsSelected\", selectionType: \"selectionType\", column: \"column\", headerHeight: \"headerHeight\", sorts: \"sorts\" }, outputs: { sort: \"sort\", select: \"select\", columnContextmenu: \"columnContextmenu\" }, host: { listeners: { \"contextmenu\": \"onContextmenu($event)\" }, properties: { \"style.height.px\": \"this.headerHeight\", \"class\": \"this.columnCssClasses\", \"attr.title\": \"this.name\", \"style.minWidth.px\": \"this.minWidth\", \"style.maxWidth.px\": \"this.maxWidth\", \"style.width.px\": \"this.width\" }, classAttribute: \"datatable-header-cell\" }, ngImport: i0, template: `\n    <div class=\"datatable-header-cell-template-wrap\">\n      <ng-template\n        *ngIf=\"isTarget\"\n        [ngTemplateOutlet]=\"targetMarkerTemplate\"\n        [ngTemplateOutletContext]=\"targetMarkerContext\"\n      >\n      </ng-template>\n      <label *ngIf=\"isCheckboxable\" class=\"datatable-checkbox\">\n        <input type=\"checkbox\" [checked]=\"allRowsSelected\" (change)=\"select.emit(!allRowsSelected)\" />\n      </label>\n      <span *ngIf=\"!column.headerTemplate\" class=\"datatable-header-cell-wrapper\">\n        <span class=\"datatable-header-cell-label draggable\" (click)=\"onSort()\" [innerHTML]=\"name\"> </span>\n      </span>\n      <ng-template\n        *ngIf=\"column.headerTemplate\"\n        [ngTemplateOutlet]=\"column.headerTemplate\"\n        [ngTemplateOutletContext]=\"cellContext\"\n      >\n      </ng-template>\n      <span (click)=\"onSort()\" [class]=\"sortClass\"> </span>\n    </div>\n  `, isInline: true, directives: [{ type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableHeaderCellComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'datatable-header-cell',\n                    template: `\n    <div class=\"datatable-header-cell-template-wrap\">\n      <ng-template\n        *ngIf=\"isTarget\"\n        [ngTemplateOutlet]=\"targetMarkerTemplate\"\n        [ngTemplateOutletContext]=\"targetMarkerContext\"\n      >\n      </ng-template>\n      <label *ngIf=\"isCheckboxable\" class=\"datatable-checkbox\">\n        <input type=\"checkbox\" [checked]=\"allRowsSelected\" (change)=\"select.emit(!allRowsSelected)\" />\n      </label>\n      <span *ngIf=\"!column.headerTemplate\" class=\"datatable-header-cell-wrapper\">\n        <span class=\"datatable-header-cell-label draggable\" (click)=\"onSort()\" [innerHTML]=\"name\"> </span>\n      </span>\n      <ng-template\n        *ngIf=\"column.headerTemplate\"\n        [ngTemplateOutlet]=\"column.headerTemplate\"\n        [ngTemplateOutletContext]=\"cellContext\"\n      >\n      </ng-template>\n      <span (click)=\"onSort()\" [class]=\"sortClass\"> </span>\n    </div>\n  `,\n                    host: {\n                        class: 'datatable-header-cell'\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { sortType: [{\n                type: Input\n            }], sortAscendingIcon: [{\n                type: Input\n            }], sortDescendingIcon: [{\n                type: Input\n            }], sortUnsetIcon: [{\n                type: Input\n            }], isTarget: [{\n                type: Input\n            }], targetMarkerTemplate: [{\n                type: Input\n            }], targetMarkerContext: [{\n                type: Input\n            }], allRowsSelected: [{\n                type: Input\n            }], selectionType: [{\n                type: Input\n            }], column: [{\n                type: Input\n            }], headerHeight: [{\n                type: HostBinding,\n                args: ['style.height.px']\n            }, {\n                type: Input\n            }], sorts: [{\n                type: Input\n            }], sort: [{\n                type: Output\n            }], select: [{\n                type: Output\n            }], columnContextmenu: [{\n                type: Output\n            }], columnCssClasses: [{\n                type: HostBinding,\n                args: ['class']\n            }], name: [{\n                type: HostBinding,\n                args: ['attr.title']\n            }], minWidth: [{\n                type: HostBinding,\n                args: ['style.minWidth.px']\n            }], maxWidth: [{\n                type: HostBinding,\n                args: ['style.maxWidth.px']\n            }], width: [{\n                type: HostBinding,\n                args: ['style.width.px']\n            }], onContextmenu: [{\n                type: HostListener,\n                args: ['contextmenu', ['$event']]\n            }] } });\n\nclass DataTableHeaderComponent {\n    constructor(cd) {\n        this.cd = cd;\n        this.sort = new EventEmitter();\n        this.reorder = new EventEmitter();\n        this.resize = new EventEmitter();\n        this.select = new EventEmitter();\n        this.columnContextmenu = new EventEmitter(false);\n        this._columnGroupWidths = {\n            total: 100\n        };\n        this._styleByGroup = {\n            left: {},\n            center: {},\n            right: {}\n        };\n        this.destroyed = false;\n    }\n    set innerWidth(val) {\n        this._innerWidth = val;\n        setTimeout(() => {\n            if (this._columns) {\n                const colByPin = columnsByPin(this._columns);\n                this._columnGroupWidths = columnGroupWidths(colByPin, this._columns);\n                this.setStylesByGroup();\n            }\n        });\n    }\n    get innerWidth() {\n        return this._innerWidth;\n    }\n    set headerHeight(val) {\n        if (val !== 'auto') {\n            this._headerHeight = `${val}px`;\n        }\n        else {\n            this._headerHeight = val;\n        }\n    }\n    get headerHeight() {\n        return this._headerHeight;\n    }\n    set columns(val) {\n        this._columns = val;\n        const colsByPin = columnsByPin(val);\n        this._columnsByPin = columnsByPinArr(val);\n        setTimeout(() => {\n            this._columnGroupWidths = columnGroupWidths(colsByPin, val);\n            this.setStylesByGroup();\n        });\n    }\n    get columns() {\n        return this._columns;\n    }\n    set offsetX(val) {\n        this._offsetX = val;\n        this.setStylesByGroup();\n    }\n    get offsetX() {\n        return this._offsetX;\n    }\n    ngOnDestroy() {\n        this.destroyed = true;\n    }\n    onLongPressStart({ event, model }) {\n        model.dragging = true;\n        this.dragEventTarget = event;\n    }\n    onLongPressEnd({ event, model }) {\n        this.dragEventTarget = event;\n        // delay resetting so sort can be\n        // prevented if we were dragging\n        setTimeout(() => {\n            // datatable component creates copies from columns on reorder\n            // set dragging to false on new objects\n            const column = this._columns.find(c => c.$$id === model.$$id);\n            if (column) {\n                column.dragging = false;\n            }\n        }, 5);\n    }\n    get headerWidth() {\n        if (this.scrollbarH) {\n            return this.innerWidth + 'px';\n        }\n        return '100%';\n    }\n    trackByGroups(index, colGroup) {\n        return colGroup.type;\n    }\n    columnTrackingFn(index, column) {\n        return column.$$id;\n    }\n    onColumnResized(width, column) {\n        if (width <= column.minWidth) {\n            width = column.minWidth;\n        }\n        else if (width >= column.maxWidth) {\n            width = column.maxWidth;\n        }\n        this.resize.emit({\n            column,\n            prevValue: column.width,\n            newValue: width\n        });\n    }\n    onColumnReordered({ prevIndex, newIndex, model }) {\n        const column = this.getColumn(newIndex);\n        column.isTarget = false;\n        column.targetMarkerContext = undefined;\n        this.reorder.emit({\n            column: model,\n            prevValue: prevIndex,\n            newValue: newIndex\n        });\n    }\n    onTargetChanged({ prevIndex, newIndex, initialIndex }) {\n        if (prevIndex || prevIndex === 0) {\n            const oldColumn = this.getColumn(prevIndex);\n            oldColumn.isTarget = false;\n            oldColumn.targetMarkerContext = undefined;\n        }\n        if (newIndex || newIndex === 0) {\n            const newColumn = this.getColumn(newIndex);\n            newColumn.isTarget = true;\n            if (initialIndex !== newIndex) {\n                newColumn.targetMarkerContext = {\n                    class: 'targetMarker '.concat(initialIndex > newIndex ? 'dragFromRight' : 'dragFromLeft')\n                };\n            }\n        }\n    }\n    getColumn(index) {\n        const leftColumnCount = this._columnsByPin[0].columns.length;\n        if (index < leftColumnCount) {\n            return this._columnsByPin[0].columns[index];\n        }\n        const centerColumnCount = this._columnsByPin[1].columns.length;\n        if (index < leftColumnCount + centerColumnCount) {\n            return this._columnsByPin[1].columns[index - leftColumnCount];\n        }\n        return this._columnsByPin[2].columns[index - leftColumnCount - centerColumnCount];\n    }\n    onSort({ column, prevValue, newValue }) {\n        // if we are dragging don't sort!\n        if (column.dragging) {\n            return;\n        }\n        const sorts = this.calcNewSorts(column, prevValue, newValue);\n        this.sort.emit({\n            sorts,\n            column,\n            prevValue,\n            newValue\n        });\n    }\n    calcNewSorts(column, prevValue, newValue) {\n        let idx = 0;\n        if (!this.sorts) {\n            this.sorts = [];\n        }\n        const sorts = this.sorts.map((s, i) => {\n            s = { ...s };\n            if (s.prop === column.prop) {\n                idx = i;\n            }\n            return s;\n        });\n        if (newValue === undefined) {\n            sorts.splice(idx, 1);\n        }\n        else if (prevValue) {\n            sorts[idx].dir = newValue;\n        }\n        else {\n            if (this.sortType === SortType.single) {\n                sorts.splice(0, this.sorts.length);\n            }\n            sorts.push({ dir: newValue, prop: column.prop });\n        }\n        return sorts;\n    }\n    setStylesByGroup() {\n        this._styleByGroup.left = this.calcStylesByGroup('left');\n        this._styleByGroup.center = this.calcStylesByGroup('center');\n        this._styleByGroup.right = this.calcStylesByGroup('right');\n        if (!this.destroyed) {\n            this.cd.detectChanges();\n        }\n    }\n    calcStylesByGroup(group) {\n        const widths = this._columnGroupWidths;\n        const offsetX = this.offsetX;\n        const styles = {\n            width: `${widths[group]}px`\n        };\n        if (group === 'center') {\n            translateXY(styles, offsetX * -1, 0);\n        }\n        else if (group === 'right') {\n            const totalDiff = widths.total - this.innerWidth;\n            const offset = totalDiff * -1;\n            translateXY(styles, offset, 0);\n        }\n        return styles;\n    }\n}\nDataTableHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableHeaderComponent, deps: [{ token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Component });\nDataTableHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DataTableHeaderComponent, selector: \"datatable-header\", inputs: { sortAscendingIcon: \"sortAscendingIcon\", sortDescendingIcon: \"sortDescendingIcon\", sortUnsetIcon: \"sortUnsetIcon\", scrollbarH: \"scrollbarH\", dealsWithGroup: \"dealsWithGroup\", targetMarkerTemplate: \"targetMarkerTemplate\", innerWidth: \"innerWidth\", sorts: \"sorts\", sortType: \"sortType\", allRowsSelected: \"allRowsSelected\", selectionType: \"selectionType\", reorderable: \"reorderable\", headerHeight: \"headerHeight\", columns: \"columns\", offsetX: \"offsetX\" }, outputs: { sort: \"sort\", reorder: \"reorder\", resize: \"resize\", select: \"select\", columnContextmenu: \"columnContextmenu\" }, host: { properties: { \"style.height\": \"this.headerHeight\", \"style.width\": \"this.headerWidth\" }, classAttribute: \"datatable-header\" }, ngImport: i0, template: `\n    <div\n      role=\"row\"\n      orderable\n      (reorder)=\"onColumnReordered($event)\"\n      (targetChanged)=\"onTargetChanged($event)\"\n      [style.width.px]=\"_columnGroupWidths.total\"\n      class=\"datatable-header-inner\"\n    >\n      <div\n        *ngFor=\"let colGroup of _columnsByPin; trackBy: trackByGroups\"\n        [class]=\"'datatable-row-' + colGroup.type\"\n        [ngStyle]=\"_styleByGroup[colGroup.type]\"\n      >\n        <datatable-header-cell\n          role=\"columnheader\"\n          *ngFor=\"let column of colGroup.columns; trackBy: columnTrackingFn\"\n          resizeable\n          [resizeEnabled]=\"column.resizeable\"\n          (resize)=\"onColumnResized($event, column)\"\n          long-press\n          [pressModel]=\"column\"\n          [pressEnabled]=\"reorderable && column.draggable\"\n          (longPressStart)=\"onLongPressStart($event)\"\n          (longPressEnd)=\"onLongPressEnd($event)\"\n          draggable\n          [dragX]=\"reorderable && column.draggable && column.dragging\"\n          [dragY]=\"false\"\n          [dragModel]=\"column\"\n          [dragEventTarget]=\"dragEventTarget\"\n          [headerHeight]=\"headerHeight\"\n          [isTarget]=\"column.isTarget\"\n          [targetMarkerTemplate]=\"targetMarkerTemplate\"\n          [targetMarkerContext]=\"column.targetMarkerContext\"\n          [column]=\"column\"\n          [sortType]=\"sortType\"\n          [sorts]=\"sorts\"\n          [selectionType]=\"selectionType\"\n          [sortAscendingIcon]=\"sortAscendingIcon\"\n          [sortDescendingIcon]=\"sortDescendingIcon\"\n          [sortUnsetIcon]=\"sortUnsetIcon\"\n          [allRowsSelected]=\"allRowsSelected\"\n          (sort)=\"onSort($event)\"\n          (select)=\"select.emit($event)\"\n          (columnContextmenu)=\"columnContextmenu.emit($event)\"\n        >\n        </datatable-header-cell>\n      </div>\n    </div>\n  `, isInline: true, components: [{ type: DataTableHeaderCellComponent, selector: \"datatable-header-cell\", inputs: [\"sortType\", \"sortAscendingIcon\", \"sortDescendingIcon\", \"sortUnsetIcon\", \"isTarget\", \"targetMarkerTemplate\", \"targetMarkerContext\", \"allRowsSelected\", \"selectionType\", \"column\", \"headerHeight\", \"sorts\"], outputs: [\"sort\", \"select\", \"columnContextmenu\"] }], directives: [{ type: OrderableDirective, selector: \"[orderable]\", outputs: [\"reorder\", \"targetChanged\"] }, { type: i1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { type: i1.NgStyle, selector: \"[ngStyle]\", inputs: [\"ngStyle\"] }, { type: ResizeableDirective, selector: \"[resizeable]\", inputs: [\"resizeEnabled\", \"minWidth\", \"maxWidth\"], outputs: [\"resize\"] }, { type: LongPressDirective, selector: \"[long-press]\", inputs: [\"pressEnabled\", \"pressModel\", \"duration\"], outputs: [\"longPressStart\", \"longPressing\", \"longPressEnd\"] }, { type: DraggableDirective, selector: \"[draggable]\", inputs: [\"dragEventTarget\", \"dragModel\", \"dragX\", \"dragY\"], outputs: [\"dragStart\", \"dragging\", \"dragEnd\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableHeaderComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'datatable-header',\n                    template: `\n    <div\n      role=\"row\"\n      orderable\n      (reorder)=\"onColumnReordered($event)\"\n      (targetChanged)=\"onTargetChanged($event)\"\n      [style.width.px]=\"_columnGroupWidths.total\"\n      class=\"datatable-header-inner\"\n    >\n      <div\n        *ngFor=\"let colGroup of _columnsByPin; trackBy: trackByGroups\"\n        [class]=\"'datatable-row-' + colGroup.type\"\n        [ngStyle]=\"_styleByGroup[colGroup.type]\"\n      >\n        <datatable-header-cell\n          role=\"columnheader\"\n          *ngFor=\"let column of colGroup.columns; trackBy: columnTrackingFn\"\n          resizeable\n          [resizeEnabled]=\"column.resizeable\"\n          (resize)=\"onColumnResized($event, column)\"\n          long-press\n          [pressModel]=\"column\"\n          [pressEnabled]=\"reorderable && column.draggable\"\n          (longPressStart)=\"onLongPressStart($event)\"\n          (longPressEnd)=\"onLongPressEnd($event)\"\n          draggable\n          [dragX]=\"reorderable && column.draggable && column.dragging\"\n          [dragY]=\"false\"\n          [dragModel]=\"column\"\n          [dragEventTarget]=\"dragEventTarget\"\n          [headerHeight]=\"headerHeight\"\n          [isTarget]=\"column.isTarget\"\n          [targetMarkerTemplate]=\"targetMarkerTemplate\"\n          [targetMarkerContext]=\"column.targetMarkerContext\"\n          [column]=\"column\"\n          [sortType]=\"sortType\"\n          [sorts]=\"sorts\"\n          [selectionType]=\"selectionType\"\n          [sortAscendingIcon]=\"sortAscendingIcon\"\n          [sortDescendingIcon]=\"sortDescendingIcon\"\n          [sortUnsetIcon]=\"sortUnsetIcon\"\n          [allRowsSelected]=\"allRowsSelected\"\n          (sort)=\"onSort($event)\"\n          (select)=\"select.emit($event)\"\n          (columnContextmenu)=\"columnContextmenu.emit($event)\"\n        >\n        </datatable-header-cell>\n      </div>\n    </div>\n  `,\n                    host: {\n                        class: 'datatable-header'\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ChangeDetectorRef }]; }, propDecorators: { sortAscendingIcon: [{\n                type: Input\n            }], sortDescendingIcon: [{\n                type: Input\n            }], sortUnsetIcon: [{\n                type: Input\n            }], scrollbarH: [{\n                type: Input\n            }], dealsWithGroup: [{\n                type: Input\n            }], targetMarkerTemplate: [{\n                type: Input\n            }], innerWidth: [{\n                type: Input\n            }], sorts: [{\n                type: Input\n            }], sortType: [{\n                type: Input\n            }], allRowsSelected: [{\n                type: Input\n            }], selectionType: [{\n                type: Input\n            }], reorderable: [{\n                type: Input\n            }], headerHeight: [{\n                type: HostBinding,\n                args: ['style.height']\n            }, {\n                type: Input\n            }], columns: [{\n                type: Input\n            }], offsetX: [{\n                type: Input\n            }], sort: [{\n                type: Output\n            }], reorder: [{\n                type: Output\n            }], resize: [{\n                type: Output\n            }], select: [{\n                type: Output\n            }], columnContextmenu: [{\n                type: Output\n            }], headerWidth: [{\n                type: HostBinding,\n                args: ['style.width']\n            }] } });\n\n/**\n * Throttle a function\n */\nfunction throttle(func, wait, options) {\n    options = options || {};\n    let context;\n    let args;\n    let result;\n    let timeout = null;\n    let previous = 0;\n    function later() {\n        previous = options.leading === false ? 0 : +new Date();\n        timeout = null;\n        result = func.apply(context, args);\n    }\n    return function () {\n        const now = +new Date();\n        if (!previous && options.leading === false) {\n            previous = now;\n        }\n        const remaining = wait - (now - previous);\n        context = this;\n        args = arguments;\n        if (remaining <= 0) {\n            clearTimeout(timeout);\n            timeout = null;\n            previous = now;\n            result = func.apply(context, args);\n        }\n        else if (!timeout && options.trailing !== false) {\n            timeout = setTimeout(later, remaining);\n        }\n        return result;\n    };\n}\n/**\n * Throttle decorator\n *\n *  class MyClass {\n *    throttleable(10)\n *    myFn() { ... }\n *  }\n */\nfunction throttleable(duration, options) {\n    return function innerDecorator(target, key, descriptor) {\n        return {\n            configurable: true,\n            enumerable: descriptor.enumerable,\n            get: function getter() {\n                Object.defineProperty(this, key, {\n                    configurable: true,\n                    enumerable: descriptor.enumerable,\n                    value: throttle(descriptor.value, duration, options)\n                });\n                return this[key];\n            }\n        };\n    };\n}\n\n/**\n * Calculates the Total Flex Grow\n */\nfunction getTotalFlexGrow(columns) {\n    let totalFlexGrow = 0;\n    for (const c of columns) {\n        totalFlexGrow += c.flexGrow || 0;\n    }\n    return totalFlexGrow;\n}\n/**\n * Adjusts the column widths.\n * Inspired by: https://github.com/facebook/fixed-data-table/blob/master/src/FixedDataTableWidthHelper.js\n */\nfunction adjustColumnWidths(allColumns, expectedWidth) {\n    const columnsWidth = columnsTotalWidth(allColumns);\n    const totalFlexGrow = getTotalFlexGrow(allColumns);\n    const colsByGroup = columnsByPin(allColumns);\n    if (columnsWidth !== expectedWidth) {\n        scaleColumns(colsByGroup, expectedWidth, totalFlexGrow);\n    }\n}\n/**\n * Resizes columns based on the flexGrow property, while respecting manually set widths\n */\nfunction scaleColumns(colsByGroup, maxWidth, totalFlexGrow) {\n    // calculate total width and flexgrow points for coulumns that can be resized\n    for (const attr in colsByGroup) {\n        for (const column of colsByGroup[attr]) {\n            if (!column.canAutoResize) {\n                maxWidth -= column.width;\n                totalFlexGrow -= column.flexGrow ? column.flexGrow : 0;\n            }\n            else {\n                column.width = 0;\n            }\n        }\n    }\n    const hasMinWidth = {};\n    let remainingWidth = maxWidth;\n    // resize columns until no width is left to be distributed\n    do {\n        const widthPerFlexPoint = remainingWidth / totalFlexGrow;\n        remainingWidth = 0;\n        for (const attr in colsByGroup) {\n            for (const column of colsByGroup[attr]) {\n                // if the column can be resize and it hasn't reached its minimum width yet\n                if (column.canAutoResize && !hasMinWidth[column.prop]) {\n                    const newWidth = column.width + column.flexGrow * widthPerFlexPoint;\n                    if (column.minWidth !== undefined && newWidth < column.minWidth) {\n                        remainingWidth += newWidth - column.minWidth;\n                        column.width = column.minWidth;\n                        hasMinWidth[column.prop] = true;\n                    }\n                    else {\n                        column.width = newWidth;\n                    }\n                }\n            }\n        }\n    } while (remainingWidth !== 0);\n}\n/**\n * Forces the width of the columns to\n * distribute equally but overflowing when necessary\n *\n * Rules:\n *\n *  - If combined withs are less than the total width of the grid,\n *    proportion the widths given the min / max / normal widths to fill the width.\n *\n *  - If the combined widths, exceed the total width of the grid,\n *    use the standard widths.\n *\n *  - If a column is resized, it should always use that width\n *\n *  - The proportional widths should never fall below min size if specified.\n *\n *  - If the grid starts off small but then becomes greater than the size ( + / - )\n *    the width should use the original width; not the newly proportioned widths.\n */\nfunction forceFillColumnWidths(allColumns, expectedWidth, startIdx, allowBleed, defaultColWidth = 300) {\n    const columnsToResize = allColumns.slice(startIdx + 1, allColumns.length).filter(c => {\n        return c.canAutoResize !== false;\n    });\n    for (const column of columnsToResize) {\n        if (!column.$$oldWidth) {\n            column.$$oldWidth = column.width;\n        }\n    }\n    let additionWidthPerColumn = 0;\n    let exceedsWindow = false;\n    let contentWidth = getContentWidth(allColumns, defaultColWidth);\n    let remainingWidth = expectedWidth - contentWidth;\n    const columnsProcessed = [];\n    const remainingWidthLimit = 1; // when to stop\n    // This loop takes care of the\n    do {\n        additionWidthPerColumn = remainingWidth / columnsToResize.length;\n        exceedsWindow = contentWidth >= expectedWidth;\n        for (const column of columnsToResize) {\n            if (exceedsWindow && allowBleed) {\n                column.width = column.$$oldWidth || column.width || defaultColWidth;\n            }\n            else {\n                const newSize = (column.width || defaultColWidth) + additionWidthPerColumn;\n                if (column.minWidth && newSize < column.minWidth) {\n                    column.width = column.minWidth;\n                    columnsProcessed.push(column);\n                }\n                else if (column.maxWidth && newSize > column.maxWidth) {\n                    column.width = column.maxWidth;\n                    columnsProcessed.push(column);\n                }\n                else {\n                    column.width = newSize;\n                }\n            }\n            column.width = Math.max(0, column.width);\n        }\n        contentWidth = getContentWidth(allColumns);\n        remainingWidth = expectedWidth - contentWidth;\n        removeProcessedColumns(columnsToResize, columnsProcessed);\n    } while (remainingWidth > remainingWidthLimit && columnsToResize.length !== 0);\n}\n/**\n * Remove the processed columns from the current active columns.\n */\nfunction removeProcessedColumns(columnsToResize, columnsProcessed) {\n    for (const column of columnsProcessed) {\n        const index = columnsToResize.indexOf(column);\n        columnsToResize.splice(index, 1);\n    }\n}\n/**\n * Gets the width of the columns\n */\nfunction getContentWidth(allColumns, defaultColWidth = 300) {\n    let contentWidth = 0;\n    for (const column of allColumns) {\n        contentWidth += column.width || defaultColWidth;\n    }\n    return contentWidth;\n}\n\nclass DataTablePagerComponent {\n    constructor() {\n        this.change = new EventEmitter();\n        this._count = 0;\n        this._page = 1;\n        this._size = 0;\n    }\n    set size(val) {\n        this._size = val;\n        this.pages = this.calcPages();\n    }\n    get size() {\n        return this._size;\n    }\n    set count(val) {\n        this._count = val;\n        this.pages = this.calcPages();\n    }\n    get count() {\n        return this._count;\n    }\n    set page(val) {\n        this._page = val;\n        this.pages = this.calcPages();\n    }\n    get page() {\n        return this._page;\n    }\n    get totalPages() {\n        const count = this.size < 1 ? 1 : Math.ceil(this.count / this.size);\n        return Math.max(count || 0, 1);\n    }\n    canPrevious() {\n        return this.page > 1;\n    }\n    canNext() {\n        return this.page < this.totalPages;\n    }\n    prevPage() {\n        this.selectPage(this.page - 1);\n    }\n    nextPage() {\n        this.selectPage(this.page + 1);\n    }\n    selectPage(page) {\n        if (page > 0 && page <= this.totalPages && page !== this.page) {\n            this.page = page;\n            this.change.emit({\n                page\n            });\n        }\n    }\n    calcPages(page) {\n        const pages = [];\n        let startPage = 1;\n        let endPage = this.totalPages;\n        const maxSize = 5;\n        const isMaxSized = maxSize < this.totalPages;\n        page = page || this.page;\n        if (isMaxSized) {\n            startPage = page - Math.floor(maxSize / 2);\n            endPage = page + Math.floor(maxSize / 2);\n            if (startPage < 1) {\n                startPage = 1;\n                endPage = Math.min(startPage + maxSize - 1, this.totalPages);\n            }\n            else if (endPage > this.totalPages) {\n                startPage = Math.max(this.totalPages - maxSize + 1, 1);\n                endPage = this.totalPages;\n            }\n        }\n        for (let num = startPage; num <= endPage; num++) {\n            pages.push({\n                number: num,\n                text: num\n            });\n        }\n        return pages;\n    }\n}\nDataTablePagerComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTablePagerComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nDataTablePagerComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DataTablePagerComponent, selector: \"datatable-pager\", inputs: { pagerLeftArrowIcon: \"pagerLeftArrowIcon\", pagerRightArrowIcon: \"pagerRightArrowIcon\", pagerPreviousIcon: \"pagerPreviousIcon\", pagerNextIcon: \"pagerNextIcon\", size: \"size\", count: \"count\", page: \"page\" }, outputs: { change: \"change\" }, host: { classAttribute: \"datatable-pager\" }, ngImport: i0, template: `\n    <ul class=\"pager\">\n      <li [class.disabled]=\"!canPrevious()\">\n        <a role=\"button\" aria-label=\"go to first page\" href=\"javascript:void(0)\" (click)=\"selectPage(1)\">\n          <i class=\"{{ pagerPreviousIcon }}\"></i>\n        </a>\n      </li>\n      <li [class.disabled]=\"!canPrevious()\">\n        <a role=\"button\" aria-label=\"go to previous page\" href=\"javascript:void(0)\" (click)=\"prevPage()\">\n          <i class=\"{{ pagerLeftArrowIcon }}\"></i>\n        </a>\n      </li>\n      <li\n        role=\"button\"\n        [attr.aria-label]=\"'page ' + pg.number\"\n        class=\"pages\"\n        *ngFor=\"let pg of pages\"\n        [class.active]=\"pg.number === page\"\n      >\n        <a href=\"javascript:void(0)\" (click)=\"selectPage(pg.number)\">\n          {{ pg.text }}\n        </a>\n      </li>\n      <li [class.disabled]=\"!canNext()\">\n        <a role=\"button\" aria-label=\"go to next page\" href=\"javascript:void(0)\" (click)=\"nextPage()\">\n          <i class=\"{{ pagerRightArrowIcon }}\"></i>\n        </a>\n      </li>\n      <li [class.disabled]=\"!canNext()\">\n        <a role=\"button\" aria-label=\"go to last page\" href=\"javascript:void(0)\" (click)=\"selectPage(totalPages)\">\n          <i class=\"{{ pagerNextIcon }}\"></i>\n        </a>\n      </li>\n    </ul>\n  `, isInline: true, directives: [{ type: i1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTablePagerComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'datatable-pager',\n                    template: `\n    <ul class=\"pager\">\n      <li [class.disabled]=\"!canPrevious()\">\n        <a role=\"button\" aria-label=\"go to first page\" href=\"javascript:void(0)\" (click)=\"selectPage(1)\">\n          <i class=\"{{ pagerPreviousIcon }}\"></i>\n        </a>\n      </li>\n      <li [class.disabled]=\"!canPrevious()\">\n        <a role=\"button\" aria-label=\"go to previous page\" href=\"javascript:void(0)\" (click)=\"prevPage()\">\n          <i class=\"{{ pagerLeftArrowIcon }}\"></i>\n        </a>\n      </li>\n      <li\n        role=\"button\"\n        [attr.aria-label]=\"'page ' + pg.number\"\n        class=\"pages\"\n        *ngFor=\"let pg of pages\"\n        [class.active]=\"pg.number === page\"\n      >\n        <a href=\"javascript:void(0)\" (click)=\"selectPage(pg.number)\">\n          {{ pg.text }}\n        </a>\n      </li>\n      <li [class.disabled]=\"!canNext()\">\n        <a role=\"button\" aria-label=\"go to next page\" href=\"javascript:void(0)\" (click)=\"nextPage()\">\n          <i class=\"{{ pagerRightArrowIcon }}\"></i>\n        </a>\n      </li>\n      <li [class.disabled]=\"!canNext()\">\n        <a role=\"button\" aria-label=\"go to last page\" href=\"javascript:void(0)\" (click)=\"selectPage(totalPages)\">\n          <i class=\"{{ pagerNextIcon }}\"></i>\n        </a>\n      </li>\n    </ul>\n  `,\n                    host: {\n                        class: 'datatable-pager'\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { pagerLeftArrowIcon: [{\n                type: Input\n            }], pagerRightArrowIcon: [{\n                type: Input\n            }], pagerPreviousIcon: [{\n                type: Input\n            }], pagerNextIcon: [{\n                type: Input\n            }], size: [{\n                type: Input\n            }], count: [{\n                type: Input\n            }], page: [{\n                type: Input\n            }], change: [{\n                type: Output\n            }] } });\n\nclass DataTableFooterComponent {\n    constructor() {\n        this.selectedCount = 0;\n        this.page = new EventEmitter();\n    }\n    get isVisible() {\n        return this.rowCount / this.pageSize > 1;\n    }\n    get curPage() {\n        return this.offset + 1;\n    }\n}\nDataTableFooterComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableFooterComponent, deps: [], target: i0.ɵɵFactoryTarget.Component });\nDataTableFooterComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DataTableFooterComponent, selector: \"datatable-footer\", inputs: { footerHeight: \"footerHeight\", rowCount: \"rowCount\", pageSize: \"pageSize\", offset: \"offset\", pagerLeftArrowIcon: \"pagerLeftArrowIcon\", pagerRightArrowIcon: \"pagerRightArrowIcon\", pagerPreviousIcon: \"pagerPreviousIcon\", pagerNextIcon: \"pagerNextIcon\", totalMessage: \"totalMessage\", footerTemplate: \"footerTemplate\", selectedCount: \"selectedCount\", selectedMessage: \"selectedMessage\" }, outputs: { page: \"page\" }, host: { classAttribute: \"datatable-footer\" }, ngImport: i0, template: `\n    <div\n      class=\"datatable-footer-inner\"\n      [ngClass]=\"{ 'selected-count': selectedMessage }\"\n      [style.height.px]=\"footerHeight\"\n    >\n      <ng-template\n        *ngIf=\"footerTemplate\"\n        [ngTemplateOutlet]=\"footerTemplate.template\"\n        [ngTemplateOutletContext]=\"{\n          rowCount: rowCount,\n          pageSize: pageSize,\n          selectedCount: selectedCount,\n          curPage: curPage,\n          offset: offset\n        }\"\n      >\n      </ng-template>\n      <div class=\"page-count\" *ngIf=\"!footerTemplate\">\n        <span *ngIf=\"selectedMessage\"> {{ selectedCount?.toLocaleString() }} {{ selectedMessage }} / </span>\n        {{ rowCount?.toLocaleString() }} {{ totalMessage }}\n      </div>\n      <datatable-pager\n        *ngIf=\"!footerTemplate\"\n        [pagerLeftArrowIcon]=\"pagerLeftArrowIcon\"\n        [pagerRightArrowIcon]=\"pagerRightArrowIcon\"\n        [pagerPreviousIcon]=\"pagerPreviousIcon\"\n        [pagerNextIcon]=\"pagerNextIcon\"\n        [page]=\"curPage\"\n        [size]=\"pageSize\"\n        [count]=\"rowCount\"\n        [hidden]=\"!isVisible\"\n        (change)=\"page.emit($event)\"\n      >\n      </datatable-pager>\n    </div>\n  `, isInline: true, components: [{ type: DataTablePagerComponent, selector: \"datatable-pager\", inputs: [\"pagerLeftArrowIcon\", \"pagerRightArrowIcon\", \"pagerPreviousIcon\", \"pagerNextIcon\", \"size\", \"count\", \"page\"], outputs: [\"change\"] }], directives: [{ type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { type: i1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DataTableFooterComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'datatable-footer',\n                    template: `\n    <div\n      class=\"datatable-footer-inner\"\n      [ngClass]=\"{ 'selected-count': selectedMessage }\"\n      [style.height.px]=\"footerHeight\"\n    >\n      <ng-template\n        *ngIf=\"footerTemplate\"\n        [ngTemplateOutlet]=\"footerTemplate.template\"\n        [ngTemplateOutletContext]=\"{\n          rowCount: rowCount,\n          pageSize: pageSize,\n          selectedCount: selectedCount,\n          curPage: curPage,\n          offset: offset\n        }\"\n      >\n      </ng-template>\n      <div class=\"page-count\" *ngIf=\"!footerTemplate\">\n        <span *ngIf=\"selectedMessage\"> {{ selectedCount?.toLocaleString() }} {{ selectedMessage }} / </span>\n        {{ rowCount?.toLocaleString() }} {{ totalMessage }}\n      </div>\n      <datatable-pager\n        *ngIf=\"!footerTemplate\"\n        [pagerLeftArrowIcon]=\"pagerLeftArrowIcon\"\n        [pagerRightArrowIcon]=\"pagerRightArrowIcon\"\n        [pagerPreviousIcon]=\"pagerPreviousIcon\"\n        [pagerNextIcon]=\"pagerNextIcon\"\n        [page]=\"curPage\"\n        [size]=\"pageSize\"\n        [count]=\"rowCount\"\n        [hidden]=\"!isVisible\"\n        (change)=\"page.emit($event)\"\n      >\n      </datatable-pager>\n    </div>\n  `,\n                    host: {\n                        class: 'datatable-footer'\n                    },\n                    changeDetection: ChangeDetectionStrategy.OnPush\n                }]\n        }], propDecorators: { footerHeight: [{\n                type: Input\n            }], rowCount: [{\n                type: Input\n            }], pageSize: [{\n                type: Input\n            }], offset: [{\n                type: Input\n            }], pagerLeftArrowIcon: [{\n                type: Input\n            }], pagerRightArrowIcon: [{\n                type: Input\n            }], pagerPreviousIcon: [{\n                type: Input\n            }], pagerNextIcon: [{\n                type: Input\n            }], totalMessage: [{\n                type: Input\n            }], footerTemplate: [{\n                type: Input\n            }], selectedCount: [{\n                type: Input\n            }], selectedMessage: [{\n                type: Input\n            }], page: [{\n                type: Output\n            }] } });\n\nclass DatatableComponent {\n    constructor(scrollbarHelper, dimensionsHelper, cd, element, differs, columnChangesService, configuration) {\n        this.scrollbarHelper = scrollbarHelper;\n        this.dimensionsHelper = dimensionsHelper;\n        this.cd = cd;\n        this.columnChangesService = columnChangesService;\n        this.configuration = configuration;\n        /**\n         * List of row objects that should be\n         * represented as selected in the grid.\n         * Default value: `[]`\n         */\n        this.selected = [];\n        /**\n         * Enable vertical scrollbars\n         */\n        this.scrollbarV = false;\n        /**\n         * Enable horz scrollbars\n         */\n        this.scrollbarH = false;\n        /**\n         * The row height; which is necessary\n         * to calculate the height for the lazy rendering.\n         */\n        this.rowHeight = 30;\n        /**\n         * Type of column width distribution formula.\n         * Example: flex, force, standard\n         */\n        this.columnMode = ColumnMode.standard;\n        /**\n         * The minimum header height in pixels.\n         * Pass a falsey for no header\n         */\n        this.headerHeight = 30;\n        /**\n         * The minimum footer height in pixels.\n         * Pass falsey for no footer\n         */\n        this.footerHeight = 0;\n        /**\n         * If the table should use external paging\n         * otherwise its assumed that all data is preloaded.\n         */\n        this.externalPaging = false;\n        /**\n         * If the table should use external sorting or\n         * the built-in basic sorting.\n         */\n        this.externalSorting = false;\n        /**\n         * Show the linear loading bar.\n         * Default value: `false`\n         */\n        this.loadingIndicator = false;\n        /**\n         * Enable/Disable ability to re-order columns\n         * by dragging them.\n         */\n        this.reorderable = true;\n        /**\n         * Swap columns on re-order columns or\n         * move them.\n         */\n        this.swapColumns = true;\n        /**\n         * The type of sorting\n         */\n        this.sortType = SortType.single;\n        /**\n         * Array of sorted columns by property and type.\n         * Default value: `[]`\n         */\n        this.sorts = [];\n        /**\n         * Css class overrides\n         */\n        this.cssClasses = {\n            sortAscending: 'datatable-icon-up',\n            sortDescending: 'datatable-icon-down',\n            sortUnset: 'datatable-icon-sort-unset',\n            pagerLeftArrow: 'datatable-icon-left',\n            pagerRightArrow: 'datatable-icon-right',\n            pagerPrevious: 'datatable-icon-prev',\n            pagerNext: 'datatable-icon-skip'\n        };\n        /**\n         * Message overrides for localization\n         *\n         * emptyMessage     [default] = 'No data to display'\n         * totalMessage     [default] = 'total'\n         * selectedMessage  [default] = 'selected'\n         */\n        this.messages = {\n            // Message to show when array is presented\n            // but contains no values\n            emptyMessage: 'No data to display',\n            // Footer total message\n            totalMessage: 'total',\n            // Footer selected message\n            selectedMessage: 'selected'\n        };\n        /**\n         * A boolean you can use to set the detault behaviour of rows and groups\n         * whether they will start expanded or not. If ommited the default is NOT expanded.\n         *\n         */\n        this.groupExpansionDefault = false;\n        /**\n         * Property to which you can use for determining select all\n         * rows on current page or not.\n         *\n         * @memberOf DatatableComponent\n         */\n        this.selectAllRowsOnPage = false;\n        /**\n         * A flag for row virtualization on / off\n         */\n        this.virtualization = true;\n        /**\n         * A flag for switching summary row on / off\n         */\n        this.summaryRow = false;\n        /**\n         * A height of summary row\n         */\n        this.summaryHeight = 30;\n        /**\n         * A property holds a summary row position: top/bottom\n         */\n        this.summaryPosition = 'top';\n        /**\n         * Body was scrolled typically in a `scrollbarV:true` scenario.\n         */\n        this.scroll = new EventEmitter();\n        /**\n         * A cell or row was focused via keyboard or mouse click.\n         */\n        this.activate = new EventEmitter();\n        /**\n         * A cell or row was selected.\n         */\n        this.select = new EventEmitter();\n        /**\n         * Column sort was invoked.\n         */\n        this.sort = new EventEmitter();\n        /**\n         * The table was paged either triggered by the pager or the body scroll.\n         */\n        this.page = new EventEmitter();\n        /**\n         * Columns were re-ordered.\n         */\n        this.reorder = new EventEmitter();\n        /**\n         * Column was resized.\n         */\n        this.resize = new EventEmitter();\n        /**\n         * The context menu was invoked on the table.\n         * type indicates whether the header or the body was clicked.\n         * content contains either the column or the row that was clicked.\n         */\n        this.tableContextmenu = new EventEmitter(false);\n        /**\n         * A row was expanded ot collapsed for tree\n         */\n        this.treeAction = new EventEmitter();\n        this.rowCount = 0;\n        this._offsetX = new BehaviorSubject(0);\n        this._count = 0;\n        this._offset = 0;\n        this._subscriptions = [];\n        /**\n         * This will be used when displaying or selecting rows.\n         * when tracking/comparing them, we'll use the value of this fn,\n         *\n         * (`fn(x) === fn(y)` instead of `x === y`)\n         */\n        this.rowIdentity = (x) => {\n            if (this._groupRowsBy) {\n                // each group in groupedRows are stored as {key, value: [rows]},\n                // where key is the groupRowsBy index\n                return x.key;\n            }\n            else {\n                return x;\n            }\n        };\n        // get ref to elm for measuring\n        this.element = element.nativeElement;\n        this.rowDiffer = differs.find({}).create();\n        // apply global settings from Module.forRoot\n        if (this.configuration && this.configuration.messages) {\n            this.messages = { ...this.configuration.messages };\n        }\n    }\n    /**\n     * Rows that are displayed in the table.\n     */\n    set rows(val) {\n        this._rows = val;\n        if (val) {\n            this._internalRows = [...val];\n        }\n        // auto sort on new updates\n        if (!this.externalSorting) {\n            this.sortInternalRows();\n        }\n        // auto group by parent on new update\n        this._internalRows = groupRowsByParents(this._internalRows, optionalGetterForProp(this.treeFromRelation), optionalGetterForProp(this.treeToRelation));\n        // recalculate sizes/etc\n        this.recalculate();\n        if (this._rows && this._groupRowsBy) {\n            // If a column has been specified in _groupRowsBy created a new array with the data grouped by that row\n            this.groupedRows = this.groupArrayBy(this._rows, this._groupRowsBy);\n        }\n        this.cd.markForCheck();\n    }\n    /**\n     * Gets the rows.\n     */\n    get rows() {\n        return this._rows;\n    }\n    /**\n     * This attribute allows the user to set the name of the column to group the data with\n     */\n    set groupRowsBy(val) {\n        if (val) {\n            this._groupRowsBy = val;\n            if (this._rows && this._groupRowsBy) {\n                // cretes a new array with the data grouped\n                this.groupedRows = this.groupArrayBy(this._rows, this._groupRowsBy);\n            }\n        }\n    }\n    get groupRowsBy() {\n        return this._groupRowsBy;\n    }\n    /**\n     * Columns to be displayed.\n     */\n    set columns(val) {\n        if (val) {\n            this._internalColumns = [...val];\n            setColumnDefaults(this._internalColumns);\n            this.recalculateColumns();\n        }\n        this._columns = val;\n    }\n    /**\n     * Get the columns.\n     */\n    get columns() {\n        return this._columns;\n    }\n    /**\n     * The page size to be shown.\n     * Default value: `undefined`\n     */\n    set limit(val) {\n        this._limit = val;\n        // recalculate sizes/etc\n        this.recalculate();\n    }\n    /**\n     * Gets the limit.\n     */\n    get limit() {\n        return this._limit;\n    }\n    /**\n     * The total count of all rows.\n     * Default value: `0`\n     */\n    set count(val) {\n        this._count = val;\n        // recalculate sizes/etc\n        this.recalculate();\n    }\n    /**\n     * Gets the count.\n     */\n    get count() {\n        return this._count;\n    }\n    /**\n     * The current offset ( page - 1 ) shown.\n     * Default value: `0`\n     */\n    set offset(val) {\n        this._offset = val;\n    }\n    get offset() {\n        return Math.max(Math.min(this._offset, Math.ceil(this.rowCount / this.pageSize) - 1), 0);\n    }\n    /**\n     * CSS class applied if the header height if fixed height.\n     */\n    get isFixedHeader() {\n        const headerHeight = this.headerHeight;\n        return typeof headerHeight === 'string' ? headerHeight !== 'auto' : true;\n    }\n    /**\n     * CSS class applied to the root element if\n     * the row heights are fixed heights.\n     */\n    get isFixedRow() {\n        return this.rowHeight !== 'auto';\n    }\n    /**\n     * CSS class applied to root element if\n     * vertical scrolling is enabled.\n     */\n    get isVertScroll() {\n        return this.scrollbarV;\n    }\n    /**\n     * CSS class applied to root element if\n     * virtualization is enabled.\n     */\n    get isVirtualized() {\n        return this.virtualization;\n    }\n    /**\n     * CSS class applied to the root element\n     * if the horziontal scrolling is enabled.\n     */\n    get isHorScroll() {\n        return this.scrollbarH;\n    }\n    /**\n     * CSS class applied to root element is selectable.\n     */\n    get isSelectable() {\n        return this.selectionType !== undefined;\n    }\n    /**\n     * CSS class applied to root is checkbox selection.\n     */\n    get isCheckboxSelection() {\n        return this.selectionType === SelectionType.checkbox;\n    }\n    /**\n     * CSS class applied to root if cell selection.\n     */\n    get isCellSelection() {\n        return this.selectionType === SelectionType.cell;\n    }\n    /**\n     * CSS class applied to root if single select.\n     */\n    get isSingleSelection() {\n        return this.selectionType === SelectionType.single;\n    }\n    /**\n     * CSS class added to root element if mulit select\n     */\n    get isMultiSelection() {\n        return this.selectionType === SelectionType.multi;\n    }\n    /**\n     * CSS class added to root element if mulit click select\n     */\n    get isMultiClickSelection() {\n        return this.selectionType === SelectionType.multiClick;\n    }\n    /**\n     * Column templates gathered from `ContentChildren`\n     * if described in your markup.\n     */\n    set columnTemplates(val) {\n        this._columnTemplates = val;\n        this.translateColumns(val);\n    }\n    /**\n     * Returns the column templates.\n     */\n    get columnTemplates() {\n        return this._columnTemplates;\n    }\n    /**\n     * Returns if all rows are selected.\n     */\n    get allRowsSelected() {\n        let allRowsSelected = this.rows && this.selected && this.selected.length === this.rows.length;\n        if (this.bodyComponent && this.selectAllRowsOnPage) {\n            const indexes = this.bodyComponent.indexes;\n            const rowsOnPage = indexes.last - indexes.first;\n            allRowsSelected = this.selected.length === rowsOnPage;\n        }\n        return this.selected && this.rows && this.rows.length !== 0 && allRowsSelected;\n    }\n    /**\n     * Lifecycle hook that is called after data-bound\n     * properties of a directive are initialized.\n     */\n    ngOnInit() {\n        // need to call this immediatly to size\n        // if the table is hidden the visibility\n        // listener will invoke this itself upon show\n        this.recalculate();\n    }\n    /**\n     * Lifecycle hook that is called after a component's\n     * view has been fully initialized.\n     */\n    ngAfterViewInit() {\n        if (!this.externalSorting) {\n            this.sortInternalRows();\n        }\n        // this has to be done to prevent the change detection\n        // tree from freaking out because we are readjusting\n        if (typeof requestAnimationFrame === 'undefined') {\n            return;\n        }\n        requestAnimationFrame(() => {\n            this.recalculate();\n            // emit page for virtual server-side kickoff\n            if (this.externalPaging && this.scrollbarV) {\n                this.page.emit({\n                    count: this.count,\n                    pageSize: this.pageSize,\n                    limit: this.limit,\n                    offset: 0\n                });\n            }\n        });\n    }\n    /**\n     * Lifecycle hook that is called after a component's\n     * content has been fully initialized.\n     */\n    ngAfterContentInit() {\n        this.columnTemplates.changes.subscribe(v => this.translateColumns(v));\n        this.listenForColumnInputChanges();\n    }\n    /**\n     * Translates the templates to the column objects\n     */\n    translateColumns(val) {\n        if (val) {\n            const arr = val.toArray();\n            if (arr.length) {\n                this._internalColumns = translateTemplates(arr);\n                setColumnDefaults(this._internalColumns);\n                this.recalculateColumns();\n                this.sortInternalRows();\n                this.cd.markForCheck();\n            }\n        }\n    }\n    /**\n     * Creates a map with the data grouped by the user choice of grouping index\n     *\n     * @param originalArray the original array passed via parameter\n     * @param groupByIndex  the index of the column to group the data by\n     */\n    groupArrayBy(originalArray, groupBy) {\n        // create a map to hold groups with their corresponding results\n        const map = new Map();\n        let i = 0;\n        originalArray.forEach((item) => {\n            const key = item[groupBy];\n            if (!map.has(key)) {\n                map.set(key, [item]);\n            }\n            else {\n                map.get(key).push(item);\n            }\n            i++;\n        });\n        const addGroup = (key, value) => {\n            return { key, value };\n        };\n        // convert map back to a simple array of objects\n        return Array.from(map, x => addGroup(x[0], x[1]));\n    }\n    /*\n     * Lifecycle hook that is called when Angular dirty checks a directive.\n     */\n    ngDoCheck() {\n        if (this.rowDiffer.diff(this.rows)) {\n            if (!this.externalSorting) {\n                this.sortInternalRows();\n            }\n            else {\n                this._internalRows = [...this.rows];\n            }\n            // auto group by parent on new update\n            this._internalRows = groupRowsByParents(this._internalRows, optionalGetterForProp(this.treeFromRelation), optionalGetterForProp(this.treeToRelation));\n            this.recalculatePages();\n            this.cd.markForCheck();\n        }\n    }\n    /**\n     * Recalc's the sizes of the grid.\n     *\n     * Updated automatically on changes to:\n     *\n     *  - Columns\n     *  - Rows\n     *  - Paging related\n     *\n     * Also can be manually invoked or upon window resize.\n     */\n    recalculate() {\n        this.recalculateDims();\n        this.recalculateColumns();\n        this.cd.markForCheck();\n    }\n    /**\n     * Window resize handler to update sizes.\n     */\n    onWindowResize() {\n        this.recalculate();\n    }\n    /**\n     * Recalulcates the column widths based on column width\n     * distribution mode and scrollbar offsets.\n     */\n    recalculateColumns(columns = this._internalColumns, forceIdx = -1, allowBleed = this.scrollbarH) {\n        if (!columns)\n            return undefined;\n        let width = this._innerWidth;\n        if (this.scrollbarV) {\n            width = width - this.scrollbarHelper.width;\n        }\n        if (this.columnMode === ColumnMode.force) {\n            forceFillColumnWidths(columns, width, forceIdx, allowBleed);\n        }\n        else if (this.columnMode === ColumnMode.flex) {\n            adjustColumnWidths(columns, width);\n        }\n        return columns;\n    }\n    /**\n     * Recalculates the dimensions of the table size.\n     * Internally calls the page size and row count calcs too.\n     *\n     */\n    recalculateDims() {\n        const dims = this.dimensionsHelper.getDimensions(this.element);\n        this._innerWidth = Math.floor(dims.width);\n        if (this.scrollbarV) {\n            let height = dims.height;\n            if (this.headerHeight)\n                height = height - this.headerHeight;\n            if (this.footerHeight)\n                height = height - this.footerHeight;\n            this.bodyHeight = height;\n        }\n        this.recalculatePages();\n    }\n    /**\n     * Recalculates the pages after a update.\n     */\n    recalculatePages() {\n        this.pageSize = this.calcPageSize();\n        this.rowCount = this.calcRowCount();\n    }\n    /**\n     * Body triggered a page event.\n     */\n    onBodyPage({ offset }) {\n        // Avoid pagination caming from body events like scroll when the table\n        // has no virtualization and the external paging is enable.\n        // This means, let's the developer handle pagination by my him(her) self\n        if (this.externalPaging && !this.virtualization) {\n            return;\n        }\n        this.offset = offset;\n        this.page.emit({\n            count: this.count,\n            pageSize: this.pageSize,\n            limit: this.limit,\n            offset: this.offset\n        });\n    }\n    /**\n     * The body triggered a scroll event.\n     */\n    onBodyScroll(event) {\n        this._offsetX.next(event.offsetX);\n        this.scroll.emit(event);\n        this.cd.detectChanges();\n    }\n    /**\n     * The footer triggered a page event.\n     */\n    onFooterPage(event) {\n        this.offset = event.page - 1;\n        this.bodyComponent.updateOffsetY(this.offset);\n        this.page.emit({\n            count: this.count,\n            pageSize: this.pageSize,\n            limit: this.limit,\n            offset: this.offset\n        });\n        if (this.selectAllRowsOnPage) {\n            this.selected = [];\n            this.select.emit({\n                selected: this.selected\n            });\n        }\n    }\n    /**\n     * Recalculates the sizes of the page\n     */\n    calcPageSize(val = this.rows) {\n        // Keep the page size constant even if the row has been expanded.\n        // This is because an expanded row is still considered to be a child of\n        // the original row.  Hence calculation would use rowHeight only.\n        if (this.scrollbarV && this.virtualization) {\n            const size = Math.ceil(this.bodyHeight / this.rowHeight);\n            return Math.max(size, 0);\n        }\n        // if limit is passed, we are paging\n        if (this.limit !== undefined) {\n            return this.limit;\n        }\n        // otherwise use row length\n        if (val) {\n            return val.length;\n        }\n        // other empty :(\n        return 0;\n    }\n    /**\n     * Calculates the row count.\n     */\n    calcRowCount(val = this.rows) {\n        if (!this.externalPaging) {\n            if (!val)\n                return 0;\n            if (this.groupedRows) {\n                return this.groupedRows.length;\n            }\n            else if (this.treeFromRelation != null && this.treeToRelation != null) {\n                return this._internalRows.length;\n            }\n            else {\n                return val.length;\n            }\n        }\n        return this.count;\n    }\n    /**\n     * The header triggered a contextmenu event.\n     */\n    onColumnContextmenu({ event, column }) {\n        this.tableContextmenu.emit({ event, type: ContextmenuType.header, content: column });\n    }\n    /**\n     * The body triggered a contextmenu event.\n     */\n    onRowContextmenu({ event, row }) {\n        this.tableContextmenu.emit({ event, type: ContextmenuType.body, content: row });\n    }\n    /**\n     * The header triggered a column resize event.\n     */\n    onColumnResize({ column, newValue }) {\n        /* Safari/iOS 10.2 workaround */\n        if (column === undefined) {\n            return;\n        }\n        let idx;\n        const cols = this._internalColumns.map((c, i) => {\n            c = { ...c };\n            if (c.$$id === column.$$id) {\n                idx = i;\n                c.width = newValue;\n                // set this so we can force the column\n                // width distribution to be to this value\n                c.$$oldWidth = newValue;\n            }\n            return c;\n        });\n        this.recalculateColumns(cols, idx);\n        this._internalColumns = cols;\n        this.resize.emit({\n            column,\n            newValue\n        });\n    }\n    /**\n     * The header triggered a column re-order event.\n     */\n    onColumnReorder({ column, newValue, prevValue }) {\n        const cols = this._internalColumns.map(c => {\n            return { ...c };\n        });\n        if (this.swapColumns) {\n            const prevCol = cols[newValue];\n            cols[newValue] = column;\n            cols[prevValue] = prevCol;\n        }\n        else {\n            if (newValue > prevValue) {\n                const movedCol = cols[prevValue];\n                for (let i = prevValue; i < newValue; i++) {\n                    cols[i] = cols[i + 1];\n                }\n                cols[newValue] = movedCol;\n            }\n            else {\n                const movedCol = cols[prevValue];\n                for (let i = prevValue; i > newValue; i--) {\n                    cols[i] = cols[i - 1];\n                }\n                cols[newValue] = movedCol;\n            }\n        }\n        this._internalColumns = cols;\n        this.reorder.emit({\n            column,\n            newValue,\n            prevValue\n        });\n    }\n    /**\n     * The header triggered a column sort event.\n     */\n    onColumnSort(event) {\n        // clean selected rows\n        if (this.selectAllRowsOnPage) {\n            this.selected = [];\n            this.select.emit({\n                selected: this.selected\n            });\n        }\n        this.sorts = event.sorts;\n        // this could be optimized better since it will resort\n        // the rows again on the 'push' detection...\n        if (this.externalSorting === false) {\n            // don't use normal setter so we don't resort\n            this.sortInternalRows();\n        }\n        // auto group by parent on new update\n        this._internalRows = groupRowsByParents(this._internalRows, optionalGetterForProp(this.treeFromRelation), optionalGetterForProp(this.treeToRelation));\n        // Always go to first page when sorting to see the newly sorted data\n        this.offset = 0;\n        this.bodyComponent.updateOffsetY(this.offset);\n        this.sort.emit(event);\n    }\n    /**\n     * Toggle all row selection\n     */\n    onHeaderSelect(event) {\n        if (this.bodyComponent && this.selectAllRowsOnPage) {\n            // before we splice, chk if we currently have all selected\n            const first = this.bodyComponent.indexes.first;\n            const last = this.bodyComponent.indexes.last;\n            const allSelected = this.selected.length === last - first;\n            // remove all existing either way\n            this.selected = [];\n            // do the opposite here\n            if (!allSelected) {\n                this.selected.push(...this._internalRows.slice(first, last));\n            }\n        }\n        else {\n            // before we splice, chk if we currently have all selected\n            const allSelected = this.selected.length === this.rows.length;\n            // remove all existing either way\n            this.selected = [];\n            // do the opposite here\n            if (!allSelected) {\n                this.selected.push(...this.rows);\n            }\n        }\n        this.select.emit({\n            selected: this.selected\n        });\n    }\n    /**\n     * A row was selected from body\n     */\n    onBodySelect(event) {\n        this.select.emit(event);\n    }\n    /**\n     * A row was expanded or collapsed for tree\n     */\n    onTreeAction(event) {\n        const row = event.row;\n        // TODO: For duplicated items this will not work\n        const rowIndex = this._rows.findIndex(r => r[this.treeToRelation] === event.row[this.treeToRelation]);\n        this.treeAction.emit({ row, rowIndex });\n    }\n    ngOnDestroy() {\n        this._subscriptions.forEach(subscription => subscription.unsubscribe());\n    }\n    /**\n     * listen for changes to input bindings of all DataTableColumnDirective and\n     * trigger the columnTemplates.changes observable to emit\n     */\n    listenForColumnInputChanges() {\n        this._subscriptions.push(this.columnChangesService.columnInputChanges$.subscribe(() => {\n            if (this.columnTemplates) {\n                this.columnTemplates.notifyOnChanges();\n            }\n        }));\n    }\n    sortInternalRows() {\n        this._internalRows = sortRows(this._internalRows, this._internalColumns, this.sorts);\n    }\n}\nDatatableComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DatatableComponent, deps: [{ token: ScrollbarHelper, skipSelf: true }, { token: DimensionsHelper, skipSelf: true }, { token: i0.ChangeDetectorRef }, { token: i0.ElementRef }, { token: i0.KeyValueDiffers }, { token: ColumnChangesService }, { token: 'configuration', optional: true }], target: i0.ɵɵFactoryTarget.Component });\nDatatableComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"12.0.0\", version: \"13.1.1\", type: DatatableComponent, selector: \"ngx-datatable\", inputs: { targetMarkerTemplate: \"targetMarkerTemplate\", rows: \"rows\", groupRowsBy: \"groupRowsBy\", groupedRows: \"groupedRows\", columns: \"columns\", selected: \"selected\", scrollbarV: \"scrollbarV\", scrollbarH: \"scrollbarH\", rowHeight: \"rowHeight\", columnMode: \"columnMode\", headerHeight: \"headerHeight\", footerHeight: \"footerHeight\", externalPaging: \"externalPaging\", externalSorting: \"externalSorting\", limit: \"limit\", count: \"count\", offset: \"offset\", loadingIndicator: \"loadingIndicator\", selectionType: \"selectionType\", reorderable: \"reorderable\", swapColumns: \"swapColumns\", sortType: \"sortType\", sorts: \"sorts\", cssClasses: \"cssClasses\", messages: \"messages\", rowClass: \"rowClass\", selectCheck: \"selectCheck\", displayCheck: \"displayCheck\", groupExpansionDefault: \"groupExpansionDefault\", trackByProp: \"trackByProp\", selectAllRowsOnPage: \"selectAllRowsOnPage\", virtualization: \"virtualization\", treeFromRelation: \"treeFromRelation\", treeToRelation: \"treeToRelation\", summaryRow: \"summaryRow\", summaryHeight: \"summaryHeight\", summaryPosition: \"summaryPosition\", rowIdentity: \"rowIdentity\" }, outputs: { scroll: \"scroll\", activate: \"activate\", select: \"select\", sort: \"sort\", page: \"page\", reorder: \"reorder\", resize: \"resize\", tableContextmenu: \"tableContextmenu\", treeAction: \"treeAction\" }, host: { listeners: { \"window:resize\": \"onWindowResize()\" }, properties: { \"class.fixed-header\": \"this.isFixedHeader\", \"class.fixed-row\": \"this.isFixedRow\", \"class.scroll-vertical\": \"this.isVertScroll\", \"class.virtualized\": \"this.isVirtualized\", \"class.scroll-horz\": \"this.isHorScroll\", \"class.selectable\": \"this.isSelectable\", \"class.checkbox-selection\": \"this.isCheckboxSelection\", \"class.cell-selection\": \"this.isCellSelection\", \"class.single-selection\": \"this.isSingleSelection\", \"class.multi-selection\": \"this.isMultiSelection\", \"class.multi-click-selection\": \"this.isMultiClickSelection\" }, classAttribute: \"ngx-datatable\" }, queries: [{ propertyName: \"rowDetail\", first: true, predicate: DatatableRowDetailDirective, descendants: true }, { propertyName: \"groupHeader\", first: true, predicate: DatatableGroupHeaderDirective, descendants: true }, { propertyName: \"footer\", first: true, predicate: DatatableFooterDirective, descendants: true }, { propertyName: \"columnTemplates\", predicate: DataTableColumnDirective }], viewQueries: [{ propertyName: \"bodyComponent\", first: true, predicate: DataTableBodyComponent, descendants: true }, { propertyName: \"headerComponent\", first: true, predicate: DataTableHeaderComponent, descendants: true }], ngImport: i0, template: \"<div role=\\\"table\\\" visibilityObserver (visible)=\\\"recalculate()\\\">\\n  <datatable-header\\n    role=\\\"rowgroup\\\"\\n    *ngIf=\\\"headerHeight\\\"\\n    [sorts]=\\\"sorts\\\"\\n    [sortType]=\\\"sortType\\\"\\n    [scrollbarH]=\\\"scrollbarH\\\"\\n    [innerWidth]=\\\"_innerWidth\\\"\\n    [offsetX]=\\\"_offsetX | async\\\"\\n    [dealsWithGroup]=\\\"groupedRows !== undefined\\\"\\n    [columns]=\\\"_internalColumns\\\"\\n    [headerHeight]=\\\"headerHeight\\\"\\n    [reorderable]=\\\"reorderable\\\"\\n    [targetMarkerTemplate]=\\\"targetMarkerTemplate\\\"\\n    [sortAscendingIcon]=\\\"cssClasses.sortAscending\\\"\\n    [sortDescendingIcon]=\\\"cssClasses.sortDescending\\\"\\n    [sortUnsetIcon]=\\\"cssClasses.sortUnset\\\"\\n    [allRowsSelected]=\\\"allRowsSelected\\\"\\n    [selectionType]=\\\"selectionType\\\"\\n    (sort)=\\\"onColumnSort($event)\\\"\\n    (resize)=\\\"onColumnResize($event)\\\"\\n    (reorder)=\\\"onColumnReorder($event)\\\"\\n    (select)=\\\"onHeaderSelect($event)\\\"\\n    (columnContextmenu)=\\\"onColumnContextmenu($event)\\\"\\n  >\\n  </datatable-header>\\n  <datatable-body\\n    role=\\\"rowgroup\\\"\\n    [groupRowsBy]=\\\"groupRowsBy\\\"\\n    [groupedRows]=\\\"groupedRows\\\"\\n    [rows]=\\\"_internalRows\\\"\\n    [groupExpansionDefault]=\\\"groupExpansionDefault\\\"\\n    [scrollbarV]=\\\"scrollbarV\\\"\\n    [scrollbarH]=\\\"scrollbarH\\\"\\n    [virtualization]=\\\"virtualization\\\"\\n    [loadingIndicator]=\\\"loadingIndicator\\\"\\n    [externalPaging]=\\\"externalPaging\\\"\\n    [rowHeight]=\\\"rowHeight\\\"\\n    [rowCount]=\\\"rowCount\\\"\\n    [offset]=\\\"offset\\\"\\n    [trackByProp]=\\\"trackByProp\\\"\\n    [columns]=\\\"_internalColumns\\\"\\n    [pageSize]=\\\"pageSize\\\"\\n    [offsetX]=\\\"_offsetX | async\\\"\\n    [rowDetail]=\\\"rowDetail\\\"\\n    [groupHeader]=\\\"groupHeader\\\"\\n    [selected]=\\\"selected\\\"\\n    [innerWidth]=\\\"_innerWidth\\\"\\n    [bodyHeight]=\\\"bodyHeight\\\"\\n    [selectionType]=\\\"selectionType\\\"\\n    [emptyMessage]=\\\"messages.emptyMessage\\\"\\n    [rowIdentity]=\\\"rowIdentity\\\"\\n    [rowClass]=\\\"rowClass\\\"\\n    [selectCheck]=\\\"selectCheck\\\"\\n    [displayCheck]=\\\"displayCheck\\\"\\n    [summaryRow]=\\\"summaryRow\\\"\\n    [summaryHeight]=\\\"summaryHeight\\\"\\n    [summaryPosition]=\\\"summaryPosition\\\"\\n    (page)=\\\"onBodyPage($event)\\\"\\n    (activate)=\\\"activate.emit($event)\\\"\\n    (rowContextmenu)=\\\"onRowContextmenu($event)\\\"\\n    (select)=\\\"onBodySelect($event)\\\"\\n    (scroll)=\\\"onBodyScroll($event)\\\"\\n    (treeAction)=\\\"onTreeAction($event)\\\"\\n  >\\n  </datatable-body>\\n  <datatable-footer\\n    *ngIf=\\\"footerHeight\\\"\\n    [rowCount]=\\\"rowCount\\\"\\n    [pageSize]=\\\"pageSize\\\"\\n    [offset]=\\\"offset\\\"\\n    [footerHeight]=\\\"footerHeight\\\"\\n    [footerTemplate]=\\\"footer\\\"\\n    [totalMessage]=\\\"messages.totalMessage\\\"\\n    [pagerLeftArrowIcon]=\\\"cssClasses.pagerLeftArrow\\\"\\n    [pagerRightArrowIcon]=\\\"cssClasses.pagerRightArrow\\\"\\n    [pagerPreviousIcon]=\\\"cssClasses.pagerPrevious\\\"\\n    [selectedCount]=\\\"selected.length\\\"\\n    [selectedMessage]=\\\"!!selectionType && messages.selectedMessage\\\"\\n    [pagerNextIcon]=\\\"cssClasses.pagerNext\\\"\\n    (page)=\\\"onFooterPage($event)\\\"\\n  >\\n  </datatable-footer>\\n</div>\\n\", styles: [\".ngx-datatable{display:block;overflow:hidden;justify-content:center;position:relative;transform:translate(0)}.ngx-datatable [hidden]{display:none!important}.ngx-datatable *,.ngx-datatable *:before,.ngx-datatable *:after{box-sizing:border-box}.ngx-datatable.scroll-vertical .datatable-body{overflow-y:auto}.ngx-datatable.scroll-vertical.virtualized .datatable-body .datatable-row-wrapper{position:absolute}.ngx-datatable.scroll-horz .datatable-body{overflow-x:auto;-webkit-overflow-scrolling:touch}.ngx-datatable.fixed-header .datatable-header .datatable-header-inner{white-space:nowrap}.ngx-datatable.fixed-header .datatable-header .datatable-header-inner .datatable-header-cell{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.ngx-datatable.fixed-row .datatable-scroll,.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row{white-space:nowrap}.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row .datatable-body-cell,.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row .datatable-body-group-cell{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.ngx-datatable .datatable-body-row,.ngx-datatable .datatable-row-center,.ngx-datatable .datatable-header-inner{display:flex;flex-direction:row;-o-flex-flow:row;flex-flow:row}.ngx-datatable .datatable-body-cell,.ngx-datatable .datatable-header-cell{overflow-x:hidden;vertical-align:top;display:inline-block;line-height:1.625}.ngx-datatable .datatable-body-cell:focus,.ngx-datatable .datatable-header-cell:focus{outline:none}.ngx-datatable .datatable-row-left,.ngx-datatable .datatable-row-right{z-index:9}.ngx-datatable .datatable-row-left,.ngx-datatable .datatable-row-center,.ngx-datatable .datatable-row-group,.ngx-datatable .datatable-row-right{position:relative}.ngx-datatable .datatable-header{display:block;overflow:hidden}.ngx-datatable .datatable-header .datatable-header-inner{align-items:stretch;-webkit-align-items:stretch}.ngx-datatable .datatable-header .datatable-header-cell{position:relative;display:inline-block}.ngx-datatable .datatable-header .datatable-header-cell.sortable .datatable-header-cell-wrapper{cursor:pointer}.ngx-datatable .datatable-header .datatable-header-cell.longpress .datatable-header-cell-wrapper{cursor:move}.ngx-datatable .datatable-header .datatable-header-cell .sort-btn{line-height:100%;vertical-align:middle;display:inline-block;cursor:pointer}.ngx-datatable .datatable-header .datatable-header-cell .resize-handle,.ngx-datatable .datatable-header .datatable-header-cell .resize-handle--not-resizable{display:inline-block;position:absolute;right:0;top:0;bottom:0;width:5px;padding:0 4px;visibility:hidden}.ngx-datatable .datatable-header .datatable-header-cell .resize-handle{cursor:ew-resize}.ngx-datatable .datatable-header .datatable-header-cell.resizeable:hover .resize-handle,.ngx-datatable .datatable-header .datatable-header-cell:hover .resize-handle--not-resizable{visibility:visible}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker{position:absolute;top:0;bottom:0}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker.dragFromLeft{right:0}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker.dragFromRight{left:0}.ngx-datatable .datatable-header .datatable-header-cell .datatable-header-cell-template-wrap{height:inherit}.ngx-datatable .datatable-body{position:relative;z-index:10;display:block}.ngx-datatable .datatable-body .datatable-scroll{display:inline-block}.ngx-datatable .datatable-body .datatable-row-detail{overflow-y:hidden}.ngx-datatable .datatable-body .datatable-row-wrapper{display:flex;flex-direction:column}.ngx-datatable .datatable-body .datatable-body-row{outline:none}.ngx-datatable .datatable-body .datatable-body-row>div{display:flex}.ngx-datatable .datatable-footer{display:block;width:100%;overflow:auto}.ngx-datatable .datatable-footer .datatable-footer-inner{display:flex;align-items:center;width:100%}.ngx-datatable .datatable-footer .selected-count .page-count{flex:1 1 40%}.ngx-datatable .datatable-footer .selected-count .datatable-pager{flex:1 1 60%}.ngx-datatable .datatable-footer .page-count{flex:1 1 20%}.ngx-datatable .datatable-footer .datatable-pager{flex:1 1 80%;text-align:right}.ngx-datatable .datatable-footer .datatable-pager .pager,.ngx-datatable .datatable-footer .datatable-pager .pager li{padding:0;margin:0;display:inline-block;list-style:none}.ngx-datatable .datatable-footer .datatable-pager .pager li,.ngx-datatable .datatable-footer .datatable-pager .pager li a{outline:none}.ngx-datatable .datatable-footer .datatable-pager .pager li a{cursor:pointer;display:inline-block}.ngx-datatable .datatable-footer .datatable-pager .pager li.disabled a{cursor:not-allowed}\\n\"], components: [{ type: DataTableHeaderComponent, selector: \"datatable-header\", inputs: [\"sortAscendingIcon\", \"sortDescendingIcon\", \"sortUnsetIcon\", \"scrollbarH\", \"dealsWithGroup\", \"targetMarkerTemplate\", \"innerWidth\", \"sorts\", \"sortType\", \"allRowsSelected\", \"selectionType\", \"reorderable\", \"headerHeight\", \"columns\", \"offsetX\"], outputs: [\"sort\", \"reorder\", \"resize\", \"select\", \"columnContextmenu\"] }, { type: DataTableBodyComponent, selector: \"datatable-body\", inputs: [\"scrollbarV\", \"scrollbarH\", \"loadingIndicator\", \"externalPaging\", \"rowHeight\", \"offsetX\", \"emptyMessage\", \"selectionType\", \"selected\", \"rowIdentity\", \"rowDetail\", \"groupHeader\", \"selectCheck\", \"displayCheck\", \"trackByProp\", \"rowClass\", \"groupedRows\", \"groupExpansionDefault\", \"innerWidth\", \"groupRowsBy\", \"virtualization\", \"summaryRow\", \"summaryPosition\", \"summaryHeight\", \"pageSize\", \"rows\", \"columns\", \"offset\", \"rowCount\", \"bodyHeight\"], outputs: [\"scroll\", \"page\", \"activate\", \"select\", \"detailToggle\", \"rowContextmenu\", \"treeAction\"] }, { type: DataTableFooterComponent, selector: \"datatable-footer\", inputs: [\"footerHeight\", \"rowCount\", \"pageSize\", \"offset\", \"pagerLeftArrowIcon\", \"pagerRightArrowIcon\", \"pagerPreviousIcon\", \"pagerNextIcon\", \"totalMessage\", \"footerTemplate\", \"selectedCount\", \"selectedMessage\"], outputs: [\"page\"] }], directives: [{ type: VisibilityDirective, selector: \"[visibilityObserver]\", outputs: [\"visible\"] }, { type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }], pipes: { \"async\": i1.AsyncPipe }, changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None });\n__decorate([\n    throttleable(5)\n], DatatableComponent.prototype, \"onWindowResize\", null);\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: DatatableComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ngx-datatable', changeDetection: ChangeDetectionStrategy.OnPush, encapsulation: ViewEncapsulation.None, host: {\n                        class: 'ngx-datatable'\n                    }, template: \"<div role=\\\"table\\\" visibilityObserver (visible)=\\\"recalculate()\\\">\\n  <datatable-header\\n    role=\\\"rowgroup\\\"\\n    *ngIf=\\\"headerHeight\\\"\\n    [sorts]=\\\"sorts\\\"\\n    [sortType]=\\\"sortType\\\"\\n    [scrollbarH]=\\\"scrollbarH\\\"\\n    [innerWidth]=\\\"_innerWidth\\\"\\n    [offsetX]=\\\"_offsetX | async\\\"\\n    [dealsWithGroup]=\\\"groupedRows !== undefined\\\"\\n    [columns]=\\\"_internalColumns\\\"\\n    [headerHeight]=\\\"headerHeight\\\"\\n    [reorderable]=\\\"reorderable\\\"\\n    [targetMarkerTemplate]=\\\"targetMarkerTemplate\\\"\\n    [sortAscendingIcon]=\\\"cssClasses.sortAscending\\\"\\n    [sortDescendingIcon]=\\\"cssClasses.sortDescending\\\"\\n    [sortUnsetIcon]=\\\"cssClasses.sortUnset\\\"\\n    [allRowsSelected]=\\\"allRowsSelected\\\"\\n    [selectionType]=\\\"selectionType\\\"\\n    (sort)=\\\"onColumnSort($event)\\\"\\n    (resize)=\\\"onColumnResize($event)\\\"\\n    (reorder)=\\\"onColumnReorder($event)\\\"\\n    (select)=\\\"onHeaderSelect($event)\\\"\\n    (columnContextmenu)=\\\"onColumnContextmenu($event)\\\"\\n  >\\n  </datatable-header>\\n  <datatable-body\\n    role=\\\"rowgroup\\\"\\n    [groupRowsBy]=\\\"groupRowsBy\\\"\\n    [groupedRows]=\\\"groupedRows\\\"\\n    [rows]=\\\"_internalRows\\\"\\n    [groupExpansionDefault]=\\\"groupExpansionDefault\\\"\\n    [scrollbarV]=\\\"scrollbarV\\\"\\n    [scrollbarH]=\\\"scrollbarH\\\"\\n    [virtualization]=\\\"virtualization\\\"\\n    [loadingIndicator]=\\\"loadingIndicator\\\"\\n    [externalPaging]=\\\"externalPaging\\\"\\n    [rowHeight]=\\\"rowHeight\\\"\\n    [rowCount]=\\\"rowCount\\\"\\n    [offset]=\\\"offset\\\"\\n    [trackByProp]=\\\"trackByProp\\\"\\n    [columns]=\\\"_internalColumns\\\"\\n    [pageSize]=\\\"pageSize\\\"\\n    [offsetX]=\\\"_offsetX | async\\\"\\n    [rowDetail]=\\\"rowDetail\\\"\\n    [groupHeader]=\\\"groupHeader\\\"\\n    [selected]=\\\"selected\\\"\\n    [innerWidth]=\\\"_innerWidth\\\"\\n    [bodyHeight]=\\\"bodyHeight\\\"\\n    [selectionType]=\\\"selectionType\\\"\\n    [emptyMessage]=\\\"messages.emptyMessage\\\"\\n    [rowIdentity]=\\\"rowIdentity\\\"\\n    [rowClass]=\\\"rowClass\\\"\\n    [selectCheck]=\\\"selectCheck\\\"\\n    [displayCheck]=\\\"displayCheck\\\"\\n    [summaryRow]=\\\"summaryRow\\\"\\n    [summaryHeight]=\\\"summaryHeight\\\"\\n    [summaryPosition]=\\\"summaryPosition\\\"\\n    (page)=\\\"onBodyPage($event)\\\"\\n    (activate)=\\\"activate.emit($event)\\\"\\n    (rowContextmenu)=\\\"onRowContextmenu($event)\\\"\\n    (select)=\\\"onBodySelect($event)\\\"\\n    (scroll)=\\\"onBodyScroll($event)\\\"\\n    (treeAction)=\\\"onTreeAction($event)\\\"\\n  >\\n  </datatable-body>\\n  <datatable-footer\\n    *ngIf=\\\"footerHeight\\\"\\n    [rowCount]=\\\"rowCount\\\"\\n    [pageSize]=\\\"pageSize\\\"\\n    [offset]=\\\"offset\\\"\\n    [footerHeight]=\\\"footerHeight\\\"\\n    [footerTemplate]=\\\"footer\\\"\\n    [totalMessage]=\\\"messages.totalMessage\\\"\\n    [pagerLeftArrowIcon]=\\\"cssClasses.pagerLeftArrow\\\"\\n    [pagerRightArrowIcon]=\\\"cssClasses.pagerRightArrow\\\"\\n    [pagerPreviousIcon]=\\\"cssClasses.pagerPrevious\\\"\\n    [selectedCount]=\\\"selected.length\\\"\\n    [selectedMessage]=\\\"!!selectionType && messages.selectedMessage\\\"\\n    [pagerNextIcon]=\\\"cssClasses.pagerNext\\\"\\n    (page)=\\\"onFooterPage($event)\\\"\\n  >\\n  </datatable-footer>\\n</div>\\n\", styles: [\".ngx-datatable{display:block;overflow:hidden;justify-content:center;position:relative;transform:translate(0)}.ngx-datatable [hidden]{display:none!important}.ngx-datatable *,.ngx-datatable *:before,.ngx-datatable *:after{box-sizing:border-box}.ngx-datatable.scroll-vertical .datatable-body{overflow-y:auto}.ngx-datatable.scroll-vertical.virtualized .datatable-body .datatable-row-wrapper{position:absolute}.ngx-datatable.scroll-horz .datatable-body{overflow-x:auto;-webkit-overflow-scrolling:touch}.ngx-datatable.fixed-header .datatable-header .datatable-header-inner{white-space:nowrap}.ngx-datatable.fixed-header .datatable-header .datatable-header-inner .datatable-header-cell{white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.ngx-datatable.fixed-row .datatable-scroll,.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row{white-space:nowrap}.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row .datatable-body-cell,.ngx-datatable.fixed-row .datatable-scroll .datatable-body-row .datatable-body-group-cell{overflow:hidden;white-space:nowrap;text-overflow:ellipsis}.ngx-datatable .datatable-body-row,.ngx-datatable .datatable-row-center,.ngx-datatable .datatable-header-inner{display:flex;flex-direction:row;-o-flex-flow:row;flex-flow:row}.ngx-datatable .datatable-body-cell,.ngx-datatable .datatable-header-cell{overflow-x:hidden;vertical-align:top;display:inline-block;line-height:1.625}.ngx-datatable .datatable-body-cell:focus,.ngx-datatable .datatable-header-cell:focus{outline:none}.ngx-datatable .datatable-row-left,.ngx-datatable .datatable-row-right{z-index:9}.ngx-datatable .datatable-row-left,.ngx-datatable .datatable-row-center,.ngx-datatable .datatable-row-group,.ngx-datatable .datatable-row-right{position:relative}.ngx-datatable .datatable-header{display:block;overflow:hidden}.ngx-datatable .datatable-header .datatable-header-inner{align-items:stretch;-webkit-align-items:stretch}.ngx-datatable .datatable-header .datatable-header-cell{position:relative;display:inline-block}.ngx-datatable .datatable-header .datatable-header-cell.sortable .datatable-header-cell-wrapper{cursor:pointer}.ngx-datatable .datatable-header .datatable-header-cell.longpress .datatable-header-cell-wrapper{cursor:move}.ngx-datatable .datatable-header .datatable-header-cell .sort-btn{line-height:100%;vertical-align:middle;display:inline-block;cursor:pointer}.ngx-datatable .datatable-header .datatable-header-cell .resize-handle,.ngx-datatable .datatable-header .datatable-header-cell .resize-handle--not-resizable{display:inline-block;position:absolute;right:0;top:0;bottom:0;width:5px;padding:0 4px;visibility:hidden}.ngx-datatable .datatable-header .datatable-header-cell .resize-handle{cursor:ew-resize}.ngx-datatable .datatable-header .datatable-header-cell.resizeable:hover .resize-handle,.ngx-datatable .datatable-header .datatable-header-cell:hover .resize-handle--not-resizable{visibility:visible}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker{position:absolute;top:0;bottom:0}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker.dragFromLeft{right:0}.ngx-datatable .datatable-header .datatable-header-cell .targetMarker.dragFromRight{left:0}.ngx-datatable .datatable-header .datatable-header-cell .datatable-header-cell-template-wrap{height:inherit}.ngx-datatable .datatable-body{position:relative;z-index:10;display:block}.ngx-datatable .datatable-body .datatable-scroll{display:inline-block}.ngx-datatable .datatable-body .datatable-row-detail{overflow-y:hidden}.ngx-datatable .datatable-body .datatable-row-wrapper{display:flex;flex-direction:column}.ngx-datatable .datatable-body .datatable-body-row{outline:none}.ngx-datatable .datatable-body .datatable-body-row>div{display:flex}.ngx-datatable .datatable-footer{display:block;width:100%;overflow:auto}.ngx-datatable .datatable-footer .datatable-footer-inner{display:flex;align-items:center;width:100%}.ngx-datatable .datatable-footer .selected-count .page-count{flex:1 1 40%}.ngx-datatable .datatable-footer .selected-count .datatable-pager{flex:1 1 60%}.ngx-datatable .datatable-footer .page-count{flex:1 1 20%}.ngx-datatable .datatable-footer .datatable-pager{flex:1 1 80%;text-align:right}.ngx-datatable .datatable-footer .datatable-pager .pager,.ngx-datatable .datatable-footer .datatable-pager .pager li{padding:0;margin:0;display:inline-block;list-style:none}.ngx-datatable .datatable-footer .datatable-pager .pager li,.ngx-datatable .datatable-footer .datatable-pager .pager li a{outline:none}.ngx-datatable .datatable-footer .datatable-pager .pager li a{cursor:pointer;display:inline-block}.ngx-datatable .datatable-footer .datatable-pager .pager li.disabled a{cursor:not-allowed}\\n\"] }]\n        }], ctorParameters: function () { return [{ type: ScrollbarHelper, decorators: [{\n                    type: SkipSelf\n                }] }, { type: DimensionsHelper, decorators: [{\n                    type: SkipSelf\n                }] }, { type: i0.ChangeDetectorRef }, { type: i0.ElementRef }, { type: i0.KeyValueDiffers }, { type: ColumnChangesService }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: ['configuration']\n                }] }]; }, propDecorators: { targetMarkerTemplate: [{\n                type: Input\n            }], rows: [{\n                type: Input\n            }], groupRowsBy: [{\n                type: Input\n            }], groupedRows: [{\n                type: Input\n            }], columns: [{\n                type: Input\n            }], selected: [{\n                type: Input\n            }], scrollbarV: [{\n                type: Input\n            }], scrollbarH: [{\n                type: Input\n            }], rowHeight: [{\n                type: Input\n            }], columnMode: [{\n                type: Input\n            }], headerHeight: [{\n                type: Input\n            }], footerHeight: [{\n                type: Input\n            }], externalPaging: [{\n                type: Input\n            }], externalSorting: [{\n                type: Input\n            }], limit: [{\n                type: Input\n            }], count: [{\n                type: Input\n            }], offset: [{\n                type: Input\n            }], loadingIndicator: [{\n                type: Input\n            }], selectionType: [{\n                type: Input\n            }], reorderable: [{\n                type: Input\n            }], swapColumns: [{\n                type: Input\n            }], sortType: [{\n                type: Input\n            }], sorts: [{\n                type: Input\n            }], cssClasses: [{\n                type: Input\n            }], messages: [{\n                type: Input\n            }], rowClass: [{\n                type: Input\n            }], selectCheck: [{\n                type: Input\n            }], displayCheck: [{\n                type: Input\n            }], groupExpansionDefault: [{\n                type: Input\n            }], trackByProp: [{\n                type: Input\n            }], selectAllRowsOnPage: [{\n                type: Input\n            }], virtualization: [{\n                type: Input\n            }], treeFromRelation: [{\n                type: Input\n            }], treeToRelation: [{\n                type: Input\n            }], summaryRow: [{\n                type: Input\n            }], summaryHeight: [{\n                type: Input\n            }], summaryPosition: [{\n                type: Input\n            }], scroll: [{\n                type: Output\n            }], activate: [{\n                type: Output\n            }], select: [{\n                type: Output\n            }], sort: [{\n                type: Output\n            }], page: [{\n                type: Output\n            }], reorder: [{\n                type: Output\n            }], resize: [{\n                type: Output\n            }], tableContextmenu: [{\n                type: Output\n            }], treeAction: [{\n                type: Output\n            }], isFixedHeader: [{\n                type: HostBinding,\n                args: ['class.fixed-header']\n            }], isFixedRow: [{\n                type: HostBinding,\n                args: ['class.fixed-row']\n            }], isVertScroll: [{\n                type: HostBinding,\n                args: ['class.scroll-vertical']\n            }], isVirtualized: [{\n                type: HostBinding,\n                args: ['class.virtualized']\n            }], isHorScroll: [{\n                type: HostBinding,\n                args: ['class.scroll-horz']\n            }], isSelectable: [{\n                type: HostBinding,\n                args: ['class.selectable']\n            }], isCheckboxSelection: [{\n                type: HostBinding,\n                args: ['class.checkbox-selection']\n            }], isCellSelection: [{\n                type: HostBinding,\n                args: ['class.cell-selection']\n            }], isSingleSelection: [{\n                type: HostBinding,\n                args: ['class.single-selection']\n            }], isMultiSelection: [{\n                type: HostBinding,\n                args: ['class.multi-selection']\n            }], isMultiClickSelection: [{\n                type: HostBinding,\n                args: ['class.multi-click-selection']\n            }], columnTemplates: [{\n                type: ContentChildren,\n                args: [DataTableColumnDirective]\n            }], rowDetail: [{\n                type: ContentChild,\n                args: [DatatableRowDetailDirective]\n            }], groupHeader: [{\n                type: ContentChild,\n                args: [DatatableGroupHeaderDirective]\n            }], footer: [{\n                type: ContentChild,\n                args: [DatatableFooterDirective]\n            }], bodyComponent: [{\n                type: ViewChild,\n                args: [DataTableBodyComponent]\n            }], headerComponent: [{\n                type: ViewChild,\n                args: [DataTableHeaderComponent]\n            }], rowIdentity: [{\n                type: Input\n            }], onWindowResize: [{\n                type: HostListener,\n                args: ['window:resize']\n            }] } });\n\nclass NgxDatatableModule {\n    /**\n     * Configure global configuration via INgxDatatableConfig\n     * @param configuration\n     */\n    static forRoot(configuration) {\n        return {\n            ngModule: NgxDatatableModule,\n            providers: [{ provide: 'configuration', useValue: configuration }]\n        };\n    }\n}\nNgxDatatableModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgxDatatableModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nNgxDatatableModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgxDatatableModule, declarations: [DataTableFooterTemplateDirective,\n        VisibilityDirective,\n        DraggableDirective,\n        ResizeableDirective,\n        OrderableDirective,\n        LongPressDirective,\n        ScrollerComponent,\n        DatatableComponent,\n        DataTableColumnDirective,\n        DataTableHeaderComponent,\n        DataTableHeaderCellComponent,\n        DataTableBodyComponent,\n        DataTableFooterComponent,\n        DataTablePagerComponent,\n        ProgressBarComponent,\n        DataTableBodyRowComponent,\n        DataTableRowWrapperComponent,\n        DatatableRowDetailDirective,\n        DatatableGroupHeaderDirective,\n        DatatableRowDetailTemplateDirective,\n        DataTableBodyCellComponent,\n        DataTableSelectionComponent,\n        DataTableColumnHeaderDirective,\n        DataTableColumnCellDirective,\n        DataTableColumnCellTreeToggle,\n        DatatableFooterDirective,\n        DatatableGroupHeaderTemplateDirective,\n        DataTableSummaryRowComponent], imports: [CommonModule], exports: [DatatableComponent,\n        DatatableRowDetailDirective,\n        DatatableGroupHeaderDirective,\n        DatatableRowDetailTemplateDirective,\n        DataTableColumnDirective,\n        DataTableColumnHeaderDirective,\n        DataTableColumnCellDirective,\n        DataTableColumnCellTreeToggle,\n        DataTableFooterTemplateDirective,\n        DatatableFooterDirective,\n        DataTablePagerComponent,\n        DatatableGroupHeaderTemplateDirective] });\nNgxDatatableModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgxDatatableModule, providers: [ScrollbarHelper, DimensionsHelper, ColumnChangesService], imports: [[CommonModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: NgxDatatableModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule],\n                    providers: [ScrollbarHelper, DimensionsHelper, ColumnChangesService],\n                    declarations: [\n                        DataTableFooterTemplateDirective,\n                        VisibilityDirective,\n                        DraggableDirective,\n                        ResizeableDirective,\n                        OrderableDirective,\n                        LongPressDirective,\n                        ScrollerComponent,\n                        DatatableComponent,\n                        DataTableColumnDirective,\n                        DataTableHeaderComponent,\n                        DataTableHeaderCellComponent,\n                        DataTableBodyComponent,\n                        DataTableFooterComponent,\n                        DataTablePagerComponent,\n                        ProgressBarComponent,\n                        DataTableBodyRowComponent,\n                        DataTableRowWrapperComponent,\n                        DatatableRowDetailDirective,\n                        DatatableGroupHeaderDirective,\n                        DatatableRowDetailTemplateDirective,\n                        DataTableBodyCellComponent,\n                        DataTableSelectionComponent,\n                        DataTableColumnHeaderDirective,\n                        DataTableColumnCellDirective,\n                        DataTableColumnCellTreeToggle,\n                        DatatableFooterDirective,\n                        DatatableGroupHeaderTemplateDirective,\n                        DataTableSummaryRowComponent\n                    ],\n                    exports: [\n                        DatatableComponent,\n                        DatatableRowDetailDirective,\n                        DatatableGroupHeaderDirective,\n                        DatatableRowDetailTemplateDirective,\n                        DataTableColumnDirective,\n                        DataTableColumnHeaderDirective,\n                        DataTableColumnCellDirective,\n                        DataTableColumnCellTreeToggle,\n                        DataTableFooterTemplateDirective,\n                        DatatableFooterDirective,\n                        DataTablePagerComponent,\n                        DatatableGroupHeaderTemplateDirective\n                    ]\n                }]\n        }] });\n\nvar ClickType;\n(function (ClickType) {\n    ClickType[\"single\"] = \"single\";\n    ClickType[\"double\"] = \"double\";\n})(ClickType || (ClickType = {}));\n\nif (typeof document !== 'undefined' && !document.elementsFromPoint) {\n    document.elementsFromPoint = elementsFromPoint;\n}\n/*tslint:disable*/\n/**\n * Polyfill for `elementsFromPoint`\n *\n * https://developer.mozilla.org/en-US/docs/Web/API/Document/elementsFromPoint\n * https://gist.github.com/iddan/54d5d9e58311b0495a91bf06de661380\n * https://gist.github.com/oslego/7265412\n */\nfunction elementsFromPoint(x, y) {\n    const elements = [];\n    const previousPointerEvents = [];\n    let current; // TODO: window.getComputedStyle should be used with inferred type (Element)\n    let i;\n    let d;\n    //if (document === undefined) return elements;\n    // get all elements via elementFromPoint, and remove them from hit-testing in order\n    while ((current = document.elementFromPoint(x, y)) && elements.indexOf(current) === -1 && current != null) {\n        // push the element and its current style\n        elements.push(current);\n        previousPointerEvents.push({\n            value: current.style.getPropertyValue('pointer-events'),\n            priority: current.style.getPropertyPriority('pointer-events')\n        });\n        // add \"pointer-events: none\", to get to the underlying element\n        current.style.setProperty('pointer-events', 'none', 'important');\n    }\n    // restore the previous pointer-events values\n    for (i = previousPointerEvents.length; (d = previousPointerEvents[--i]);) {\n        elements[i].style.setProperty('pointer-events', d.value ? d.value : '', d.priority);\n    }\n    // return our results\n    return elements;\n}\n/*tslint:enable*/\n\n/*\n * Public API Surface of ngx-datatable\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { ClickType, ColumnChangesService, ColumnMode, ContextmenuType, DataTableBodyCellComponent, DataTableBodyComponent, DataTableBodyRowComponent, DataTableColumnCellDirective, DataTableColumnCellTreeToggle, DataTableColumnDirective, DataTableColumnHeaderDirective, DataTableFooterComponent, DataTableFooterTemplateDirective, DataTableHeaderCellComponent, DataTableHeaderComponent, DataTablePagerComponent, DataTableRowWrapperComponent, DataTableSelectionComponent, DataTableSummaryRowComponent, DatatableComponent, DatatableFooterDirective, DatatableGroupHeaderDirective, DatatableGroupHeaderTemplateDirective, DatatableRowDetailDirective, DatatableRowDetailTemplateDirective, DimensionsHelper, DraggableDirective, Keys, LongPressDirective, NgxDatatableModule, OrderableDirective, ProgressBarComponent, ResizeableDirective, RowHeightCache, ScrollbarHelper, ScrollerComponent, SelectionType, SortDirection, SortType, VisibilityDirective, adjustColumnWidths, camelCase, columnGroupWidths, columnTotalWidth, columnsByPin, columnsByPinArr, columnsTotalWidth, deCamelCase, deepValueGetter, elementsFromPoint, emptyStringGetter, forceFillColumnWidths, getTotalFlexGrow, getVendorPrefixedName, getterForProp, groupRowsByParents, id, isNullOrUndefined, nextSortDir, numericIndexGetter, optionalGetterForProp, orderByComparator, selectRows, selectRowsBetween, setColumnDefaults, shallowValueGetter, sortRows, throttle, throttleable, translateTemplates, translateXY };\n"],"x_google_ignoreList":[0]}