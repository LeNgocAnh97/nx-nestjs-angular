{"version":3,"file":"default-node_modules_ng-zorro-antd_fesm2022_ng-zorro-antd-typography_mjs.js","mappings":"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","names":["PendingCopy","constructor","text","_document","this","textarea","_textarea","createElement","styles","style","position","top","opacity","left","setAttribute","value","readOnly","fullscreenElement","body","appendChild","copy","successful","currentFocus","activeElement","select","setSelectionRange","length","execCommand","focus","destroy","remove","undefined","Clipboard","document","pendingCopy","beginCopy","static","ɵfac","t","i0","DOCUMENT","ɵprov","token","factory","providedIn","ClipboardModule","ɵmod","type","ɵinj","NzTransButtonDirective","ɵdir","selectors","hostVars","hostBindings","rf","ctx","NzTransButtonModule","imports","CommonModule","NzTextCopyComponent_ng_container_1_Template","icon_r1","$implicit","_c0","NzTextEditComponent_ng_template_0_Template","_r5","ctx_r4","confirm","ctx_r6","NzTextEditComponent_ng_template_1_ng_container_1_Template","icon_r8","NzTextEditComponent_ng_template_1_Template","_r10","ctx_r9","onClick","ctx_r2","tooltip","locale","edit","icon","_c1","_c2","_c3","NzTypographyComponent_ng_template_0_ng_content_0_Template","NzTypographyComponent_ng_template_0_Template","content_r5","content","NzTypographyComponent_ng_container_2_ng_container_1_ng_template_1_Template","NzTypographyComponent_ng_container_2_ng_container_1_ng_container_2_Template","ctx_r11","nzSuffix","_c4","a0","NzTypographyComponent_ng_container_2_ng_container_1_Template","ctx_r7","_r0","nzContent","NzTypographyComponent_ng_container_2_ng_template_2_ng_container_2_Template","ctx_r13","ellipsisStr","NzTypographyComponent_ng_container_2_ng_template_2_ng_container_3_Template","ctx_r14","NzTypographyComponent_ng_container_2_ng_template_2_a_4_Template","_r18","ctx_r17","onExpand","ctx_r15","expand","NzTypographyComponent_ng_container_2_ng_template_2_Template","isEllipsis","nzExpandable","NzTypographyComponent_ng_container_2_Template","_r8","expanded","hasOperationsWithEllipsis","nzEllipsisRows","hasEllipsisObservers","canCssEllipsis","NzTypographyComponent_nz_text_edit_3_Template","_r20","$event","ctx_r19","onEndEditing","ctx_r21","onStartEditing","ctx_r3","nzEditIcon","nzEditTooltip","NzTypographyComponent_nz_text_copy_4_Template","_r23","ctx_r22","onTextCopy","copyText","nzCopyTooltips","nzCopyIcons","_c5","NzTextCopyComponent","host","cdr","clipboard","i18n","copied","copyId","nativeElement","copyTooltip","copedTooltip","copyIcon","copedIcon","destroy$","Subject","icons","textCopy","EventEmitter","ngOnInit","localeChange","pipe","takeUntil","subscribe","getLocaleData","updateTooltips","markForCheck","ngOnChanges","changes","tooltips","updateIcons","ngOnDestroy","clearTimeout","next","complete","detectChanges","emit","onCopied","setTimeout","Array","isArray","i1","i2","ɵcmp","inputs","outputs","exportAs","features","decls","vars","consts","template","dependencies","i3","i4","i5","i6","encapsulation","changeDetection","NzTextEditComponent","textarea$","ngZone","editing","startEditing","endEditing","BehaviorSubject","switchMap","Observable","subscriber","runOutsideAngular","fromEvent","EMPTY","event","keyCode","ESCAPE","ENTER","run","onCancel","onEnter","currentText","target","beforeText","focusAndSetValue","stopPropagation","preventDefault","onStable$","isStable","from","Promise","resolve","onStable","take","withLatestFrom","autosizeDirective","resizeToFitContent","i2$1","viewQuery","NzAutosizeDirective","_t","first","NzDestroyService","_r1","i6$1","i6$2","NzTypographyComponent","nzOnEllipsis","observers","nzEllipsis","cssEllipsis","nzCopyable","nzEditable","nzCopyText","nzConfigService","viewContainerRef","renderer","platform","resizeService","directionality","_nzModuleName","nzDisabled","nzContentChange","nzCopy","nzExpandChange","expandableBtnElementCache","dir","viewInit","rfaId","windowResizeSubscription","Subscription","renderOnNextFrame","canUseCSSEllipsis","isStyleSupport","cancelRequestAnimationFrame","isBrowser","reqAnimFrame","syncEllipsis","getOriginContentViewRef","viewRef","createEmbeddedView","contentTemplate","removeView","indexOf","fixedNodes","textCopyRef","textEditRef","filter","e","map","expandableBtnElement","getExpandableBtnElement","push","contentNodes","ellipsis","measure","rootNodes","ellipsisText","ellipsisContainerNativeElement","ellipsisContainer","firstChild","removeChild","forEach","n","cloneNode","expandText","cache","innerText","el","className","renderAndSubscribeWindowResize","unsubscribe","change","direction","ngAfterViewInit","i1$1","i2$2","i5$1","expandableBtn","nzType","ngContentSelectors","__decorate","InputBoolean","prototype","WithConfig","InputNumber","NzTypographyModule","BidiModule","NzIconModule","NzToolTipModule","NzInputModule","NzI18nModule","NzOutletModule","PlatformModule"],"sourceRoot":"webpack:///","sources":["./node_modules/@angular/cdk/fesm2022/clipboard.mjs","./node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-core-trans-button.mjs","./node_modules/ng-zorro-antd/fesm2022/ng-zorro-antd-typography.mjs"],"sourcesContent":["import { DOCUMENT } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Injectable, Inject, InjectionToken, EventEmitter, Directive, Optional, Input, Output, NgModule } from '@angular/core';\n\n/**\n * A pending copy-to-clipboard operation.\n *\n * The implementation of copying text to the clipboard modifies the DOM and\n * forces a re-layout. This re-layout can take too long if the string is large,\n * causing the execCommand('copy') to happen too long after the user clicked.\n * This results in the browser refusing to copy. This object lets the\n * re-layout happen in a separate tick from copying by providing a copy function\n * that can be called later.\n *\n * Destroy must be called when no longer in use, regardless of whether `copy` is\n * called.\n */\nclass PendingCopy {\n    constructor(text, _document) {\n        this._document = _document;\n        const textarea = (this._textarea = this._document.createElement('textarea'));\n        const styles = textarea.style;\n        // Hide the element for display and accessibility. Set a fixed position so the page layout\n        // isn't affected. We use `fixed` with `top: 0`, because focus is moved into the textarea\n        // for a split second and if it's off-screen, some browsers will attempt to scroll it into view.\n        styles.position = 'fixed';\n        styles.top = styles.opacity = '0';\n        styles.left = '-999em';\n        textarea.setAttribute('aria-hidden', 'true');\n        textarea.value = text;\n        // Making the textarea `readonly` prevents the screen from jumping on iOS Safari (see #25169).\n        textarea.readOnly = true;\n        // The element needs to be inserted into the fullscreen container, if the page\n        // is in fullscreen mode, otherwise the browser won't execute the copy command.\n        (this._document.fullscreenElement || this._document.body).appendChild(textarea);\n    }\n    /** Finishes copying the text. */\n    copy() {\n        const textarea = this._textarea;\n        let successful = false;\n        try {\n            // Older browsers could throw if copy is not supported.\n            if (textarea) {\n                const currentFocus = this._document.activeElement;\n                textarea.select();\n                textarea.setSelectionRange(0, textarea.value.length);\n                successful = this._document.execCommand('copy');\n                if (currentFocus) {\n                    currentFocus.focus();\n                }\n            }\n        }\n        catch {\n            // Discard error.\n            // Initial setting of {@code successful} will represent failure here.\n        }\n        return successful;\n    }\n    /** Cleans up DOM changes used to perform the copy operation. */\n    destroy() {\n        const textarea = this._textarea;\n        if (textarea) {\n            textarea.remove();\n            this._textarea = undefined;\n        }\n    }\n}\n\n/**\n * A service for copying text to the clipboard.\n */\nclass Clipboard {\n    constructor(document) {\n        this._document = document;\n    }\n    /**\n     * Copies the provided text into the user's clipboard.\n     *\n     * @param text The string to copy.\n     * @returns Whether the operation was successful.\n     */\n    copy(text) {\n        const pendingCopy = this.beginCopy(text);\n        const successful = pendingCopy.copy();\n        pendingCopy.destroy();\n        return successful;\n    }\n    /**\n     * Prepares a string to be copied later. This is useful for large strings\n     * which take too long to successfully render and be copied in the same tick.\n     *\n     * The caller must call `destroy` on the returned `PendingCopy`.\n     *\n     * @param text The string to copy.\n     * @returns the pending copy operation.\n     */\n    beginCopy(text) {\n        return new PendingCopy(text, this._document);\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: Clipboard, deps: [{ token: DOCUMENT }], target: i0.ɵɵFactoryTarget.Injectable }); }\n    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: Clipboard, providedIn: 'root' }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: Clipboard, decorators: [{\n            type: Injectable,\n            args: [{ providedIn: 'root' }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }]; } });\n\n/** Injection token that can be used to provide the default options to `CdkCopyToClipboard`. */\nconst CDK_COPY_TO_CLIPBOARD_CONFIG = new InjectionToken('CDK_COPY_TO_CLIPBOARD_CONFIG');\n/**\n * Provides behavior for a button that when clicked copies content into user's\n * clipboard.\n */\nclass CdkCopyToClipboard {\n    constructor(_clipboard, _ngZone, config) {\n        this._clipboard = _clipboard;\n        this._ngZone = _ngZone;\n        /** Content to be copied. */\n        this.text = '';\n        /**\n         * How many times to attempt to copy the text. This may be necessary for longer text, because\n         * the browser needs time to fill an intermediate textarea element and copy the content.\n         */\n        this.attempts = 1;\n        /**\n         * Emits when some text is copied to the clipboard. The\n         * emitted value indicates whether copying was successful.\n         */\n        this.copied = new EventEmitter();\n        /** Copies that are currently being attempted. */\n        this._pending = new Set();\n        if (config && config.attempts != null) {\n            this.attempts = config.attempts;\n        }\n    }\n    /** Copies the current text to the clipboard. */\n    copy(attempts = this.attempts) {\n        if (attempts > 1) {\n            let remainingAttempts = attempts;\n            const pending = this._clipboard.beginCopy(this.text);\n            this._pending.add(pending);\n            const attempt = () => {\n                const successful = pending.copy();\n                if (!successful && --remainingAttempts && !this._destroyed) {\n                    // We use 1 for the timeout since it's more predictable when flushing in unit tests.\n                    this._currentTimeout = this._ngZone.runOutsideAngular(() => setTimeout(attempt, 1));\n                }\n                else {\n                    this._currentTimeout = null;\n                    this._pending.delete(pending);\n                    pending.destroy();\n                    this.copied.emit(successful);\n                }\n            };\n            attempt();\n        }\n        else {\n            this.copied.emit(this._clipboard.copy(this.text));\n        }\n    }\n    ngOnDestroy() {\n        if (this._currentTimeout) {\n            clearTimeout(this._currentTimeout);\n        }\n        this._pending.forEach(copy => copy.destroy());\n        this._pending.clear();\n        this._destroyed = true;\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkCopyToClipboard, deps: [{ token: Clipboard }, { token: i0.NgZone }, { token: CDK_COPY_TO_CLIPBOARD_CONFIG, optional: true }], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.1.1\", type: CdkCopyToClipboard, selector: \"[cdkCopyToClipboard]\", inputs: { text: [\"cdkCopyToClipboard\", \"text\"], attempts: [\"cdkCopyToClipboardAttempts\", \"attempts\"] }, outputs: { copied: \"cdkCopyToClipboardCopied\" }, host: { listeners: { \"click\": \"copy()\" } }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: CdkCopyToClipboard, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: '[cdkCopyToClipboard]',\n                    host: {\n                        '(click)': 'copy()',\n                    },\n                }]\n        }], ctorParameters: function () { return [{ type: Clipboard }, { type: i0.NgZone }, { type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CDK_COPY_TO_CLIPBOARD_CONFIG]\n                }] }]; }, propDecorators: { text: [{\n                type: Input,\n                args: ['cdkCopyToClipboard']\n            }], attempts: [{\n                type: Input,\n                args: ['cdkCopyToClipboardAttempts']\n            }], copied: [{\n                type: Output,\n                args: ['cdkCopyToClipboardCopied']\n            }] } });\n\nclass ClipboardModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ClipboardModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.1.1\", ngImport: i0, type: ClipboardModule, declarations: [CdkCopyToClipboard], exports: [CdkCopyToClipboard] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ClipboardModule }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.1.1\", ngImport: i0, type: ClipboardModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [CdkCopyToClipboard],\n                    exports: [CdkCopyToClipboard],\n                }]\n        }] });\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CDK_COPY_TO_CLIPBOARD_CONFIG, CdkCopyToClipboard, Clipboard, ClipboardModule, PendingCopy };\n","import { CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { Directive, NgModule } from '@angular/core';\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzTransButtonDirective {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: NzTransButtonDirective, deps: [], target: i0.ɵɵFactoryTarget.Directive }); }\n    static { this.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"14.0.0\", version: \"16.2.10\", type: NzTransButtonDirective, selector: \"button[nz-trans-button]\", host: { properties: { \"style.border\": \"\\\"0\\\"\", \"style.background\": \"\\\"transparent\\\"\", \"style.padding\": \"\\\"0\\\"\", \"style.line-height\": \"\\\"inherit\\\"\" } }, ngImport: i0 }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: NzTransButtonDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: 'button[nz-trans-button]',\n                    host: {\n                        '[style.border]': '\"0\"',\n                        '[style.background]': '\"transparent\"',\n                        '[style.padding]': '\"0\"',\n                        '[style.line-height]': '\"inherit\"'\n                    }\n                }]\n        }] });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzTransButtonModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: NzTransButtonModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.2.10\", ngImport: i0, type: NzTransButtonModule, declarations: [NzTransButtonDirective], imports: [CommonModule], exports: [NzTransButtonDirective] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: NzTransButtonModule, imports: [CommonModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: NzTransButtonModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [NzTransButtonDirective],\n                    exports: [NzTransButtonDirective],\n                    imports: [CommonModule]\n                }]\n        }] });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NzTransButtonDirective, NzTransButtonModule };\n","import * as i5$1 from '@angular/cdk/bidi';\nimport { BidiModule } from '@angular/cdk/bidi';\nimport * as i1 from '@angular/cdk/clipboard';\nimport { ClipboardModule } from '@angular/cdk/clipboard';\nimport * as i2$2 from '@angular/cdk/platform';\nimport { PlatformModule } from '@angular/cdk/platform';\nimport * as i6$1 from '@angular/common';\nimport { DOCUMENT, CommonModule } from '@angular/common';\nimport * as i0 from '@angular/core';\nimport { EventEmitter, Component, ChangeDetectionStrategy, ViewEncapsulation, Input, Output, ViewChild, Inject, Optional, NgModule } from '@angular/core';\nimport * as i6 from 'ng-zorro-antd/core/outlet';\nimport { NzOutletModule } from 'ng-zorro-antd/core/outlet';\nimport * as i5 from 'ng-zorro-antd/core/trans-button';\nimport { NzTransButtonModule } from 'ng-zorro-antd/core/trans-button';\nimport * as i2 from 'ng-zorro-antd/i18n';\nimport { NzI18nModule } from 'ng-zorro-antd/i18n';\nimport * as i3 from 'ng-zorro-antd/icon';\nimport { NzIconModule } from 'ng-zorro-antd/icon';\nimport * as i6$2 from 'ng-zorro-antd/input';\nimport { NzAutosizeDirective, NzInputModule } from 'ng-zorro-antd/input';\nimport * as i4 from 'ng-zorro-antd/tooltip';\nimport { NzToolTipModule } from 'ng-zorro-antd/tooltip';\nimport { Subject, BehaviorSubject, Observable, fromEvent, EMPTY, from, Subscription } from 'rxjs';\nimport { takeUntil, switchMap, take, withLatestFrom } from 'rxjs/operators';\nimport { ESCAPE, ENTER } from '@angular/cdk/keycodes';\nimport * as i2$1 from 'ng-zorro-antd/core/services';\nimport { NzDestroyService } from 'ng-zorro-antd/core/services';\nimport { __decorate } from 'tslib';\nimport * as i1$1 from 'ng-zorro-antd/core/config';\nimport { WithConfig } from 'ng-zorro-antd/core/config';\nimport { cancelRequestAnimationFrame, reqAnimFrame } from 'ng-zorro-antd/core/polyfill';\nimport { isStyleSupport, measure, InputBoolean, InputNumber } from 'ng-zorro-antd/core/util';\n\nclass NzTextCopyComponent {\n    constructor(host, cdr, clipboard, i18n) {\n        this.host = host;\n        this.cdr = cdr;\n        this.clipboard = clipboard;\n        this.i18n = i18n;\n        this.copied = false;\n        this.copyId = -1;\n        this.nativeElement = this.host.nativeElement;\n        this.copyTooltip = null;\n        this.copedTooltip = null;\n        this.copyIcon = 'copy';\n        this.copedIcon = 'check';\n        this.destroy$ = new Subject();\n        this.icons = ['copy', 'check'];\n        this.textCopy = new EventEmitter();\n    }\n    ngOnInit() {\n        this.i18n.localeChange.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            this.locale = this.i18n.getLocaleData('Text');\n            this.updateTooltips();\n            this.cdr.markForCheck();\n        });\n    }\n    ngOnChanges(changes) {\n        const { tooltips, icons } = changes;\n        if (tooltips) {\n            this.updateTooltips();\n        }\n        if (icons) {\n            this.updateIcons();\n        }\n    }\n    ngOnDestroy() {\n        clearTimeout(this.copyId);\n        this.destroy$.next(true);\n        this.destroy$.complete();\n    }\n    onClick() {\n        if (this.copied) {\n            return;\n        }\n        this.copied = true;\n        this.cdr.detectChanges();\n        const text = this.text;\n        this.textCopy.emit(text);\n        this.clipboard.copy(text);\n        this.onCopied();\n    }\n    onCopied() {\n        clearTimeout(this.copyId);\n        this.copyId = setTimeout(() => {\n            this.copied = false;\n            this.cdr.detectChanges();\n        }, 3000);\n    }\n    updateTooltips() {\n        if (this.tooltips === null) {\n            this.copedTooltip = null;\n            this.copyTooltip = null;\n        }\n        else if (Array.isArray(this.tooltips)) {\n            const [copyTooltip, copedTooltip] = this.tooltips;\n            this.copyTooltip = copyTooltip || this.locale?.copy;\n            this.copedTooltip = copedTooltip || this.locale?.copied;\n        }\n        else {\n            this.copyTooltip = this.locale?.copy;\n            this.copedTooltip = this.locale?.copied;\n        }\n        this.cdr.markForCheck();\n    }\n    updateIcons() {\n        const [copyIcon, copedIcon] = this.icons;\n        this.copyIcon = copyIcon;\n        this.copedIcon = copedIcon;\n        this.cdr.markForCheck();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: NzTextCopyComponent, deps: [{ token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i1.Clipboard }, { token: i2.NzI18nService }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.2.10\", type: NzTextCopyComponent, selector: \"nz-text-copy\", inputs: { text: \"text\", tooltips: \"tooltips\", icons: \"icons\" }, outputs: { textCopy: \"textCopy\" }, exportAs: [\"nzTextCopy\"], usesOnChanges: true, ngImport: i0, template: `\n    <button\n      type=\"button\"\n      nz-tooltip\n      nz-trans-button\n      [nzTooltipTitle]=\"copied ? copedTooltip : copyTooltip\"\n      class=\"ant-typography-copy\"\n      [class.ant-typography-copy-success]=\"copied\"\n      (click)=\"onClick()\"\n    >\n      <ng-container *nzStringTemplateOutlet=\"copied ? copedIcon : copyIcon; let icon\">\n        <span nz-icon [nzType]=\"icon\"></span>\n      </ng-container>\n    </button>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: i3.NzIconDirective, selector: \"[nz-icon]\", inputs: [\"nzSpin\", \"nzRotate\", \"nzType\", \"nzTheme\", \"nzTwotoneColor\", \"nzIconfont\"], exportAs: [\"nzIcon\"] }, { kind: \"directive\", type: i4.NzTooltipDirective, selector: \"[nz-tooltip]\", inputs: [\"nzTooltipTitle\", \"nzTooltipTitleContext\", \"nz-tooltip\", \"nzTooltipTrigger\", \"nzTooltipPlacement\", \"nzTooltipOrigin\", \"nzTooltipVisible\", \"nzTooltipMouseEnterDelay\", \"nzTooltipMouseLeaveDelay\", \"nzTooltipOverlayClassName\", \"nzTooltipOverlayStyle\", \"nzTooltipArrowPointAtCenter\", \"nzTooltipColor\"], outputs: [\"nzTooltipVisibleChange\"], exportAs: [\"nzTooltip\"] }, { kind: \"directive\", type: i5.NzTransButtonDirective, selector: \"button[nz-trans-button]\" }, { kind: \"directive\", type: i6.NzStringTemplateOutletDirective, selector: \"[nzStringTemplateOutlet]\", inputs: [\"nzStringTemplateOutletContext\", \"nzStringTemplateOutlet\"], exportAs: [\"nzStringTemplateOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: NzTextCopyComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'nz-text-copy',\n                    exportAs: 'nzTextCopy',\n                    template: `\n    <button\n      type=\"button\"\n      nz-tooltip\n      nz-trans-button\n      [nzTooltipTitle]=\"copied ? copedTooltip : copyTooltip\"\n      class=\"ant-typography-copy\"\n      [class.ant-typography-copy-success]=\"copied\"\n      (click)=\"onClick()\"\n    >\n      <ng-container *nzStringTemplateOutlet=\"copied ? copedIcon : copyIcon; let icon\">\n        <span nz-icon [nzType]=\"icon\"></span>\n      </ng-container>\n    </button>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    preserveWhitespaces: false\n                }]\n        }], ctorParameters: function () { return [{ type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i1.Clipboard }, { type: i2.NzI18nService }]; }, propDecorators: { text: [{\n                type: Input\n            }], tooltips: [{\n                type: Input\n            }], icons: [{\n                type: Input\n            }], textCopy: [{\n                type: Output\n            }] } });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzTextEditComponent {\n    set textarea(textarea) {\n        this.textarea$.next(textarea);\n    }\n    constructor(ngZone, host, cdr, i18n, destroy$) {\n        this.ngZone = ngZone;\n        this.host = host;\n        this.cdr = cdr;\n        this.i18n = i18n;\n        this.destroy$ = destroy$;\n        this.editing = false;\n        this.icon = 'edit';\n        this.startEditing = new EventEmitter();\n        this.endEditing = new EventEmitter(true);\n        this.nativeElement = this.host.nativeElement;\n        // We could've saved the textarea within some private property (e.g. `_textarea`) and have a getter,\n        // but having subject makes the code more reactive and cancellable (e.g. event listeners will be\n        // automatically removed and re-added through the `switchMap` below).\n        this.textarea$ = new BehaviorSubject(null);\n    }\n    ngOnInit() {\n        this.i18n.localeChange.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            this.locale = this.i18n.getLocaleData('Text');\n            this.cdr.markForCheck();\n        });\n        this.textarea$\n            .pipe(switchMap(textarea => \n        // Caretaker note: we explicitly should call `subscribe()` within the root zone.\n        // `runOutsideAngular(() => fromEvent(...))` will just create an observable within the root zone,\n        // but `addEventListener` is called when the `fromEvent` is subscribed.\n        textarea\n            ? new Observable(subscriber => this.ngZone.runOutsideAngular(() => fromEvent(textarea.nativeElement, 'keydown').subscribe(subscriber)))\n            : EMPTY), takeUntil(this.destroy$))\n            .subscribe(event => {\n            // Caretaker note: adding modifier at the end (for instance `(keydown.esc)`) will tell Angular to add\n            // an event listener through the `KeyEventsPlugin`, which always runs `ngZone.runGuarded()` internally.\n            // We're interested only in escape and enter keyboard buttons, otherwise Angular will run change detection\n            // on any `keydown` event.\n            if (event.keyCode !== ESCAPE && event.keyCode !== ENTER) {\n                return;\n            }\n            this.ngZone.run(() => {\n                if (event.keyCode === ESCAPE) {\n                    this.onCancel();\n                }\n                else {\n                    this.onEnter(event);\n                }\n                this.cdr.markForCheck();\n            });\n        });\n        this.textarea$\n            .pipe(switchMap(textarea => textarea\n            ? new Observable(subscriber => this.ngZone.runOutsideAngular(() => fromEvent(textarea.nativeElement, 'input').subscribe(subscriber)))\n            : EMPTY), takeUntil(this.destroy$))\n            .subscribe(event => {\n            this.currentText = event.target.value;\n        });\n    }\n    onClick() {\n        this.beforeText = this.text;\n        this.currentText = this.beforeText;\n        this.editing = true;\n        this.startEditing.emit();\n        this.focusAndSetValue();\n    }\n    confirm() {\n        this.editing = false;\n        this.endEditing.emit(this.currentText);\n    }\n    onEnter(event) {\n        event.stopPropagation();\n        event.preventDefault();\n        this.confirm();\n    }\n    onCancel() {\n        this.currentText = this.beforeText;\n        this.confirm();\n    }\n    focusAndSetValue() {\n        // Note: the zone may be nooped through `BootstrapOptions` when bootstrapping the root module. This means\n        // the `onStable` will never emit any value.\n        const onStable$ = this.ngZone.isStable ? from(Promise.resolve()) : this.ngZone.onStable.pipe(take(1));\n        // Normally this isn't in the zone, but it can cause performance regressions for apps\n        // using `zone-patch-rxjs` because it'll trigger a change detection when it unsubscribes.\n        this.ngZone.runOutsideAngular(() => {\n            onStable$.pipe(withLatestFrom(this.textarea$), takeUntil(this.destroy$)).subscribe(([, textarea]) => {\n                if (textarea) {\n                    textarea.nativeElement.focus();\n                    textarea.nativeElement.value = this.currentText || '';\n                    this.autosizeDirective.resizeToFitContent();\n                    this.cdr.markForCheck();\n                }\n            });\n        });\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: NzTextEditComponent, deps: [{ token: i0.NgZone }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i2.NzI18nService }, { token: i2$1.NzDestroyService }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.2.10\", type: NzTextEditComponent, selector: \"nz-text-edit\", inputs: { text: \"text\", icon: \"icon\", tooltip: \"tooltip\" }, outputs: { startEditing: \"startEditing\", endEditing: \"endEditing\" }, providers: [NzDestroyService], viewQueries: [{ propertyName: \"textarea\", first: true, predicate: [\"textarea\"], descendants: true }, { propertyName: \"autosizeDirective\", first: true, predicate: NzAutosizeDirective, descendants: true }], exportAs: [\"nzTextEdit\"], ngImport: i0, template: `\n    <ng-template [ngIf]=\"editing\" [ngIfElse]=\"notEditing\">\n      <textarea #textarea nz-input nzAutosize (blur)=\"confirm()\"></textarea>\n      <button nz-trans-button class=\"ant-typography-edit-content-confirm\" (click)=\"confirm()\">\n        <span nz-icon nzType=\"enter\"></span>\n      </button>\n    </ng-template>\n\n    <ng-template #notEditing>\n      <button\n        nz-tooltip\n        nz-trans-button\n        class=\"ant-typography-edit\"\n        [nzTooltipTitle]=\"tooltip === null ? null : tooltip || locale?.edit\"\n        (click)=\"onClick()\"\n      >\n        <ng-container *nzStringTemplateOutlet=\"icon; let icon\">\n          <span nz-icon [nzType]=\"icon\"></span>\n        </ng-container>\n      </button>\n    </ng-template>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: i6$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i3.NzIconDirective, selector: \"[nz-icon]\", inputs: [\"nzSpin\", \"nzRotate\", \"nzType\", \"nzTheme\", \"nzTwotoneColor\", \"nzIconfont\"], exportAs: [\"nzIcon\"] }, { kind: \"directive\", type: i4.NzTooltipDirective, selector: \"[nz-tooltip]\", inputs: [\"nzTooltipTitle\", \"nzTooltipTitleContext\", \"nz-tooltip\", \"nzTooltipTrigger\", \"nzTooltipPlacement\", \"nzTooltipOrigin\", \"nzTooltipVisible\", \"nzTooltipMouseEnterDelay\", \"nzTooltipMouseLeaveDelay\", \"nzTooltipOverlayClassName\", \"nzTooltipOverlayStyle\", \"nzTooltipArrowPointAtCenter\", \"nzTooltipColor\"], outputs: [\"nzTooltipVisibleChange\"], exportAs: [\"nzTooltip\"] }, { kind: \"directive\", type: i6$2.NzInputDirective, selector: \"input[nz-input],textarea[nz-input]\", inputs: [\"nzBorderless\", \"nzSize\", \"nzStepperless\", \"nzStatus\", \"disabled\"], exportAs: [\"nzInput\"] }, { kind: \"directive\", type: i6$2.NzAutosizeDirective, selector: \"textarea[nzAutosize]\", inputs: [\"nzAutosize\"], exportAs: [\"nzAutosize\"] }, { kind: \"directive\", type: i5.NzTransButtonDirective, selector: \"button[nz-trans-button]\" }, { kind: \"directive\", type: i6.NzStringTemplateOutletDirective, selector: \"[nzStringTemplateOutlet]\", inputs: [\"nzStringTemplateOutletContext\", \"nzStringTemplateOutlet\"], exportAs: [\"nzStringTemplateOutlet\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: NzTextEditComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: 'nz-text-edit',\n                    exportAs: 'nzTextEdit',\n                    template: `\n    <ng-template [ngIf]=\"editing\" [ngIfElse]=\"notEditing\">\n      <textarea #textarea nz-input nzAutosize (blur)=\"confirm()\"></textarea>\n      <button nz-trans-button class=\"ant-typography-edit-content-confirm\" (click)=\"confirm()\">\n        <span nz-icon nzType=\"enter\"></span>\n      </button>\n    </ng-template>\n\n    <ng-template #notEditing>\n      <button\n        nz-tooltip\n        nz-trans-button\n        class=\"ant-typography-edit\"\n        [nzTooltipTitle]=\"tooltip === null ? null : tooltip || locale?.edit\"\n        (click)=\"onClick()\"\n      >\n        <ng-container *nzStringTemplateOutlet=\"icon; let icon\">\n          <span nz-icon [nzType]=\"icon\"></span>\n        </ng-container>\n      </button>\n    </ng-template>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    preserveWhitespaces: false,\n                    providers: [NzDestroyService]\n                }]\n        }], ctorParameters: function () { return [{ type: i0.NgZone }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i2.NzI18nService }, { type: i2$1.NzDestroyService }]; }, propDecorators: { text: [{\n                type: Input\n            }], icon: [{\n                type: Input\n            }], tooltip: [{\n                type: Input\n            }], startEditing: [{\n                type: Output\n            }], endEditing: [{\n                type: Output\n            }], textarea: [{\n                type: ViewChild,\n                args: ['textarea', { static: false }]\n            }], autosizeDirective: [{\n                type: ViewChild,\n                args: [NzAutosizeDirective, { static: false }]\n            }] } });\n\nconst NZ_CONFIG_MODULE_NAME = 'typography';\nconst EXPAND_ELEMENT_CLASSNAME = 'ant-typography-expand';\nclass NzTypographyComponent {\n    get hasEllipsisObservers() {\n        return this.nzOnEllipsis.observers.length > 0;\n    }\n    get canCssEllipsis() {\n        return this.nzEllipsis && this.cssEllipsis && !this.expanded && !this.hasEllipsisObservers;\n    }\n    get hasOperationsWithEllipsis() {\n        return (this.nzCopyable || this.nzEditable || this.nzExpandable) && this.nzEllipsis;\n    }\n    get copyText() {\n        return (typeof this.nzCopyText === 'string' ? this.nzCopyText : this.nzContent);\n    }\n    constructor(nzConfigService, host, cdr, viewContainerRef, renderer, platform, i18n, document, resizeService, directionality) {\n        this.nzConfigService = nzConfigService;\n        this.host = host;\n        this.cdr = cdr;\n        this.viewContainerRef = viewContainerRef;\n        this.renderer = renderer;\n        this.platform = platform;\n        this.i18n = i18n;\n        this.resizeService = resizeService;\n        this.directionality = directionality;\n        this._nzModuleName = NZ_CONFIG_MODULE_NAME;\n        this.nzCopyable = false;\n        this.nzEditable = false;\n        this.nzDisabled = false;\n        this.nzExpandable = false;\n        this.nzEllipsis = false;\n        this.nzCopyTooltips = undefined;\n        this.nzCopyIcons = ['copy', 'check'];\n        this.nzEditTooltip = undefined;\n        this.nzEditIcon = 'edit';\n        this.nzEllipsisRows = 1;\n        this.nzContentChange = new EventEmitter();\n        this.nzCopy = new EventEmitter();\n        this.nzExpandChange = new EventEmitter();\n        // This is not a two-way binding output with {@link nzEllipsis}\n        this.nzOnEllipsis = new EventEmitter();\n        this.expandableBtnElementCache = null;\n        this.editing = false;\n        this.cssEllipsis = false;\n        this.isEllipsis = true;\n        this.expanded = false;\n        this.ellipsisStr = '...';\n        this.dir = 'ltr';\n        this.viewInit = false;\n        this.rfaId = -1;\n        this.destroy$ = new Subject();\n        this.windowResizeSubscription = Subscription.EMPTY;\n        this.document = document;\n    }\n    onTextCopy(text) {\n        this.nzCopy.emit(text);\n    }\n    onStartEditing() {\n        this.editing = true;\n    }\n    onEndEditing(text) {\n        this.editing = false;\n        this.nzContentChange.emit(text);\n        if (this.nzContent === text) {\n            this.renderOnNextFrame();\n        }\n        this.cdr.markForCheck();\n    }\n    onExpand() {\n        this.isEllipsis = false;\n        this.expanded = true;\n        this.nzExpandChange.emit();\n        this.nzOnEllipsis.emit(false);\n    }\n    canUseCSSEllipsis() {\n        if (this.nzEditable || this.nzCopyable || this.nzExpandable || this.nzSuffix) {\n            return false;\n        }\n        // make sure {@link nzOnEllipsis} works, will force use JS to calculations\n        if (this.hasEllipsisObservers) {\n            return false;\n        }\n        if (this.nzEllipsisRows === 1) {\n            return isStyleSupport('textOverflow');\n        }\n        else {\n            return isStyleSupport('webkitLineClamp');\n        }\n    }\n    renderOnNextFrame() {\n        cancelRequestAnimationFrame(this.rfaId);\n        if (!this.viewInit || !this.nzEllipsis || this.nzEllipsisRows < 0 || this.expanded || !this.platform.isBrowser) {\n            return;\n        }\n        this.rfaId = reqAnimFrame(() => {\n            this.syncEllipsis();\n        });\n    }\n    getOriginContentViewRef() {\n        const viewRef = this.viewContainerRef.createEmbeddedView(this.contentTemplate, {\n            content: this.nzContent\n        });\n        viewRef.detectChanges();\n        return {\n            viewRef,\n            removeView: () => {\n                this.viewContainerRef.remove(this.viewContainerRef.indexOf(viewRef));\n            }\n        };\n    }\n    syncEllipsis() {\n        if (this.cssEllipsis) {\n            return;\n        }\n        const { viewRef, removeView } = this.getOriginContentViewRef();\n        const fixedNodes = [this.textCopyRef, this.textEditRef]\n            .filter(e => e && e.nativeElement)\n            .map(e => e.nativeElement);\n        const expandableBtnElement = this.getExpandableBtnElement();\n        if (expandableBtnElement) {\n            fixedNodes.push(expandableBtnElement);\n        }\n        const { contentNodes, text, ellipsis } = measure(this.host.nativeElement, this.nzEllipsisRows, viewRef.rootNodes, fixedNodes, this.ellipsisStr, this.nzSuffix);\n        removeView();\n        this.ellipsisText = text;\n        if (ellipsis !== this.isEllipsis) {\n            this.isEllipsis = ellipsis;\n            this.nzOnEllipsis.emit(ellipsis);\n        }\n        const ellipsisContainerNativeElement = this.ellipsisContainer.nativeElement;\n        while (ellipsisContainerNativeElement.firstChild) {\n            this.renderer.removeChild(ellipsisContainerNativeElement, ellipsisContainerNativeElement.firstChild);\n        }\n        contentNodes.forEach(n => {\n            this.renderer.appendChild(ellipsisContainerNativeElement, n.cloneNode(true));\n        });\n        this.cdr.markForCheck();\n    }\n    // Need to create the element for calculation size before view init\n    getExpandableBtnElement() {\n        if (this.nzExpandable) {\n            const expandText = this.locale ? this.locale.expand : '';\n            const cache = this.expandableBtnElementCache;\n            if (!cache || cache.innerText === expandText) {\n                const el = this.document.createElement('a');\n                el.className = EXPAND_ELEMENT_CLASSNAME;\n                el.innerText = expandText;\n                this.expandableBtnElementCache = el;\n            }\n            return this.expandableBtnElementCache;\n        }\n        else {\n            this.expandableBtnElementCache = null;\n            return null;\n        }\n    }\n    renderAndSubscribeWindowResize() {\n        if (this.platform.isBrowser) {\n            this.windowResizeSubscription.unsubscribe();\n            this.cssEllipsis = this.canUseCSSEllipsis();\n            this.renderOnNextFrame();\n            this.windowResizeSubscription = this.resizeService\n                .subscribe()\n                .pipe(takeUntil(this.destroy$))\n                .subscribe(() => this.renderOnNextFrame());\n        }\n    }\n    ngOnInit() {\n        this.i18n.localeChange.pipe(takeUntil(this.destroy$)).subscribe(() => {\n            this.locale = this.i18n.getLocaleData('Text');\n            this.cdr.markForCheck();\n        });\n        this.directionality.change?.pipe(takeUntil(this.destroy$)).subscribe((direction) => {\n            this.dir = direction;\n            this.cdr.detectChanges();\n        });\n        this.dir = this.directionality.value;\n    }\n    ngAfterViewInit() {\n        this.viewInit = true;\n        this.renderAndSubscribeWindowResize();\n    }\n    ngOnChanges(changes) {\n        const { nzCopyable, nzEditable, nzExpandable, nzEllipsis, nzContent, nzEllipsisRows, nzSuffix } = changes;\n        if (nzCopyable || nzEditable || nzExpandable || nzEllipsis || nzContent || nzEllipsisRows || nzSuffix) {\n            if (this.nzEllipsis) {\n                if (this.expanded) {\n                    this.windowResizeSubscription.unsubscribe();\n                }\n                else {\n                    this.renderAndSubscribeWindowResize();\n                }\n            }\n        }\n    }\n    ngOnDestroy() {\n        this.destroy$.next(true);\n        this.destroy$.complete();\n        this.expandableBtnElementCache = null;\n        this.windowResizeSubscription.unsubscribe();\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: NzTypographyComponent, deps: [{ token: i1$1.NzConfigService }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }, { token: i0.ViewContainerRef }, { token: i0.Renderer2 }, { token: i2$2.Platform }, { token: i2.NzI18nService }, { token: DOCUMENT }, { token: i2$1.NzResizeService }, { token: i5$1.Directionality, optional: true }], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.2.10\", type: NzTypographyComponent, selector: \"\\n  nz-typography,\\n  [nz-typography],\\n  p[nz-paragraph],\\n  span[nz-text],\\n  h1[nz-title], h2[nz-title], h3[nz-title], h4[nz-title]\\n  \", inputs: { nzCopyable: \"nzCopyable\", nzEditable: \"nzEditable\", nzDisabled: \"nzDisabled\", nzExpandable: \"nzExpandable\", nzEllipsis: \"nzEllipsis\", nzCopyTooltips: \"nzCopyTooltips\", nzCopyIcons: \"nzCopyIcons\", nzEditTooltip: \"nzEditTooltip\", nzEditIcon: \"nzEditIcon\", nzContent: \"nzContent\", nzEllipsisRows: \"nzEllipsisRows\", nzType: \"nzType\", nzCopyText: \"nzCopyText\", nzSuffix: \"nzSuffix\" }, outputs: { nzContentChange: \"nzContentChange\", nzCopy: \"nzCopy\", nzExpandChange: \"nzExpandChange\", nzOnEllipsis: \"nzOnEllipsis\" }, host: { properties: { \"class.ant-typography\": \"!editing\", \"class.ant-typography-rtl\": \"dir === \\\"rtl\\\"\", \"class.ant-typography-edit-content\": \"editing\", \"class.ant-typography-secondary\": \"nzType === \\\"secondary\\\"\", \"class.ant-typography-warning\": \"nzType === \\\"warning\\\"\", \"class.ant-typography-danger\": \"nzType === \\\"danger\\\"\", \"class.ant-typography-success\": \"nzType === \\\"success\\\"\", \"class.ant-typography-disabled\": \"nzDisabled\", \"class.ant-typography-ellipsis\": \"nzEllipsis && !expanded\", \"class.ant-typography-single-line\": \"nzEllipsis && nzEllipsisRows === 1\", \"class.ant-typography-ellipsis-single-line\": \"canCssEllipsis && nzEllipsisRows === 1\", \"class.ant-typography-ellipsis-multiple-line\": \"canCssEllipsis && nzEllipsisRows > 1\", \"style.-webkit-line-clamp\": \"(canCssEllipsis && nzEllipsisRows > 1) ? nzEllipsisRows : null\" } }, viewQueries: [{ propertyName: \"textEditRef\", first: true, predicate: NzTextEditComponent, descendants: true }, { propertyName: \"textCopyRef\", first: true, predicate: NzTextCopyComponent, descendants: true }, { propertyName: \"ellipsisContainer\", first: true, predicate: [\"ellipsisContainer\"], descendants: true }, { propertyName: \"expandableBtn\", first: true, predicate: [\"expandable\"], descendants: true }, { propertyName: \"contentTemplate\", first: true, predicate: [\"contentTemplate\"], descendants: true }], exportAs: [\"nzTypography\"], usesOnChanges: true, ngImport: i0, template: `\n    <ng-template #contentTemplate let-content=\"content\">\n      <ng-content *ngIf=\"!content\"></ng-content>\n      {{ content }}\n    </ng-template>\n    <ng-container *ngIf=\"!editing\">\n      <ng-container\n        *ngIf=\"\n          expanded ||\n            (!hasOperationsWithEllipsis && nzEllipsisRows === 1 && !hasEllipsisObservers) ||\n            canCssEllipsis ||\n            (nzSuffix && expanded);\n          else jsEllipsis\n        \"\n      >\n        <ng-template\n          [ngTemplateOutlet]=\"contentTemplate\"\n          [ngTemplateOutletContext]=\"{ content: nzContent }\"\n        ></ng-template>\n        <ng-container *ngIf=\"nzSuffix\">{{ nzSuffix }}</ng-container>\n      </ng-container>\n      <ng-template #jsEllipsis>\n        <span #ellipsisContainer></span>\n        <ng-container *ngIf=\"isEllipsis\">{{ ellipsisStr }}</ng-container>\n        <ng-container *ngIf=\"nzSuffix\">{{ nzSuffix }}</ng-container>\n        <a #expandable *ngIf=\"nzExpandable && isEllipsis\" class=\"ant-typography-expand\" (click)=\"onExpand()\">\n          {{ locale?.expand }}\n        </a>\n      </ng-template>\n    </ng-container>\n\n    <nz-text-edit\n      *ngIf=\"nzEditable\"\n      [text]=\"nzContent\"\n      [icon]=\"nzEditIcon\"\n      [tooltip]=\"nzEditTooltip\"\n      (endEditing)=\"onEndEditing($event)\"\n      (startEditing)=\"onStartEditing()\"\n    ></nz-text-edit>\n\n    <nz-text-copy\n      *ngIf=\"nzCopyable && !editing\"\n      [text]=\"copyText\"\n      [tooltips]=\"nzCopyTooltips\"\n      [icons]=\"nzCopyIcons\"\n      (textCopy)=\"onTextCopy($event)\"\n    ></nz-text-copy>\n  `, isInline: true, dependencies: [{ kind: \"directive\", type: i6$1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i6$1.NgTemplateOutlet, selector: \"[ngTemplateOutlet]\", inputs: [\"ngTemplateOutletContext\", \"ngTemplateOutlet\", \"ngTemplateOutletInjector\"] }, { kind: \"component\", type: NzTextCopyComponent, selector: \"nz-text-copy\", inputs: [\"text\", \"tooltips\", \"icons\"], outputs: [\"textCopy\"], exportAs: [\"nzTextCopy\"] }, { kind: \"component\", type: NzTextEditComponent, selector: \"nz-text-edit\", inputs: [\"text\", \"icon\", \"tooltip\"], outputs: [\"startEditing\", \"endEditing\"], exportAs: [\"nzTextEdit\"] }], changeDetection: i0.ChangeDetectionStrategy.OnPush, encapsulation: i0.ViewEncapsulation.None }); }\n}\n__decorate([\n    InputBoolean()\n], NzTypographyComponent.prototype, \"nzCopyable\", void 0);\n__decorate([\n    InputBoolean()\n], NzTypographyComponent.prototype, \"nzEditable\", void 0);\n__decorate([\n    InputBoolean()\n], NzTypographyComponent.prototype, \"nzDisabled\", void 0);\n__decorate([\n    InputBoolean()\n], NzTypographyComponent.prototype, \"nzExpandable\", void 0);\n__decorate([\n    InputBoolean()\n], NzTypographyComponent.prototype, \"nzEllipsis\", void 0);\n__decorate([\n    WithConfig()\n], NzTypographyComponent.prototype, \"nzCopyTooltips\", void 0);\n__decorate([\n    WithConfig()\n], NzTypographyComponent.prototype, \"nzCopyIcons\", void 0);\n__decorate([\n    WithConfig()\n], NzTypographyComponent.prototype, \"nzEditTooltip\", void 0);\n__decorate([\n    WithConfig()\n], NzTypographyComponent.prototype, \"nzEditIcon\", void 0);\n__decorate([\n    WithConfig(),\n    InputNumber()\n], NzTypographyComponent.prototype, \"nzEllipsisRows\", void 0);\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: NzTypographyComponent, decorators: [{\n            type: Component,\n            args: [{\n                    selector: `\n  nz-typography,\n  [nz-typography],\n  p[nz-paragraph],\n  span[nz-text],\n  h1[nz-title], h2[nz-title], h3[nz-title], h4[nz-title]\n  `,\n                    exportAs: 'nzTypography',\n                    template: `\n    <ng-template #contentTemplate let-content=\"content\">\n      <ng-content *ngIf=\"!content\"></ng-content>\n      {{ content }}\n    </ng-template>\n    <ng-container *ngIf=\"!editing\">\n      <ng-container\n        *ngIf=\"\n          expanded ||\n            (!hasOperationsWithEllipsis && nzEllipsisRows === 1 && !hasEllipsisObservers) ||\n            canCssEllipsis ||\n            (nzSuffix && expanded);\n          else jsEllipsis\n        \"\n      >\n        <ng-template\n          [ngTemplateOutlet]=\"contentTemplate\"\n          [ngTemplateOutletContext]=\"{ content: nzContent }\"\n        ></ng-template>\n        <ng-container *ngIf=\"nzSuffix\">{{ nzSuffix }}</ng-container>\n      </ng-container>\n      <ng-template #jsEllipsis>\n        <span #ellipsisContainer></span>\n        <ng-container *ngIf=\"isEllipsis\">{{ ellipsisStr }}</ng-container>\n        <ng-container *ngIf=\"nzSuffix\">{{ nzSuffix }}</ng-container>\n        <a #expandable *ngIf=\"nzExpandable && isEllipsis\" class=\"ant-typography-expand\" (click)=\"onExpand()\">\n          {{ locale?.expand }}\n        </a>\n      </ng-template>\n    </ng-container>\n\n    <nz-text-edit\n      *ngIf=\"nzEditable\"\n      [text]=\"nzContent\"\n      [icon]=\"nzEditIcon\"\n      [tooltip]=\"nzEditTooltip\"\n      (endEditing)=\"onEndEditing($event)\"\n      (startEditing)=\"onStartEditing()\"\n    ></nz-text-edit>\n\n    <nz-text-copy\n      *ngIf=\"nzCopyable && !editing\"\n      [text]=\"copyText\"\n      [tooltips]=\"nzCopyTooltips\"\n      [icons]=\"nzCopyIcons\"\n      (textCopy)=\"onTextCopy($event)\"\n    ></nz-text-copy>\n  `,\n                    changeDetection: ChangeDetectionStrategy.OnPush,\n                    encapsulation: ViewEncapsulation.None,\n                    preserveWhitespaces: false,\n                    host: {\n                        '[class.ant-typography]': '!editing',\n                        '[class.ant-typography-rtl]': 'dir === \"rtl\"',\n                        '[class.ant-typography-edit-content]': 'editing',\n                        '[class.ant-typography-secondary]': 'nzType === \"secondary\"',\n                        '[class.ant-typography-warning]': 'nzType === \"warning\"',\n                        '[class.ant-typography-danger]': 'nzType === \"danger\"',\n                        '[class.ant-typography-success]': 'nzType === \"success\"',\n                        '[class.ant-typography-disabled]': 'nzDisabled',\n                        '[class.ant-typography-ellipsis]': 'nzEllipsis && !expanded',\n                        '[class.ant-typography-single-line]': 'nzEllipsis && nzEllipsisRows === 1',\n                        '[class.ant-typography-ellipsis-single-line]': 'canCssEllipsis && nzEllipsisRows === 1',\n                        '[class.ant-typography-ellipsis-multiple-line]': 'canCssEllipsis && nzEllipsisRows > 1',\n                        '[style.-webkit-line-clamp]': '(canCssEllipsis && nzEllipsisRows > 1) ? nzEllipsisRows : null'\n                    }\n                }]\n        }], ctorParameters: function () { return [{ type: i1$1.NzConfigService }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }, { type: i0.ViewContainerRef }, { type: i0.Renderer2 }, { type: i2$2.Platform }, { type: i2.NzI18nService }, { type: undefined, decorators: [{\n                    type: Inject,\n                    args: [DOCUMENT]\n                }] }, { type: i2$1.NzResizeService }, { type: i5$1.Directionality, decorators: [{\n                    type: Optional\n                }] }]; }, propDecorators: { nzCopyable: [{\n                type: Input\n            }], nzEditable: [{\n                type: Input\n            }], nzDisabled: [{\n                type: Input\n            }], nzExpandable: [{\n                type: Input\n            }], nzEllipsis: [{\n                type: Input\n            }], nzCopyTooltips: [{\n                type: Input\n            }], nzCopyIcons: [{\n                type: Input\n            }], nzEditTooltip: [{\n                type: Input\n            }], nzEditIcon: [{\n                type: Input\n            }], nzContent: [{\n                type: Input\n            }], nzEllipsisRows: [{\n                type: Input\n            }], nzType: [{\n                type: Input\n            }], nzCopyText: [{\n                type: Input\n            }], nzSuffix: [{\n                type: Input\n            }], nzContentChange: [{\n                type: Output\n            }], nzCopy: [{\n                type: Output\n            }], nzExpandChange: [{\n                type: Output\n            }], nzOnEllipsis: [{\n                type: Output\n            }], textEditRef: [{\n                type: ViewChild,\n                args: [NzTextEditComponent, { static: false }]\n            }], textCopyRef: [{\n                type: ViewChild,\n                args: [NzTextCopyComponent, { static: false }]\n            }], ellipsisContainer: [{\n                type: ViewChild,\n                args: ['ellipsisContainer', { static: false }]\n            }], expandableBtn: [{\n                type: ViewChild,\n                args: ['expandable', { static: false }]\n            }], contentTemplate: [{\n                type: ViewChild,\n                args: ['contentTemplate', { static: false }]\n            }] } });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\nclass NzTypographyModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: NzTypographyModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.2.10\", ngImport: i0, type: NzTypographyModule, declarations: [NzTypographyComponent, NzTextCopyComponent, NzTextEditComponent], imports: [BidiModule,\n            CommonModule,\n            NzIconModule,\n            NzToolTipModule,\n            NzInputModule,\n            NzI18nModule,\n            NzTransButtonModule,\n            ClipboardModule,\n            NzOutletModule], exports: [NzTypographyComponent, NzTextCopyComponent, NzTextEditComponent, PlatformModule] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: NzTypographyModule, imports: [BidiModule,\n            CommonModule,\n            NzIconModule,\n            NzToolTipModule,\n            NzInputModule,\n            NzI18nModule,\n            NzTransButtonModule,\n            ClipboardModule,\n            NzOutletModule, PlatformModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.10\", ngImport: i0, type: NzTypographyModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [\n                        BidiModule,\n                        CommonModule,\n                        NzIconModule,\n                        NzToolTipModule,\n                        NzInputModule,\n                        NzI18nModule,\n                        NzTransButtonModule,\n                        ClipboardModule,\n                        NzOutletModule\n                    ],\n                    exports: [NzTypographyComponent, NzTextCopyComponent, NzTextEditComponent, PlatformModule],\n                    declarations: [NzTypographyComponent, NzTextCopyComponent, NzTextEditComponent]\n                }]\n        }] });\n\n/**\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://github.com/NG-ZORRO/ng-zorro-antd/blob/master/LICENSE\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NzTextCopyComponent, NzTextEditComponent, NzTypographyComponent, NzTypographyModule };\n"],"x_google_ignoreList":[0,1,2]}